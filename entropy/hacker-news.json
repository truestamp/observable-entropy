{
  "stories": [
    {
      "by": "bewalt",
      "descendants": 0,
      "id": 31656740,
      "score": 1,
      "time": 1654619344,
      "title": "Exploring Tunic with Andrew Shouldice – The AIAS Game Maker's Notebook Podcast",
      "type": "story",
      "url": "https://www.youtube.com/watch?v=Rmxy8L3uLKc"
    },
    {
      "by": "sylvain_kerkour",
      "descendants": 0,
      "id": 31656681,
      "score": 2,
      "time": 1654619166,
      "title": "50+ Mini web projects using HTML, CSS and JavaScript",
      "type": "story",
      "url": "https://github.com/bradtraversy/50projects50days"
    },
    {
      "by": "max_",
      "descendants": 0,
      "id": 31656678,
      "score": 1,
      "time": 1654619154,
      "title": "Meta Ruined Instagram",
      "type": "story",
      "url": "https://as1ndu.github.io/2022/06/meta-ruined-instagram/"
    },
    {
      "by": "arobinson_ae",
      "descendants": 1,
      "id": 31656639,
      "kids": [
        31656641
      ],
      "score": 1,
      "time": 1654618994,
      "title": "Hefty search – search everywhere at once",
      "type": "story",
      "url": "https://www.heftysearch.com/"
    },
    {
      "by": "Whitespace",
      "descendants": 0,
      "id": 31656603,
      "score": 2,
      "time": 1654618884,
      "title": "Trash Fence Stops Plastic Tsunami in World’s Most Polluting River (Then Fails)",
      "type": "story",
      "url": "https://www.youtube.com/watch?v=4rVTWsQ23Pk"
    },
    {
      "by": "yakshaving_jgt",
      "descendants": 0,
      "id": 31656591,
      "score": 2,
      "time": 1654618841,
      "title": "100% of Patients in Remission After Rectal Cancer Drug Trial",
      "type": "story",
      "url": "https://www.nejm.org/doi/pdf/10.1056/NEJMoa2201445"
    },
    {
      "by": "edavis",
      "descendants": 0,
      "id": 31656579,
      "score": 3,
      "time": 1654618787,
      "title": "How the Internet Is Like a Dying Star",
      "type": "story",
      "url": "https://newsletters.theatlantic.com/galaxy-brain/629ec16551acba002091af11/internet-social-media-reactionary-doom-loop/"
    },
    {
      "by": "NickRandom",
      "descendants": 0,
      "id": 31656549,
      "score": 1,
      "time": 1654618652,
      "title": "Improving the accessibility of online data visualizations for screen-readers",
      "type": "story",
      "url": "https://github.com/athersharif/voxlens"
    },
    {
      "by": "alexarena",
      "descendants": 0,
      "id": 31656496,
      "score": 3,
      "text": "Hey HN,<p>I&#x27;m Alex, founder of Interval [1]. We’re bringing internal tools written like CLIs to the browser to make them more powerful, through a Node.js SDK which attaches them to a hosted dashboard without any frontend code. Large companies have full teams that work on internal dashboards and tooling. Interval brings that infrastructure to anyone.<p>In our previous project we had ~65 CLI scripts for tasks like provisioning user accounts, moderating content, and migrating data. These were quick to write and powerful. They also turned into an ongoing timesuck. Non-technical coworkers needed to bother an engineer every time to run one. Some of them were powerful enough to be footguns, and because we had to rewrite validation every time, we were always a bit scared of them.<p>We wanted to bring the power and speed of cranking out CLI scripts into the world of modern software development: testable, easy to expose to colleagues via a URL, and works with Everything Else by default. That’s why we made Interval.<p>We built:<p>- A Node.js + TypeScript SDK – this embeds in your backend codebase and provides APIs for defining tools + collecting input + displaying output. These APIs are simple awaitable functions that return parsed, validated, and soundly-typed user input. You put your Interval actions in source control, test them, run CI&#x2F;etc exactly like you do for all your other backend code.<p>- A hosted UI, which handles I&#x2F;O for the scripts in a less brittle way than command line arguments do, while also taking care of auth, permissions, and audit logs.<p>This lets you take your CLI commands out of an engineer’s terminal and share them with the whole company. Give support the ability to ban spammers but not drop the prod DB. Require two people for sensitive actions. Echo commands to a Slack channel. It’s a powerful set of primitives out of the box and lets you do anything else you want in the code you’re already writing, without making you have to spin up a second company just to support your internal tools.<p>Under the hood, your CLIs and the hosted dashboard talk through a 2-way message passing system. We felt this approach was the best of both worlds:<p>- UIs are hosted by Interval: We build, host, and maintain the part most people don&#x27;t care about for internal tools.<p>- Backends are self-hosted: We can&#x27;t see your business logic, secrets, etc.<p>We&#x27;re in public beta today. I hope you like it and I&#x27;m happy to answer any questions&#x2F;feedback in the comments.<p>[1]: <a href=\"https:&#x2F;&#x2F;interval.com\" rel=\"nofollow\">https:&#x2F;&#x2F;interval.com</a>",
      "time": 1654618441,
      "title": "Show HN: Interval, CLIs in browser with no front end code",
      "type": "story",
      "url": "https://interval.com/"
    },
    {
      "by": "didgetmaster",
      "descendants": 2,
      "id": 31656473,
      "kids": [
        31656623
      ],
      "score": 2,
      "text": "I have worked a few jobs that required some DB tuning in order to get queries to run faster. One of the first things to do is to create and maintain indexes on relational tables. You spend time analyzing queries to determine what columns need indexes and what kind of index each one needs. Once the queries get fast enough, someone comes up with a new query that is slow because it filters on a column without an index and your nose is right back at the grindstone.<p>I created a new DB architecture that is radically different than anything I have seen. It is a set of performant key-value stores that can be grouped together to form relational tables. The data within each store is optimized for search so you have just one copy of each data point (no separate indexes). It can handle large tables (100 million+ rows and 2000+ columns) and has a flexible schema so it can handle data like Json that includes arrays for each column. The system is in open beta at &lt;www.Didgets.com&gt; so anyone can download and try it.<p>Since I never liked the grunt work of creating and maintaining indexes (along with the performance hit they cause for inserts, updates, and deletes); I thought that other database experts would be really interested in a new system that does not require them. Queries on my system are faster than on other highly-tuned DBs. But so far I have gotten a collective yawn from many people I show it to.<p>Am I missing something? Do others really like creating and maintaining DB indexes, even though I did not?",
      "time": 1654618322,
      "title": "Is a DB that doesn't need indexes attractive to DBAs?",
      "type": "story"
    }
  ]
}
{
  "stories": [
    {
      "by": "1vuio0pswjnm7",
      "descendants": 0,
      "id": 31174088,
      "score": 1,
      "text": "Improved slightly over https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=30916201<p><pre><code>     sed &#x27;s&#x2F;.\\{4\\}&#x2F;&#x2F;&#x27; &lt;&lt;eof|flex -8iCrf\n     &#x2F;* extract, reformat, print json *&#x2F;\n    \n     int fileno (FILE *);\n     #define echo do{if(fwrite(yytext,(size_t)yyleng,1,yyout)){}}while(0)\n     #define jmp (yy_start) = 1 + 2 *\n     #define pc(x) putchar(x)\n    %option nounput noinput noyywrap\n    %s x1 x2\n    %%\n    \n    ^\\40+ \n     &#x2F;* quotes\n      &quot;key&quot;:&quot; \n      &quot;key&quot;: &quot; \n     *&#x2F;\n    \\&quot;[^\\&quot;:\\]\\)]*\\&quot;:\\40*\\&quot; echo;jmp x1;\n    \n     &#x2F;* bracket followed by brace \n      &quot;key&quot;:[{ \n      &quot;key&quot;: [{ \n     *&#x2F;\n    \\&quot;[^\\&quot;:\\]\\)]*\\&quot;:\\40*\\[\\40*\\{ echo;pc(10);\n    \n     &#x2F;* number \n     &quot;key&quot;:1\n     &quot;key&quot;: 1\n     *&#x2F;\n    \\&quot;[^\\&quot;:\\]\\)]*\\&quot;:\\40*[0-9\\40\\12\\15]* echo;jmp x2;\n    &lt;x2&gt;[,}] pc(10);jmp 0;\n    \n     &#x2F;* bracket (unquoted, comma-separated array values)\n      &quot;key&quot;:[ \n      &quot;key&quot;: [ \n     *&#x2F;\n    \\&quot;[^\\&quot;:\\]\\)]*\\&quot;:\\40*\\[ echo;jmp x1;\n    \n     &#x2F;* brace\n      &quot;key&quot;:{ \n      &quot;key&quot;: { \n     *&#x2F;\n    \\&quot;[^\\&quot;:\\]\\)]*\\&quot;:\\40*\\{ echo;pc(10);\n    \n     &#x2F;* open brace not closed brace *&#x2F; \n    &lt;x1&gt;[\\]\\{\\&quot;] echo;pc(10);jmp 0;\n    &lt;x1&gt;[^\\]\\{\\&quot;\\12]* echo;\n    \\n|.\n    %%\n    int main(){ yylex();exit(0);}\n\n   eof\n\n     cc  -std=c89 -Wall -pedantic -pipe lex.yy.c -static -o yy059\n\n   Usage: yy059 &lt; 1.json\n\n   yy059 is for extracting JSON from HTML and printing it as a new, left-justified, line-delimited format readable to me. \n\n   To use with indented JSON, e.g., json_reformat output (json_reformat from yajl project), first remove the indentation, e.g.,\n\n      sed &#x27;s&#x2F; *&#x2F;&#x2F;&#x27; 1.json | yy059\n\n   NB. This is made for me, primarily for reading YouTube JSON. It is used in a personal YouTube search utility. JSON from non-YouTube sources, e.g., Twitter, may contain escaped quotes, often for including quotes associated with href tags. Remove escaped quotes first, e.g., using yy064, disclosed here: https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=30916201</code></pre>",
      "time": 1651013060,
      "title": "JSON Extract, Reformat and Print",
      "type": "story"
    },
    {
      "by": "0xa2",
      "descendants": 0,
      "id": 31174085,
      "score": 1,
      "time": 1651013041,
      "title": "Godfrey's Team Designs a Parallel Internet with Speed-of-Light Latencies",
      "type": "story",
      "url": "https://cs.illinois.edu/news/godfreys-team-designs-a-parallel-internet-with-speed-of-light-latencies"
    },
    {
      "by": "pabs3",
      "descendants": 0,
      "id": 31174083,
      "score": 1,
      "time": 1651013024,
      "title": "Extracting Rationale for Open Source Development Decisions",
      "type": "story",
      "url": "https://neverworkintheory.org/2022/04/25/rationale-for-open-source-development-decisions.html"
    },
    {
      "by": "ramtatatam",
      "descendants": 0,
      "id": 31174081,
      "score": 1,
      "time": 1651013017,
      "title": "CodinGame Spring Challenge 2022",
      "type": "story",
      "url": "https://www.codingame.com/ide/challenge/spring-challenge-2022"
    },
    {
      "by": "100001_100011",
      "descendants": 0,
      "id": 31174079,
      "score": 1,
      "time": 1651013007,
      "title": "New current thing just dropped: “algorithmic justice”",
      "type": "story",
      "url": "https://twitter.com/pmarca/status/1519040044442406912"
    },
    {
      "by": "pabs3",
      "descendants": 0,
      "id": 31174064,
      "score": 1,
      "time": 1651012885,
      "title": "Malicious relays and the health of the Tor network",
      "type": "story",
      "url": "https://blog.torproject.org/malicious-relays-health-tor-network/"
    },
    {
      "by": "krm01",
      "descendants": 0,
      "id": 31174038,
      "score": 1,
      "time": 1651012642,
      "title": "Ask HN: Best book/course on time management?",
      "type": "story"
    },
    {
      "by": "HillRat",
      "descendants": 0,
      "id": 31174036,
      "score": 1,
      "time": 1651012624,
      "title": "“The Mission”: New ASC short film for testing digital displays",
      "type": "story",
      "url": "https://theasc.com/asc/stem2"
    },
    {
      "by": "metadat",
      "descendants": 1,
      "id": 31174020,
      "kids": [
        31174024
      ],
      "score": 2,
      "time": 1651012477,
      "title": "The Dirty Secret of Capitalism – and a New Way Forward",
      "type": "story",
      "url": "https://www.youtube.com/watch?v=th3KE_H27bs"
    },
    {
      "by": "pabs3",
      "descendants": 0,
      "id": 31174007,
      "score": 1,
      "time": 1651012373,
      "title": "sirbarksalot – Listens for Dog Barking",
      "type": "story",
      "url": "https://github.com/nmkridler/sirbarksalot"
    }
  ]
}
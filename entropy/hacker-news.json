{
  "stories": [
    {
      "by": "arinlen",
      "descendants": 0,
      "id": 31149409,
      "score": 1,
      "time": 1650844712,
      "title": "Dogger Bank Wind Farm",
      "type": "story",
      "url": "https://en.wikipedia.org/wiki/Dogger_Bank_Wind_Farm"
    },
    {
      "by": "technion",
      "descendants": 0,
      "id": 31149403,
      "score": 1,
      "time": 1650844660,
      "title": "Nurses told to BYOD after IT lay off",
      "type": "story",
      "url": "https://old.reddit.com/r/nursing/comments/uaurdz/byol_now_bring_your_own_laptop_to_work/"
    },
    {
      "by": "wufufufu",
      "descendants": 1,
      "id": 31149401,
      "kids": [
        31149406
      ],
      "score": 1,
      "time": 1650844644,
      "title": "Show HN: Groomba – a Slackbot that grooms your Jira backlog",
      "type": "story",
      "url": "https://slack.com/apps/A01EL1SR7V4-groomba"
    },
    {
      "by": "lsergei",
      "descendants": 1,
      "id": 31149398,
      "kids": [
        31149399
      ],
      "score": 1,
      "time": 1650844610,
      "title": "Battery and Solar Powered Starlink Internet for Ukrainian Refugees on US Border",
      "type": "story",
      "url": "https://twitter.com/novaukraine/status/1517926239587037184"
    },
    {
      "by": "pabs3",
      "descendants": 0,
      "id": 31149385,
      "score": 1,
      "time": 1650844518,
      "title": "libgnunetchat – write a typical messenger application on top of GNUnet",
      "type": "story",
      "url": "https://www.gnunet.org/en/news/2022-04-libgnunetchat-0.1.0.html"
    },
    {
      "by": "jamesdco",
      "descendants": 0,
      "id": 31149384,
      "score": 2,
      "time": 1650844517,
      "title": "Time might not exist, according to physicists and philosophers – but that’s ok",
      "type": "story",
      "url": "https://theconversation.com/time-might-not-exist-according-to-physicists-and-philosophers-but-thats-okay-181268"
    },
    {
      "by": "todsacerdoti",
      "descendants": 0,
      "id": 31149362,
      "score": 1,
      "time": 1650844278,
      "title": "Compute shaders in graphics: Gaussian blur",
      "type": "story",
      "url": "https://lisyarus.github.io/blog/graphics/2022/04/21/compute-blur.html"
    },
    {
      "by": "evo_9",
      "descendants": 0,
      "id": 31149355,
      "score": 2,
      "time": 1650844221,
      "title": "In rare interview, Monkey Island designers tell Ars about long-awaited Return",
      "type": "story",
      "url": "https://arstechnica.com/gaming/2022/04/in-rare-interview-monkey-island-designers-tell-ars-about-long-awaited-return/"
    },
    {
      "by": "occamschainsaw",
      "descendants": 0,
      "id": 31149354,
      "score": 1,
      "time": 1650844219,
      "title": "Picking Up the Pace of Scientific Discovery",
      "type": "story",
      "url": "https://magazine.utoronto.ca/research-ideas/science/picking-up-the-pace-of-scientific-discovery-acceleration-consortium/"
    },
    {
      "by": "harpiaharpyja",
      "descendants": 1,
      "id": 31149332,
      "kids": [
        31149340
      ],
      "score": 1,
      "text": "https:&#x2F;&#x2F;github.com&#x2F;mwerezak&#x2F;sphinx-lang<p>An implementation of a dynamic programming language in Rust. Includes: Parser&#x2F;Compiler, REPL, Virtual Machine, Bytecode Disassembler<p>This started out as a learning project to teach myself Rust. It has grown into a decently substantial piece of software and I&#x27;ve learned quite a bit in the process!<p>Some neat things:<p>+ A garbage collector that can store dynamically sized types without any double-indirection (i.e. I have my own Box implementation with manual alloc&#x2F;dealloc)<p>+ The smart pointer used to reference GCed data is a thin pointer. The ptr metadata needed for DSTs is stored in the GC allocation itself, so that the GC smart pointer is just a single usize wide. This allows me to keep the core value enum Variant down to 16 bytes (8 bytes for data, the enum discriminant, and some padding).<p>+ The GC also supports weak references!<p>+ Statically dispatched type object model using a newtype wrapper and Rust&#x27;s declarative macros. Ok, what that means is that I have a MetaObject trait that I can use to easily add new data types and define the behavior for specific types. Similar idea to Python&#x27;s PyTypeObject though very different in implementation. However, I don&#x27;t resort to dynamic dispatch or trait objects despite working with dynamically type data. Instead, I have a newtype wrapper over the core value enum Variant that statically dispatches to each of the enum branches! And then a few macros that minimize the boilerplate required if I want to add a new branch to Variant or a new method to MetaObject (just a single line in each case).<p>+ Different string representations! This was inspired by the flexstr crate. Strings that are short enough to fit inside a Variant are &quot;inlined&quot; directly in the value. Longer strings are either GCed or interned in a thread-local string table. All identifiers are interned.<p>+ An efficient implementation of closures inspired by Lua&#x27;s upvalues.<p>The language is still pretty WIP. I&#x27;m planning to add an import system, a small standard library, and a few other things<p>(Yes, the name might not be the best, being also used by a well-known ReST docs generator, I&#x27;ll take suggestions. I do like the name though, both as a reference to the mythological creature and the cat :D)",
      "time": 1650843990,
      "title": "Show HN: I'm making a dynamic language in Rust",
      "type": "story"
    }
  ]
}
{
  "stories": [
    {
      "by": "vanusa",
      "descendants": 0,
      "id": 29669340,
      "score": 1,
      "time": 1640312970,
      "title": "The Absurdity of Renting a Car Will No Longer Be Tolerated",
      "type": "story",
      "url": "https://www.theatlantic.com/technology/archive/2021/12/car-rental-shortage-covid/621068/"
    },
    {
      "by": "utilityhotbar",
      "descendants": 0,
      "id": 29669327,
      "score": 2,
      "text": "The biggest difference in my mind between how computer science is assessed and how computer programming works in practice is the removal of context. Code in the whiteboard interview assignment and the CS classroom is pristine, perfect, isolated from all surrounding impurities. Any interfaces in and out of this plane of pure imagination are, like the blood-brain barrier, clearly marked and even more clearly defined, never complex or unknowable. The data comes in a format specified by the question and leaves in another, similar format, or is automatically captured when the output buffer is flushed. Actual, far more complex code works in the background (if code is executed in this fenced box) to ensure that the little frustrations of programming never intercede with what is perceived to be the pure core, the “true test” of one’s technical mettle.<p>Why is this a problem? The problem, in my view, is that the people selected through this process are woefully ill-equipped to deal with the practical nature of code - that is to say, how the practice of software development is carried out in the real world, so to speak. If code is the key to the digital era, then context is the key to code. Unless you are dealing with only hand-built computer hardware, almost all code you will write will build on the code written by others - often this is explicit, such as when you invoke a library, but just as often this is implicit, such as when you make use of a programming language whose interpreter has been constructed by another. Modern programming, then, is about the navigation of multifarious contexts. Any web developer will know this through the concept of the tech stack, layers of technologies that synthesise with each other to provide the necessary functionality modern web applications require, but the concept is far more universal than that. Any time we make use of multiple software suites, languages, modules or even scripts in the same project, we are combining contexts.<p>Contexts, of course, don’t always play well with each other. The dreaded dependency errors and data format incompatibilities are very often only the most surface sign of this issue - it can just as often be seen in the design patterns invoked by different libraries, differing approaches to similar problems like managing user sessions or data storage. The “little frustrations” we suffer each time we merge these different contexts are not just little frustrations, they are demonstrations of a different type of skill set, one that is, I would argue, just as if not more important than a theoretical grasp of how to reverse a binary tree. For complex problems people have always tried to create complex solutions, all-in-one platforms and ecosystems like Tensorflow for machine learning, but they will never be sufficient. More than bodging or hacking, the modern software engineer learns how to harmonise different contexts, and turn them into reliable, useful code that performs to specification. The ability to see a practical, context-sensitive problem, diagnose the source, look up a solution (likely on StackOverflow), and then implement that solution in a reliable way is just as valuable as the ability to turn a theoretical algorithm into equally theoretical code. After all, how many of us have needed to reverse a binary tree “by hand” in our work?<p>I have no grand thesis, no sudden twist to share, except what I have already told you. As code grows more complex, as our problems become more difficult to visualise and solve using a single context, the need for the context-confident engineer grows by the day. I just hope that we’ll be able to find them, when the time comes.",
      "time": 1640312889,
      "title": "Theory: Context Is the Key to Code",
      "type": "story"
    },
    {
      "by": "throwaway2474",
      "descendants": 0,
      "id": 29669290,
      "score": 1,
      "text": "I live in a part of the world where we haven’t had much Covid. At this point though Omicron seems to be evading vaccines and spreading rapidly.<p>I’m struggling to decide whether to treat it as something mild that I’m definitely going to get, or something really bad that I should be taking strong precautions against. Reading news isn’t overly helpful as it only shows extreme cases&#x2F;views.<p>Have you had Covid, and what was your experience like?",
      "time": 1640312589,
      "title": "Ask HN: Have you had Covid? How bad was it?",
      "type": "story"
    },
    {
      "by": "vanusa",
      "descendants": 0,
      "id": 29669281,
      "score": 1,
      "time": 1640312543,
      "title": "Tesla bows to pressure, stops allowing drivers to play video games while driving",
      "type": "story",
      "url": "https://www.theguardian.com/technology/2021/dec/23/tesla-vehicles-video-games-driving"
    },
    {
      "by": "fagnerbrack",
      "descendants": 1,
      "id": 29669277,
      "kids": [
        29669279
      ],
      "score": 2,
      "time": 1640312531,
      "title": "Just Found This Book Analysing Anonymous Speech. Worth Buying?",
      "type": "story",
      "url": "https://www.bloomsbury.com/au/anonymous-speech-9781849466134/"
    },
    {
      "by": "ragall",
      "descendants": 0,
      "id": 29669274,
      "score": 1,
      "time": 1640312480,
      "title": "Prodspec and Annealing: Google's Internal Infrastructure-as-Code",
      "type": "story",
      "url": "https://www.usenix.org/publications/loginonline/prodspec-and-annealing-intent-based-actuation-google-production"
    },
    {
      "by": "teleforce",
      "descendants": 0,
      "id": 29669270,
      "score": 1,
      "time": 1640312441,
      "title": "Comparing Open Source BGP Stacks",
      "type": "story",
      "url": "https://elegantnetwork.github.io/posts/comparing-open-source-bgp-stacks/"
    },
    {
      "by": "ani_obsessive",
      "descendants": 0,
      "id": 29669258,
      "score": 1,
      "time": 1640312339,
      "title": "The Art of a Katsuhiro Otomo Storyboard",
      "type": "story",
      "url": "https://animationobsessive.substack.com/p/4-the-art-of-an-otomo-storyboard"
    },
    {
      "by": "throwaway81523",
      "descendants": 1,
      "id": 29669254,
      "kids": [
        29669259
      ],
      "score": 1,
      "time": 1640312297,
      "title": "Droplet Dogma's Role in Misidentification of Airborne Infection Transmission",
      "type": "story",
      "url": "https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3904176"
    },
    {
      "by": "enigmatic02",
      "descendants": 0,
      "id": 29669225,
      "score": 2,
      "time": 1640311989,
      "title": "Kanye Story",
      "type": "story",
      "url": "https://thekanyestory.com"
    }
  ]
}
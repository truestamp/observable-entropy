{
  "stories": [
    {
      "by": "greenyoda",
      "descendants": 0,
      "id": 31705923,
      "score": 1,
      "time": 1654966190,
      "title": "Fu-Go Balloon Bomb",
      "type": "story",
      "url": "https://en.wikipedia.org/wiki/Fu-Go_balloon_bomb"
    },
    {
      "by": "unignorant",
      "descendants": 0,
      "id": 31705881,
      "score": 1,
      "time": 1654965921,
      "title": "Build Your Own Git",
      "type": "story",
      "url": "https://app.codecrafters.io/courses/git/overview?t=181539d30d21c5f-0b027212fc8df98-49193101-384000-181539d30d324b0"
    },
    {
      "by": "OrderOfChaos",
      "descendants": 0,
      "id": 31705868,
      "score": 1,
      "time": 1654965811,
      "title": "The Need for Long-Term Research",
      "type": "story",
      "url": "https://kk.org/thetechnium/the-need-for-long-term-research/"
    },
    {
      "by": "Brystephor",
      "descendants": 0,
      "id": 31705854,
      "score": 1,
      "text": "I took a networking class in college and I remember high level concepts of basic topics but wanted to refresh my memory on the rest of the topics. Things like DNS, subnets, CIDR, various protocols (unicast, multicast, etc) and other similar topics.",
      "time": 1654965727,
      "title": "Ask HN: What books or websites are good for learning about networks?",
      "type": "story"
    },
    {
      "by": "georgeam",
      "descendants": 0,
      "id": 31705850,
      "score": 1,
      "text": "From CS Theory, all regular expressions can be converted to deterministic finite automata.  I would like a python library that tells me the precise point at which a string &quot;loses hope&quot; of matching a regular expression.  Eg.<p>Given a regular expression like  aba*<p>And a string like abbab<p>I want an output that says the match failed at\nan index of 2.<p>meaning that the first ab match (or more technically, are the prefix of a match), but the remaining bab &quot;kill&quot; the possibility of a match.<p>Anyone know of a python library that does this?",
      "time": 1654965710,
      "title": "Ask HN: Python library for regex with “extent-of-match”",
      "type": "story"
    },
    {
      "by": "DocFeind",
      "descendants": 0,
      "id": 31705841,
      "score": 1,
      "time": 1654965677,
      "title": "Mobile home rent increases skyrocketing as corporations take ownership",
      "type": "story",
      "url": "https://www.foxbusiness.com/economy/mobile-home-rent-increases-skyrocketing-as-corporations-take-ownership"
    },
    {
      "by": "leephillips",
      "descendants": 0,
      "id": 31705830,
      "score": 1,
      "time": 1654965624,
      "title": "Assembly Theory Explains and Quantifies the Emergence of Selection and Evolution",
      "type": "story",
      "url": "https://arxiv.org/abs/2206.02279"
    },
    {
      "by": "jger15",
      "descendants": 0,
      "id": 31705827,
      "score": 1,
      "time": 1654965609,
      "title": "How to trade money and time (2014)",
      "type": "story",
      "url": "https://meteuphoric.com/2014/03/25/how-to-trade-money-and-time/"
    },
    {
      "by": "0des",
      "descendants": 2,
      "id": 31705768,
      "kids": [
        31705778,
        31705794
      ],
      "score": 1,
      "text": "I&#x27;m reading documentation and noticing that a lot of blogs use non wrapping lines for code examples despite also using numbered lines.<p>Example: https:&#x2F;&#x2F;stripe.com&#x2F;docs&#x2F;development&#x2F;quickstart&#x2F;go<p>I am not a UI expert, so I&#x27;m genuinely asking for those of you who prefer to horizontally scroll content, why is this better?<p>What aggravates me is that I can&#x27;t simply zoom out more to get it all on one page, I end up with a 2 inch strip of content down the middle of the page. This suggests, to me, that assuming all things are done for good reason that the author is asserting some type of choice on my behalf.<p>My only question is why?",
      "time": 1654965207,
      "title": "Ask HN: Why do you prefer non-wrapping lines in code examples?",
      "type": "story"
    },
    {
      "by": "rckrd",
      "descendants": 0,
      "id": 31705759,
      "score": 1,
      "time": 1654965160,
      "title": "Taking on Good Technical Debt",
      "type": "story",
      "url": "https://matt-rickard.com/good-technical-debt/"
    }
  ]
}
{
  "stories": [
    {
      "by": "serverlessmom",
      "descendants": 0,
      "id": 32182717,
      "score": 1,
      "time": 1658426964,
      "title": "How Long It Would Take a Hacker to Brute Force Your Password in 2022, Ranked",
      "type": "story",
      "url": "https://digg.com/technology/link/how-long-it-takes-to-get-password-hacked-1IvDFspF6p"
    },
    {
      "by": "woldemariam",
      "descendants": 1,
      "id": 32182699,
      "kids": [
        32182715
      ],
      "score": 1,
      "time": 1658426882,
      "title": "Heat pumps are efficient and eco-friendly. So why are they so rarely used?",
      "type": "story",
      "url": "https://www.washingtonpost.com/technology/2022/07/21/europe-heat-wave-heat-pump/"
    },
    {
      "by": "2517AD",
      "descendants": 0,
      "id": 32182684,
      "score": 1,
      "time": 1658426801,
      "title": "The Birth of Random-Access Memory",
      "type": "story",
      "url": "https://spectrum.ieee.org/the-birth-of-ram"
    },
    {
      "by": "dirslashls",
      "descendants": 0,
      "id": 32182674,
      "score": 1,
      "text": "I have a product called SQL Frames that provides in-browser analytics. I was exploring how to integrate this into JAMSTACK. I learned about how to create docusaurus plugin and React components to make it easy to integrate SQL Frames. For example, after installing docusaurus, all it takes is &quot;npm install @sqlframes&#x2F;docusaurus-plugin@latest @sqlframes&#x2F;docusaurus-components@latest&quot; (extra configuration to specify a license key if desired) jamstackanalytics.com is just a preview website to show what kind of analytics UX is possible with JAMSTACK and in-browser analytics. The primary target for this technology is internal teams that need analytics and rapid data exploration capabilities and iterate fast without waiting for changes to data models in the backend. Docusaurus is one JAMSTACK candidate but I want to explore others as well. Looking for feedback on the idea, UX at the preview site and what other JAMSTACK are good choices to expand on.",
      "time": 1658426748,
      "title": "Show HN: In-browser analytics within JAMSTACK",
      "type": "story",
      "url": "https://jamstackanalytics.com/"
    },
    {
      "by": "bananapear",
      "descendants": 0,
      "id": 32182671,
      "score": 1,
      "time": 1658426737,
      "title": "Line search before you dig",
      "type": "story",
      "url": "https://lsbud.co.uk/"
    },
    {
      "by": "FeaturelessBug",
      "descendants": 0,
      "id": 32182667,
      "score": 1,
      "time": 1658426704,
      "title": "Minecraft studio wants nothing to do with NFTs",
      "type": "story",
      "url": "https://www.engadget.com/minecraft-nfts-blockchain-mojang-microsoft-204311069.html"
    },
    {
      "by": "epberry",
      "descendants": 0,
      "id": 32182660,
      "score": 1,
      "time": 1658426656,
      "title": "Google: Nearly all Binary Searches and Mergesorts are Broken (2006)",
      "type": "story",
      "url": "https://ai.googleblog.com/2006/06/extra-extra-read-all-about-it-nearly.html"
    },
    {
      "by": "clairegiordano",
      "descendants": 0,
      "id": 32182654,
      "score": 1,
      "time": 1658426612,
      "title": "Monitor distributed Postgres activity with citus_stat_activity",
      "type": "story",
      "url": "https://www.citusdata.com/blog/2022/07/21/citus-stat-activity-views-for-distributed-postgres/"
    },
    {
      "by": "MuchoMaas",
      "descendants": 1,
      "id": 32182648,
      "kids": [
        32182712
      ],
      "score": 2,
      "time": 1658426575,
      "title": "On Scapegoating the Unvaccinated: Analysis of Propaganda During the Pandemic",
      "type": "story",
      "url": "https://www.criticalsocietystudies.com/Journal/Article/59/15"
    },
    {
      "by": "sruffatti",
      "descendants": 0,
      "id": 32182638,
      "score": 1,
      "text": "We are moving off our legacy monolithic architecture to a microservice based architecture. We are about four years into the project and we have 200 distinct microservices.<p>When we first started out on this endeavor we created a parent POM called common-service. This POM declares dependencies such as Hibernate, Spring Boot, and some homegrown common libraries (the most important being a JAR that handles service discovery, rather than each service having to implement service discovery on their own).<p>Now that we have 200 services running in production, it is a difficult to roll out new versions of common-service for a variety of reasons - some teams don&#x27;t have the capacity, some teams prioritize business requirements over upgrades, etc.<p>How do you handle this in your organization? Do you have shared code across your microservices? Is it an anti-pattern to share code across microservices?<p>PS: We are going to start implementing Kubernetes. Kubernetes will require many changes to our common-service codebase so I figured I would see if anyone had any good ideas out there.<p>Thank you.",
      "time": 1658426527,
      "title": "Ask HN: How do you manage shared code across microservices?",
      "type": "story"
    }
  ]
}
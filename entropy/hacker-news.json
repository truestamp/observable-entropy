{
  "stories": [
    {
      "by": "nigerian1981",
      "descendants": 0,
      "id": 31237876,
      "score": 1,
      "time": 1651511380,
      "title": "Yuga Labs apologises after sale of virtual land crashes Ethereum",
      "type": "story",
      "url": "https://www.theguardian.com/technology/2022/may/02/yuga-labs-apologises-after-sale-of-virtual-land-crashes-ethereum"
    },
    {
      "by": "aero-glide2",
      "descendants": 1,
      "id": 31237847,
      "kids": [
        31237862
      ],
      "score": 2,
      "time": 1651511236,
      "title": "Ask HN: How to Become a 100x Engineer?",
      "type": "story"
    },
    {
      "by": "joshstr",
      "descendants": 0,
      "id": 31237822,
      "score": 8,
      "time": 1651511107,
      "title": "Why People Should Never Ever Use DuckDuckGo (2020)",
      "type": "story",
      "url": "http://techrights.org/2020/07/02/ddg-privacy-abuser-in-disguise/"
    },
    {
      "by": "srathi",
      "descendants": 0,
      "id": 31237811,
      "score": 1,
      "text": "Go-scrub is a utility to mask a given set of field names from a deeply nested struct at any level. It is useful for logging structs which may have customer inputs (such as passwords, keys, etc.). It uses the &quot;reflect&quot; package to modify the struct values at runtime.<p>Code: <a href=\"https:&#x2F;&#x2F;github.com&#x2F;ssrathi&#x2F;go-scrub\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;ssrathi&#x2F;go-scrub</a><p>Blog post with an explanation: <a href=\"https:&#x2F;&#x2F;www.nutanix.dev&#x2F;2022&#x2F;04&#x2F;22&#x2F;golang-the-art-of-reflection&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;www.nutanix.dev&#x2F;2022&#x2F;04&#x2F;22&#x2F;golang-the-art-of-reflect...</a>",
      "time": 1651511059,
      "title": "Show HN: Go-scrub: Scrubbing sensitive fields from a deeply nested Go struct",
      "type": "story",
      "url": "https://github.com/ssrathi/go-scrub"
    },
    {
      "by": "yial",
      "descendants": 0,
      "id": 31237810,
      "score": 2,
      "time": 1651511056,
      "title": "Barnacle-covered dolls wash up on US beaches",
      "type": "story",
      "url": "https://www.kxan.com/news/texas/barnacle-covered-dolls-wash-up-on-texas-shore/"
    },
    {
      "by": "Tomte",
      "descendants": 0,
      "id": 31237792,
      "score": 2,
      "time": 1651511016,
      "title": "The Mighty Hercules, slayer of hurricanes (2016)",
      "type": "story",
      "url": "https://arstechnica.com/science/2016/06/into-the-storm-ars-visits-the-big-bird-that-punches-through-the-eyewall/"
    },
    {
      "by": "cdahmedeh",
      "descendants": 0,
      "id": 31237791,
      "score": 1,
      "text": "Back in 2013 when I was still in University where I still have some polyvalent skills. A bunch of friends of mine joined to make a vision come true. The FreeBASE – a video game console that would play free games found online such as freeware, open-source and abandonware. It also would support documentaries, movies, shows and music that were available at no cost. The UI would be slick, hands-free and get a game running within a button press.<p>Each one in the team was assigned a role in the group. We started gnawing away at our plan which was in the works for a long time, i.e. much planning. Soon enough we got quite far.<p>- We built a prototype machine from off-the-shelf parts that cost us 300$ CAD. It ran basically everything we threw at it at high resolution and framerate.<p>- A Linux distro was based that was a heavily optimized version of Gentoo. We managed to get a bootup time of 5 seconds on a regular 7200 rpm hard drive. Things were responsive and applications launched instantly.<p>- A command line version of the UI that would communicate with a backend. It got the list of games from the repo and hosted the files to be downloaded. A 10-foot frontend would be developed. Based on our prototypes, we were way ahead of our time compared to Xbox Live and PlayStation XMB. In fact, it looked somewhat similar to what the current generation of console had.<p>- We designed a (crappy) container format similar to today’s Docker Containers and AppImage.<p>- Many games could be run from multiple platform could be run through Wine, Emulation and more. Each game would have it’s runtime dependencies packaged.<p>- One of our team mates was very familiar with the indie gaming scene and prepared an inventory of thousands of games. We counted over 100 media sources.<p>However, we started to hit imaginary and emotional walls, slowing down the project until it was cancelled a year later.<p>- We didn’t do any market research and probably hardly anyone would want to play shoddy free games. If someone wants to play, they would pirate a AAA game. We didn’t know if there was a niche.<p>- We considered dropping the hardware part only to make a Linux distro out of it. However, must hardcore Linux gamers knew how to run the software for themselves.<p>- Things like Wine Bottles and Lutris were already packaging software that just worked including Windows titles and even commercial products.<p>- The birth of Steam OS, which seemed like was a better version of what we had. It supported free games and commercial ones. It was backed by the mighty Valve. We never looked into it to determine if it would fail. Most of the boxes were modified to eventually run Windows and they didn’t have their Windows compatibility layer Proton. We failed to predict that it failed.<p>- The OUYA scared us quite a bit because of it’s incredibly successful Kickstarter campaign. It was much cheaper than anything we could offer and had some sort of free to play games model. The excitement by the online world was intimidating and though we would be shadowed by them. Some insiders we know predicted that it would fail but we ignored them at the time.<p>- Our console would be more expensive than anything the big three churned out. They could afford to sell their machine at half the price and recoup the loss with licensing fees. We didn’t have anything like that and the only money we’d make would be the hardware; in other words not very profitable. With the available hardware at the time, the machine would be at the very least 400$. In fact today, it’s even worse because Microsoft has a very cheap gaming service Xbox Game Pass.<p>Now, in 2022, my original team met at a coffee shop and we discussed the project. We considered dropping parts of the project but there is still fear for some reason. We agreed that we had a really good value proposition but at this point in our lives, we couldn’t afford to take risks.<p>What do you think about this?",
      "time": 1651511012,
      "title": "Ask HN: We got afraid of our own shadow – The FreeBASE (2013)",
      "type": "story"
    },
    {
      "by": "maxkir",
      "descendants": 0,
      "id": 31237790,
      "score": 2,
      "time": 1651511006,
      "title": "New TeamCity release offers automated test parallelization for Gradle/Maven/.NET",
      "type": "story",
      "url": "https://blog.jetbrains.com/teamcity/2022/04/teamcity-2022-04-parallel-tests-improved-integration-with-amazon-aws-built-in-code-quality-analysis-updated-vcs-integrations-and-more/"
    },
    {
      "by": "Tomte",
      "descendants": 0,
      "id": 31237789,
      "score": 1,
      "time": 1651510999,
      "title": "Map Projections – A Working Manual (1987) [pdf]",
      "type": "story",
      "url": "https://pubs.usgs.gov/pp/1395/report.pdf"
    },
    {
      "by": "heshiebee",
      "descendants": 0,
      "id": 31237787,
      "score": 1,
      "time": 1651510995,
      "title": "Virtual Care – Capable raises $6M to democratize digital health infrastructure",
      "type": "story"
    }
  ]
}
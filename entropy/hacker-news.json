{
  "stories": [
    {
      "by": "eecc",
      "descendants": 0,
      "id": 28168794,
      "score": 1,
      "time": 1628862561,
      "title": "Gino Strada has died",
      "type": "story",
      "url": "https://www.ansa.it/english/news/general_news/2021/08/13/gino-strada-has-died-7_3c9669e3-6774-43e3-98dd-824a17231cba.html"
    },
    {
      "by": "willmadden",
      "descendants": 1,
      "id": 28168789,
      "kids": [
        28168790
      ],
      "score": 1,
      "time": 1628862549,
      "title": "ADE Detected in the Vaccinated (Preprint)",
      "type": "story",
      "url": "https://pubmed.ncbi.nlm.nih.gov/34384810/"
    },
    {
      "by": "lolski",
      "descendants": 0,
      "id": 28168783,
      "score": 1,
      "time": 1628862528,
      "title": "TypeDB Client for Julia",
      "type": "story",
      "url": "https://github.com/Humans-of-Julia/TypeDBClient.jl"
    },
    {
      "by": "valenterry",
      "descendants": 0,
      "id": 28168780,
      "score": 1,
      "text": "Say I have an SQL database and I want to query it from a frontend&#x2F;app. But I need to assume a malicious actor, so I need fine granular control over what is queried and I want to check if the query is valid for whoever submits it. Are there any good solutions that are less powerful than just having pure SQL (which is super hard to check) but more powerful than, say, graphql?<p>Something like cube.js (cube.dev) seems to come close, but I wonder what other options are there",
      "time": 1628862517,
      "title": "How to flexibly query back end (e.g. SQL) from front end?",
      "type": "story"
    },
    {
      "by": "cjbest",
      "descendants": 0,
      "id": 28168777,
      "score": 1,
      "time": 1628862515,
      "title": "The case against crisis-mongering",
      "type": "story",
      "url": "https://www.slowboring.com/p/fake-crisis?r=2&utm_campaign=post&utm_medium=web&utm_source=hackernews"
    },
    {
      "by": "progapandist",
      "descendants": 0,
      "id": 28168775,
      "score": 1,
      "time": 1628862506,
      "title": "Decoding AVIF: Deep dive with cats and imgproxy",
      "type": "story",
      "url": "https://evilmartians.com/chronicles/decoding-avif-deep-dive-with-cats-and-imgproxy"
    },
    {
      "by": "simonpure",
      "descendants": 0,
      "id": 28168718,
      "score": 1,
      "time": 1628862170,
      "title": "Mining in Logarithmic Space",
      "type": "story",
      "url": "https://iohk.io/en/research/library/papers/mining-in-logarithmic-space/"
    },
    {
      "by": "least",
      "descendants": 0,
      "id": 28168695,
      "score": 1,
      "time": 1628862035,
      "title": "Apple Executive Defends Tools to Fight Child Porn, Acknowledges Privacy Backlash",
      "type": "story",
      "url": "https://www.wsj.com/articles/apple-executive-defends-tools-to-fight-child-porn-acknowledges-privacy-backlash-11628859600"
    },
    {
      "by": "criticaltinker",
      "descendants": 1,
      "id": 28168689,
      "kids": [
        28168717
      ],
      "score": 1,
      "time": 1628861995,
      "title": "Neutralizing antibodies derived from B cells of 1918 flu pandemic survivors",
      "type": "story",
      "url": "https://pubmed.ncbi.nlm.nih.gov/18716625/"
    },
    {
      "by": "whack",
      "descendants": 0,
      "id": 28168638,
      "score": 1,
      "time": 1628861688,
      "title": "Congress v. Popular Vote",
      "type": "story",
      "url": "https://outlookzen.com/2021/08/13/congress-v-popular-vote/"
    }
  ]
}
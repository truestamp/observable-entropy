{
  "stories": [
    {
      "by": "geox",
      "descendants": 0,
      "id": 28004647,
      "score": 1,
      "time": 1627621325,
      "title": "Collisions of light produce matter/antimatter from pure energy",
      "type": "story",
      "url": "https://phys.org/news/2021-07-collisions-matterantimatter-pure-energy.html"
    },
    {
      "by": "b123",
      "descendants": 0,
      "id": 28004602,
      "score": 1,
      "time": 1627620772,
      "title": "Show HN: I built a minimal, topic based group chat for distributed team",
      "type": "story",
      "url": "https://hyze.io"
    },
    {
      "by": "aaronbrethorst",
      "descendants": 0,
      "id": 28004566,
      "score": 1,
      "time": 1627620462,
      "title": "CDC Internal Report Calls Delta Variant as Contagious as Chickenpox",
      "type": "story",
      "url": "https://www.nytimes.com/2021/07/30/health/covid-cdc-delta-masks.html"
    },
    {
      "by": "your_challenger",
      "descendants": 0,
      "id": 28004552,
      "score": 1,
      "text": "You can read the markdown version [here](https:&#x2F;&#x2F;github.com&#x2F;brainless&#x2F;gitplay&#x2F;issues&#x2F;5)<p>## Problem statement<p>We all have worked on a feature intensively and had to refractor a lot of the code base (in early projects). But can&#x27;t spend the mental expense to context switch from `writing code` to `make meaningful commit messages`.<p>A good commit history is at the expense of the developer, which results in breaking the &quot;flow&quot;. As pg mentioned in his blog post [Holding a program in one&#x27;s head][1], it be better to work in long stretches to have better developer productivity. And it is very common for devs to have to make code cleanups which are unrelated to the feature they are working on ([example tweet][2])<p>* Commit small and commit often<p>* Writing good git commit messages goes a long way<p>* get gud at git<p>## Scenario<p>Lets say you are building a feature and mid way you came across a variable name that could be fixed. Or a piece of code that is no longer needed. But you don&#x27;t want to include this unrelated changes in your working commit. So for good practice you need to create a new commit for those changes.<p>## Current solution<p>1. git-worktree<p>We can currently use [git-worktree](https:&#x2F;&#x2F;git-scm.com&#x2F;docs&#x2F;git-worktree) to create a parellel repo in your local directory and make the changes in that, push a commit, pull the changes in the feature working tree and continue. *This is long and hard*<p>2. stash and make changes<p>Make a stash of the current feature changes and then make the required changes, commit and pop the stash. *So bad my eyes are bleeding*<p>3. Make the changes in the current working tree and use `git add -p` to make patches when creating a commit<p>This is what works the best. But the flaw of this approach is that it looses the essense of story-telling, You may make changes that don&#x27;t show a history, instead shows a bunch of unrelated changes on top of each other.<p>## The solution<p>If we could `patch` changes into `commit groups` and then finally commit those changes when all the related changes are ready, it will let the developer write code in a long stretch [1] and also build a story for the commit history.<p>### Why commit groups?<p>We can currently create patches. But using this new feature we can add patches into groups as we read the code to make patches. We will have *more than one stages files* &quot;area&quot;.<p>[1]: http:&#x2F;&#x2F;www.paulgraham.com&#x2F;head.html\n[2]: https:&#x2F;&#x2F;twitter.com&#x2F;awesomekling&#x2F;status&#x2F;1390950309669781505?s=20",
      "time": 1627620330,
      "title": "Group changes into commits and rebase to build a better Git history",
      "type": "story"
    },
    {
      "by": "nikeamoeba43",
      "descendants": 0,
      "id": 28004518,
      "score": 1,
      "time": 1627619987,
      "title": "Clean Code Practices for Every Software Project",
      "type": "story",
      "url": "https://betterprogramming.pub/5-clean-code-practices-for-every-software-project-479443b31c3c"
    },
    {
      "by": "jonifico",
      "descendants": 0,
      "id": 28004515,
      "score": 3,
      "time": 1627619942,
      "title": "Beautiful MIT-Licensed Tailwind CSS Components",
      "type": "story",
      "url": "https://daisyui.com/"
    },
    {
      "by": "atg_abhishek",
      "descendants": 1,
      "id": 28004504,
      "kids": [
        28004563
      ],
      "score": 1,
      "time": 1627619847,
      "title": "What Are the Pitfalls of Investing in Cryptocurrency?",
      "type": "story",
      "url": "https://themarkup.org/ask-the-markup/2021/07/28/what-are-the-pitfalls-of-investing-in-cryptocurrency"
    },
    {
      "by": "atg_abhishek",
      "descendants": 0,
      "id": 28004499,
      "score": 1,
      "time": 1627619809,
      "title": "Email Classification",
      "type": "story",
      "url": "https://slack.engineering/email-classification/"
    },
    {
      "by": "Cas9",
      "descendants": 1,
      "id": 28004454,
      "kids": [
        28004455
      ],
      "score": 1,
      "time": 1627619415,
      "title": "“Why Should I Trust You?”: Explaining the Predictions of Any Classifier",
      "type": "story",
      "url": "https://arxiv.org/abs/1602.04938"
    },
    {
      "by": "andyxor",
      "descendants": 0,
      "id": 28004418,
      "score": 2,
      "time": 1627618984,
      "title": "Not Morgan Freeman – A Deepfake Singularity",
      "type": "story",
      "url": "https://www.youtube.com/watch?v=oxXpB9pSETo&ab_channel=DiepNep"
    }
  ]
}
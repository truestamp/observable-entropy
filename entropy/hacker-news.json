{
  "stories": [
    {
      "by": "elsewhen",
      "descendants": 0,
      "id": 27901633,
      "score": 1,
      "time": 1626833928,
      "title": "Meet China’s New Gaming Underclass",
      "type": "story",
      "url": "https://www.protocol.com/china/chinas-gaming-underclass-peiwan"
    },
    {
      "by": "holidaygoose",
      "descendants": 0,
      "id": 27901631,
      "score": 1,
      "time": 1626833917,
      "title": "1986's Super Mario Bros. Movie Is Being Painstakingly Restored, Now in 4K",
      "type": "story",
      "url": "https://kotaku.com/1986s-super-mario-bros-movie-is-being-painstakingly-re-1847332770"
    },
    {
      "by": "pabs3",
      "descendants": 0,
      "id": 27901625,
      "score": 1,
      "time": 1626833851,
      "title": "Notfallwarnung Im Mobilfunknetz and Cell Broadcast",
      "type": "story",
      "url": "https://laforge.gnumonks.org/blog/20210719-smscb/"
    },
    {
      "by": "cs702",
      "descendants": 0,
      "id": 27901624,
      "score": 1,
      "text": "If we try this with PyTorch:<p><pre><code>  import torch\n  x = torch.randn(4000, 4000, device=&#x27;cuda:0&#x27;)\n  y = torch.randn(4000, 4000, device=&#x27;cuda:0&#x27;)\n  z = torch.einsum(&#x27;ij,jk-&gt;ijk&#x27;, x, y).relu().sum(dim=1)\n</code></pre>\nwe will likely run out of memory, because the tensor product of x and y consists of 4000 x 4000 x 4000 = 64 billion floating-point values, and we must evaluate the relu() function on each of them before summing them over index j (dim 1).<p>And we can&#x27;t solve this problem with a nice for-loop that iterates over 64 billion elements in Python -- it would be waaaaay too slow. Python and PyTorch force us to drop down to a fast, low-level, compiled language.<p>The same is true for TensorFlow and other similar &quot;vectorized&quot; frameworks. Our choices are to store 64 billion floating-point values simultaneously in memory, or drop down to a low-level language. No fun.<p>But solving this in Julia is trivial: We just write the loops.",
      "time": 1626833849,
      "title": "A simple problem for which Julia is a better choice than Python",
      "type": "story"
    },
    {
      "by": "lnyan",
      "descendants": 0,
      "id": 27901607,
      "score": 2,
      "time": 1626833773,
      "title": "WikiGraphs: A Wikipedia Text – Knowledge Graph Paired Dataset",
      "type": "story",
      "url": "https://arxiv.org/abs/2107.09556"
    },
    {
      "by": "riespandi",
      "descendants": 0,
      "id": 27901586,
      "score": 1,
      "time": 1626833554,
      "title": "Twitter rolling out preview of all-new TweetDeck app",
      "type": "story",
      "url": "https://9to5mac.com/2021/07/20/twitter-rolling-out-preview-of-all-new-tweetdeck-app/"
    },
    {
      "by": "sharjeelsayed",
      "descendants": 0,
      "id": 27901570,
      "score": 1,
      "time": 1626833456,
      "title": "Excerpt from the Long Game: China’s Grand Strategy to Displace American Order",
      "type": "story",
      "url": "https://sinocism.com/p/excerpt-from-the-long-game-chinas"
    },
    {
      "by": "chadcmulligan",
      "descendants": 0,
      "id": 27901536,
      "score": 1,
      "time": 1626833184,
      "title": "New Delphi and C++Builder Community Editions 10.4 Available",
      "type": "story",
      "url": "https://blogs.embarcadero.com/new-delphi-and-cbuilder-community-editions-10-4-available/"
    },
    {
      "by": "walterbell",
      "descendants": 0,
      "id": 27901527,
      "score": 1,
      "time": 1626833089,
      "title": "Garcia Exploration 52 test: The sailing equivalent of a 4x4 off-roader (2019)",
      "type": "story",
      "url": "https://www.yachtingworld.com/reviews/boat-tests/garcia-exploration-52-jimmy-cornell"
    },
    {
      "by": "bwidlar",
      "descendants": 0,
      "id": 27901503,
      "score": 1,
      "time": 1626832928,
      "title": "Writing C code in Java/Clojure: GraalVM specific programming",
      "type": "story",
      "url": "https://yyhh.org/blog/2021/02/writing-c-code-in-javaclojure-graalvm-specific-programming/"
    }
  ]
}
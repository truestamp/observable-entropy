{
  "stories": [
    {
      "by": "tartoran",
      "descendants": 0,
      "id": 30983723,
      "score": 1,
      "time": 1649642345,
      "title": "Modern Abandoned Mall with Terrifying Sears",
      "type": "story",
      "url": "https://www.youtube.com/watch?v=QuveHs1QLjc"
    },
    {
      "by": "rntn",
      "descendants": 0,
      "id": 30983717,
      "score": 1,
      "time": 1649642298,
      "title": "USA and EU are responsible for majority of raw materials use ecological damage",
      "type": "story",
      "url": "https://phys.org/news/2022-04-usa-eu-responsible-majority-ecological.html"
    },
    {
      "by": "BadCookie",
      "descendants": 0,
      "id": 30983714,
      "score": 1,
      "time": 1649642274,
      "title": "Van life (cancer edition) finale",
      "type": "story",
      "url": "https://imgur.com/gallery/prUy1Kt"
    },
    {
      "by": "madiator",
      "descendants": 0,
      "id": 30983707,
      "score": 1,
      "time": 1649642166,
      "title": "On the Convexities of Everyday Life",
      "type": "story",
      "url": "https://newsletter.smarter.blog/p/on-the-convexities-of-everyday-life"
    },
    {
      "by": "rntn",
      "descendants": 0,
      "id": 30983704,
      "score": 1,
      "time": 1649642149,
      "title": "Microplastics found in lung tissue from live human beings for the first time",
      "type": "story",
      "url": "https://phys.org/news/2022-04-microplastics-lung-tissue-human.html"
    },
    {
      "by": "temp8964",
      "descendants": 0,
      "id": 30983685,
      "score": 1,
      "time": 1649642021,
      "title": "Plex new feature recommends porn to users",
      "type": "story",
      "url": "https://forums.plex.tv/t/adult-recommendations-are-not-acceptable-nsfw/787577"
    },
    {
      "by": "totallyabstract",
      "descendants": 1,
      "id": 30983676,
      "kids": [
        30983693
      ],
      "score": 1,
      "text": "Link to the feature request, there are some humorous comments nestled amongst the +1s: https:&#x2F;&#x2F;jira.atlassian.com&#x2F;browse&#x2F;BCLOUD-12503<p>A similar feature request for a “needs work” status that took 5 years to close: https:&#x2F;&#x2F;jira.atlassian.com&#x2F;browse&#x2F;BCLOUD-13021<p>As a developer I am so surprised how long it’s taking Atlassian to add basic features to their products. I struggle to understand how these products can be so much slower to develop and deficient in features compared to the on-prem products from years ago.<p>Do any ex Atlassian developers (that are not under NDA) have any insight into this?",
      "time": 1649641935,
      "title": "Six years on Atlassian still can’t add basic features to Bitbucket",
      "type": "story"
    },
    {
      "by": "catvsdog",
      "descendants": 1,
      "id": 30983650,
      "kids": [
        30983683
      ],
      "score": 2,
      "text": "Being a Groupme admin of a .. group. I had trouble even maintaining the discussion topic related to the group&#x27;s purpose. I can only imagine how hard it might be doing here, are there tips to maintaining good online communities? How does HN do it this well?",
      "time": 1649641647,
      "title": "Ask HN: How does Hacker News moderation work?",
      "type": "story"
    },
    {
      "by": "eigenvalue",
      "descendants": 1,
      "id": 30983635,
      "kids": [
        30983666
      ],
      "score": 1,
      "text": "Keyloggers are a particularly scary form of infiltration, because over a long enough period they can accumulate a critically damaging amount of secret stuff (passwords, messages, etc.) without the user having any clue it&#x27;s happening.<p>Other than your everyday well-known antivirus techniques (e.g., looking at signatures of executables and comparing to a known list of viruses), are there any super reliable ways using low-level kernel operations to see any running executable&#x2F;service that is accessing keyboard events?<p>Even if it&#x27;s a big list, if you could eliminate most of the processes because they are known applications (say, by crowdsourcing a list of known safe processes), you could come up with a subset of them and decide for yourself if any look suspicious.<p>The best approach should be able to detect and stop even a custom tailored attack on a high value target, where none of the code is reused from known exploits, and every trick in the book is used to obfuscate and evade automated detection. I feel like an open source package like this that had been inspected by a lot of smart people and vetted to work reliably under Windows&#x2F;Mac&#x2F;Linux would be a huge benefit to global security.",
      "time": 1649641503,
      "title": "Ask HN: Latest best practices to detect keyloggers on Windows/Mac/Linux?",
      "type": "story"
    },
    {
      "by": "xcodebuild",
      "descendants": 0,
      "id": 30983630,
      "score": 1,
      "time": 1649641441,
      "title": "Show HN: Standalone terminal app from Visual Studio Code",
      "type": "story",
      "url": "https://github.com/xcodebuild/CodeTerminal"
    }
  ]
}
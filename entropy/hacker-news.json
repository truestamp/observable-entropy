{
  "stories": [
    {
      "by": "kehers",
      "descendants": 0,
      "id": 28740481,
      "score": 1,
      "time": 1633294954,
      "title": "Recover abandoned Checkout pages and boost revenue",
      "type": "story",
      "url": "https://stripe.com/docs/payments/checkout/abandoned-carts"
    },
    {
      "by": "areoform",
      "descendants": 0,
      "id": 28740480,
      "score": 1,
      "time": 1633294949,
      "title": "Tony Bennett's musical memory triumphs over Alzheimer's",
      "type": "story",
      "url": "https://www.cbsnews.com/news/tony-bennett-alzheimers-lady-gaga-60-minutes-2021-10-01/"
    },
    {
      "by": "edward",
      "descendants": 0,
      "id": 28740452,
      "score": 1,
      "time": 1633294765,
      "title": "E-Ink Magic Calendar that runs off a battery powered Raspberry Pi",
      "type": "story",
      "url": "https://github.com/speedyg0nz/MagInkCal"
    },
    {
      "by": "dsr12",
      "descendants": 0,
      "id": 28740427,
      "score": 1,
      "time": 1633294528,
      "title": "Create a Calendar of Your Life",
      "type": "story",
      "url": "https://www.timeofyourlife.io/"
    },
    {
      "by": "misterbrian",
      "descendants": 0,
      "id": 28740415,
      "score": 1,
      "time": 1633294410,
      "title": "How I write and share technical software development articles in 2021 w/Nuxt.js",
      "type": "story",
      "url": "https://briancaffey.github.io/2021/10/02/how-i-write-and-share-technical-software-development-articles-in-2021/"
    },
    {
      "by": "infodocket",
      "descendants": 0,
      "id": 28740406,
      "score": 1,
      "time": 1633294326,
      "title": "Supply Chain and Network Security for Military 5G Networks [pdf]",
      "type": "story",
      "url": "https://ccdcoe.org/uploads/2021/10/Report_Supply_Chain_and_Network_Security_for_Military_5G_Networks.pdf"
    },
    {
      "by": "tomas789",
      "descendants": 0,
      "id": 28740402,
      "score": 3,
      "text": "We have a large codebase of a mostly functional code. Most of the code looks roughly like this<p><pre><code>  def CalculateX(entity1: Type1, entity2: Type2):\n    when:\n    | entity1 is big -&gt; 5\n    | entity1 is not big -&gt; 6\n    | entity2 is round and entity1 purple -&gt; 5\n</code></pre>\nThe conditions in the pattern matching block can get quite complex. The function might be defined for all instances if Type1 and Type2 but that is not required. Reasoning about a single function is reasonably easy. But we often find a bug where a function should be defined for all combinations of its input parameters but it is calling a function which is not defined for a requested case.<p>We do all kinds of things to ensure it is reasonably correct but it seems like it is never enough. We are toying around with an idea of formal verification of our code. I don&#x27;t know from which angle to attack this issue first. I was playing with Z3 and Coq but they are like a distinct system. What is a typical workflow of how to verify a program? Do we have to rewrite it first in a formal verification system or is it possible to use some sort of source-to-source translation? Is there a way to make sure this translation is correct? How do I find a system that will be up for the task? How do I know it is computationally tractable?",
      "time": 1633294266,
      "title": "Ask HN: How to start with formal verification to find bugs",
      "type": "story"
    },
    {
      "by": "zdw",
      "descendants": 0,
      "id": 28740395,
      "score": 2,
      "time": 1633294212,
      "title": "Apple II Audio and the Mockingboard",
      "type": "story",
      "url": "https://nicole.express/2021/stop-mocking-me.html"
    },
    {
      "by": "Brrakingchains",
      "descendants": 0,
      "id": 28740387,
      "score": 2,
      "time": 1633294122,
      "title": "Help me Escaping from mom who wants me dead",
      "type": "story",
      "url": "https://social.fund/eqooox/"
    },
    {
      "by": "edward",
      "descendants": 0,
      "id": 28740386,
      "score": 1,
      "time": 1633294116,
      "title": "Superhero passwords may be your kryptonite wherever you go online",
      "type": "story",
      "url": "https://blog.mozilla.org/en/mozilla/news/superhero-passwords-may-be-your-kryptonite-wherever-you-go-online/"
    }
  ]
}
{
  "stories": [
    {
      "by": "_448",
      "descendants": 0,
      "id": 29870451,
      "score": 1,
      "text": "I am trying to develop a simple web and mobile native app as a learning exercise. To support both web and native mobile app I am thinking of this broad backend architecture:<p><pre><code>    DB &lt;--&gt; common internal api &lt;-----&gt; web request&#x2F;response handler &lt;---&gt; web client\n                             ^\n                             |\n                             +--------&gt; REST API &lt;----&gt; native mobile app\n\n</code></pre>\nMy questions are:<p>0. Is this design to support both web clients and native mobile apps okay? Is there a better approach? I am trying to develop simple old-fashioned GET&#x2F;POST and server-side rendered web app(i.e. not an SPA), but also want to support native mobile app.<p>1. When the browser sends a request to the backend, or receives a response from the backend, some of the important communication aspects such as TLS, cookie management, form data packing etc is handled by the browser on the client-side. How is this achieved on a native mobile app? Are there native libraries that handle this on behalf of the app? I do not want to use webview to wrap the web client on mobile devices.",
      "time": 1641787185,
      "title": "Ask HN: How to support both web and native mobile client?",
      "type": "story"
    },
    {
      "by": "daseong",
      "descendants": 0,
      "id": 29870445,
      "score": 1,
      "time": 1641787137,
      "title": "Through the eyes of a VC â€“ A naive approach",
      "type": "story",
      "url": "https://curiouseyes.substack.com/p/through-the-eyes-of-a-vc"
    },
    {
      "by": "Naac",
      "descendants": 0,
      "id": 29870440,
      "score": 1,
      "time": 1641787106,
      "title": "A Complete Guide to Tagging for Personal Knowledge Management",
      "type": "story",
      "url": "https://fortelabs.co/blog/a-complete-guide-to-tagging-for-personal-knowledge-management/"
    },
    {
      "by": "zrkrlc",
      "descendants": 0,
      "id": 29870437,
      "score": 1,
      "time": 1641787098,
      "title": "Chemical Computing with Clojure",
      "type": "story",
      "url": "https://gigasquidsoftware.com/chemical-computing/index.html"
    },
    {
      "by": "masaav",
      "descendants": 1,
      "id": 29870406,
      "kids": [
        29870407
      ],
      "score": 1,
      "time": 1641786822,
      "title": "Made a simple site to save/display my favorite websites",
      "type": "story",
      "url": "http://www.hypergeni.us/"
    },
    {
      "by": "elsewhen",
      "descendants": 0,
      "id": 29870400,
      "score": 1,
      "time": 1641786748,
      "title": "Matter, the soon-to-be smart home standard gained momentum at CES",
      "type": "story",
      "url": "https://www.theverge.com/2022/1/8/22872311/matter-smart-home-ces-2022"
    },
    {
      "by": "tomasreimers",
      "descendants": 0,
      "id": 29870373,
      "score": 1,
      "time": 1641786540,
      "title": "Evolution of the Alphabet",
      "type": "story",
      "url": "https://twitter.com/Talk_To_The_Hat/status/1480333350644731907"
    },
    {
      "by": "ali_sen",
      "descendants": 2,
      "id": 29870338,
      "kids": [
        29870431,
        29870339
      ],
      "score": 3,
      "time": 1641786206,
      "title": "Turn a Raspberry Pi into a Brain-Computer-Interface to Measure Biosignals",
      "type": "story",
      "url": "https://arxiv.org/abs/2201.02228"
    },
    {
      "by": "markhaslam",
      "descendants": 0,
      "id": 29870321,
      "score": 1,
      "time": 1641786031,
      "title": "State of the Web: Deno",
      "type": "story",
      "url": "https://byteofdev.com/posts/deno/"
    },
    {
      "by": "larryliu",
      "descendants": 0,
      "id": 29870311,
      "score": 1,
      "text": "Examples of serverless computing are Amazon Lambda, Google Cloud Functions and Azure Serverless.<p>Scientific computing are conducted by researchers and engineers. A headache of scientific computing is each full scale iteration before the researcher can view the result takes long CPU hours, making testing and debugging only feasible in smaller surrogate scales.<p>Thus, more and more researchers are using serverless clouds to dynamically summon a high surge of computational power and release them when the full-scale iteration finish running.<p>For computation tasks without sensitive data or code, such as protein folding and public domain data crunching, there is BOINC and Gridcoin to facilitate distributed scientific computing and allow anyone to donate or sell computation power for Gridcoin, but BOINC&#x27;s programming interface is not as easy to use as Amazon and Google&#x27;s. In addition, BOINC requires manual approval of projects, because BOINC agent is not containerized&#x2F;virtualized, computing code could present malware threat to host.<p>I wish to create an alternative to BOINC&#x2F;Gridcoin, using container&#x2F;VM images as computation tasks, and support unmonitored pay-as-you-go serverless computing.<p>I want to know if there is a large enough market for it.<p>Think this way, the world mines 6 bitcoins&#x2F;day (US$42K&#x2F;day, or US$15.3 million&#x2F;year). Do all &quot;embarrassingly parallel&quot; scientific computing projects combined have comparable annual revenue with BTC or a lesser cryptocurrency such as ETH or DOGE?",
      "time": 1641785948,
      "title": "Ask HN: Potential for pay-as-you-go serverless scientific computing?",
      "type": "story"
    }
  ]
}
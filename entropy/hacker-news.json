{
  "stories": [
    {
      "by": "fgarci03",
      "descendants": 1,
      "id": 28352358,
      "kids": [
        28352359
      ],
      "score": 2,
      "time": 1630291370,
      "title": "Show HN: Pylectronics – Reproduce digital electronics in Python",
      "type": "story",
      "url": "https://github.com/fgarci03/pylectronics"
    },
    {
      "by": "pabs3",
      "descendants": 0,
      "id": 28352354,
      "score": 1,
      "time": 1630291239,
      "title": "Beyond the Code Itself: How Programmers Look at Pull Requests",
      "type": "story",
      "url": "https://neverworkintheory.org/2021/08/29/beyond-the-code-itself.html"
    },
    {
      "by": "cobrakailab",
      "descendants": 0,
      "id": 28352300,
      "score": 1,
      "text": "I always strive to write better, clean and readable code. But I often find unit tests are hard to read, and especially harder to quickly identify what are the important pieces, or even what the test is testing about.<p>So I came up with this lightweight library to help enforce unit tests with a Given-When-Then structure. I hope you find this useful. Any feedback are welcome.<p>https:&#x2F;&#x2F;github.com&#x2F;cobrakai-lab&#x2F;Cobrakai.GWTUnit",
      "time": 1630290468,
      "title": "Show HN: A C# library to help you enforce a Given-When-Then structured Unit test",
      "type": "story"
    },
    {
      "by": "csnover",
      "descendants": 0,
      "id": 28352295,
      "score": 1,
      "time": 1630290412,
      "title": "New Orleans Has Been Using the Same Tech to Drain the City Since 1910s (2017)",
      "type": "story",
      "url": "https://www.atlasobscura.com/articles/new-orleans-wood-screw-pumps-history-power-drainage-flooding-infrastructure"
    },
    {
      "by": "Jugurtha",
      "descendants": 0,
      "id": 28352293,
      "score": 1,
      "text": "Some YouTube videos have helpful &quot;timestamps with descriptions&quot; to help navigate the segments of the video, which are called &quot;chapters&quot;.<p>Not all authors go through that effort, though. When a video does not contain &quot;chapters&quot;&#x2F;&quot;timestamps with descriptions&quot;, you can quickly copy the video title, then search for that on Google&#x27;s search engine, and it will likely return an &quot;automatically chaptered&quot; video.<p>Example:<p>This video of Richard Feynman: https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=36GT2zI8lVA does not contain &quot;chapters&quot;.<p>However, this search query, simply copy pasting the title, returns one with &quot;chapters&quot;, labeled as &quot;key moments&quot;:<p>https:&#x2F;&#x2F;www.google.com&#x2F;search?q=Richard+Feynman.+Why.&amp;oq=Richard+Feynman.+Why.",
      "time": 1630290344,
      "title": "Tell HN: Search a YouTube video's title on Google to get chapters",
      "type": "story"
    },
    {
      "by": "wslh",
      "descendants": 2,
      "id": 28352268,
      "kids": [
        28352289,
        28352283,
        28352333
      ],
      "score": 2,
      "time": 1630290018,
      "title": "Exact same comment, exact same article: doing well on Reddit and poorly on HN",
      "type": "story",
      "url": "https://twitter.com/dbasch/status/1426728882544136193"
    },
    {
      "by": "tonteldoos",
      "descendants": 1,
      "id": 28352264,
      "kids": [
        28352335,
        28352343
      ],
      "score": 4,
      "time": 1630289962,
      "title": "'The smartest person in any room, anywhere': In defence of Elon Musk",
      "type": "story",
      "url": "https://www.theguardian.com/technology/2021/aug/29/the-smartest-person-in-any-room-anywhere-in-defence-of-elon-musk-by-douglas-coupland"
    },
    {
      "by": "codetrotter",
      "descendants": 0,
      "id": 28352244,
      "score": 2,
      "time": 1630289672,
      "title": "Spend Management for Startups (2020)",
      "type": "story",
      "url": "https://matthewziskie.substack.com/p/spend-management-for-startups"
    },
    {
      "by": "type0",
      "descendants": 0,
      "id": 28352237,
      "score": 1,
      "time": 1630289580,
      "title": "Tom’s Essay (2008)",
      "type": "story",
      "url": "https://opinionator.blogs.nytimes.com//2008/09/23/toms-essay/"
    },
    {
      "by": "axiomdata316",
      "descendants": 0,
      "id": 28352235,
      "score": 2,
      "time": 1630289525,
      "title": "Salmon Trees",
      "type": "story",
      "url": "https://www.hakaimagazine.com/features/salmon-trees/"
    }
  ]
}
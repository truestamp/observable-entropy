{
  "stories": [
    {
      "by": "goodmind",
      "descendants": 0,
      "id": 28443686,
      "score": 1,
      "time": 1631016523,
      "title": "Hiring Mistakes Startups Can Easily Avoid",
      "type": "story",
      "url": "https://goodmind.io/blog/hiring-mistakes/"
    },
    {
      "by": "mooreds",
      "descendants": 0,
      "id": 28443685,
      "score": 1,
      "time": 1631016521,
      "title": "Computer glitch led to false reports about earthquake in B.C., says seismologist",
      "type": "story",
      "url": "https://www.cbc.ca/news/canada/british-columbia/computer-glitch-led-to-false-reports-about-earthquake-in-b-c-1.6166417?cmp=rss&utm_source=dlvr.it&utm_medium=twitter"
    },
    {
      "by": "mooreds",
      "descendants": 0,
      "id": 28443662,
      "score": 1,
      "time": 1631016401,
      "title": "CoreLogic: House Prices Up 18.0% YoY in July, All-Time High YoY Increase",
      "type": "story",
      "url": "https://www.calculatedriskblog.com/2021/09/corelogic-house-prices-up-180-yoy-in.html"
    },
    {
      "by": "jimgordon",
      "descendants": 0,
      "id": 28443658,
      "score": 1,
      "time": 1631016389,
      "title": "Toyota to spend $13.5 bln to develop electric vehicle battery tech by 2030",
      "type": "story",
      "url": "https://www.reuters.com/business/autos-transportation/toyota-spend-over-135-bln-ev-batteries-by-2030-2021-09-07/"
    },
    {
      "by": "gmaster1440",
      "descendants": 0,
      "id": 28443654,
      "score": 1,
      "time": 1631016366,
      "title": "Node.js Corepack",
      "type": "story",
      "url": "https://nodejs.org/dist/latest-v16.x/docs/api/corepack.html"
    },
    {
      "by": "susam",
      "descendants": 0,
      "id": 28443652,
      "score": 1,
      "time": 1631016364,
      "title": "Microsoft IIS 3.0 “%2e” Asp Source Disclosure Vulnerability (1997)",
      "type": "story",
      "url": "http://web.archive.org/web/20010309183310/http://www.securityfocus.com/bid/1814"
    },
    {
      "by": "politelemon",
      "descendants": 0,
      "id": 28443625,
      "score": 1,
      "time": 1631016108,
      "title": "Fans of a 2013 Japanese soccer game tracked down a bizarre floating point bug",
      "type": "story",
      "url": "https://dolphin-emu.org/blog/2021/09/07/dolphin-progress-report-august-2021/"
    },
    {
      "by": "MrPowers",
      "descendants": 0,
      "id": 28443617,
      "score": 1,
      "time": 1631015999,
      "title": "Flush with billions, Databricks has momentum and big plans",
      "type": "story",
      "url": "https://www.economist.com/business/2021/09/04/flush-with-billions-databricks-has-momentum-and-big-plans"
    },
    {
      "by": "gethigher",
      "descendants": 1,
      "id": 28443610,
      "kids": [
        28443675
      ],
      "score": 2,
      "time": 1631015911,
      "title": "Show HN: Peer to Peer Recruiting?",
      "type": "story",
      "url": "https://gethigher.io/"
    },
    {
      "by": "Choc13",
      "descendants": 0,
      "id": 28443587,
      "kids": [
        28443672
      ],
      "score": 4,
      "text": "We&#x27;re a couple of software engineers who believe that to build great software you need to write good tests, but we also sympathise when engineers say things like:<p>- &quot;Writing tests was too time consuming on my tight schedule&quot;, or<p>- &quot;Unit tests don&#x27;t catch enough bugs, so they&#x27;re useless&quot;, or<p>- &quot;I&#x27;ve inherited a legacy code base without tests and have no idea where to start&quot;<p>To tackle this we&#x27;re building Symbolica (https:&#x2F;&#x2F;www.symbolica.dev), a symbolic code executor [1], that lets you run your code for all possible inputs. This means you can do things like:<p>- Assert properties about your code and check that they hold for every conceivable input.<p>- Check that two implementations of the same function&#x2F;method&#x2F;program are equivalent, which is really useful if you&#x27;re refactoring a legacy codebase without tests.<p>- Find out if your code will hit any undefined behaviours, e.g. divide by zero or out of bounds array access.<p>We&#x27;re still really early in the development of this product, but we&#x27;re excited to have built a working prototype of the symbolic executor for C programs. We wanted to get some feedback from potential early adopters so we&#x27;ve put up a code playground (https:&#x2F;&#x2F;www.symbolica.dev&#x2F;playground) where you can try out Symbolica on C programs in the browser for free. We&#x27;d love people to give it a go and give us their thoughts.<p>Our plan is to build this out into a hosted cloud service that you can integrate into your DevOps pipeline (e.g. GitHub actions) so that you can run these powerful tests on every CI build.<p>Further down the line we plan to add support for other languages too. We&#x27;ve currently got proof of concept implementations for Lisp and Python and will be looking into C++, Rust and .NET after. Of course we&#x27;re always willing to prioritise a particular language if there&#x27;s strong demand.<p>If you&#x27;re interested in what we&#x27;re building then please either message us at dev@symbolica.dev or join the alpha waiting list if you want to get first access to our full offering once we launch that.<p>[1] https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Symbolic\\_execution",
      "time": 1631015738,
      "title": "Show HN: Symbolica – Try our symbolic code executor in the browser",
      "type": "story"
    }
  ]
}
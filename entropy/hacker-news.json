{
  "stories": [
    {
      "by": "andsoitis",
      "descendants": 0,
      "id": 32069820,
      "score": 1,
      "time": 1657633441,
      "title": "Micro Front ends – extending the microservice idea to front end development",
      "type": "story",
      "url": "https://micro-frontends.org/"
    },
    {
      "by": "yuvalhazaz",
      "descendants": 0,
      "id": 32069819,
      "score": 1,
      "time": 1657633440,
      "title": "ScyllaDB Announces ScyllaDB Open Source 5.0",
      "type": "story",
      "url": "https://www.scylladb.com/2022/07/07/introducing-scylladb-open-source-5-0/"
    },
    {
      "by": "aruanavekar",
      "descendants": 0,
      "id": 32069803,
      "score": 1,
      "time": 1657633386,
      "title": "Millennials and Gen Z – WFH days numbered?",
      "type": "story",
      "url": "https://www.cnbc.com/2022/07/11/millennial-and-gen-zs-days-of-remote-working-could-be-numbered.html"
    },
    {
      "by": "bkohlmann",
      "descendants": 0,
      "id": 32069801,
      "score": 1,
      "time": 1657633382,
      "title": "Sell Slowly",
      "type": "story",
      "url": "https://ofdollarsanddata.com/sell-slowly/"
    },
    {
      "by": "carlosedp",
      "descendants": 0,
      "id": 32069780,
      "score": 1,
      "time": 1657633311,
      "title": "Scala or Go: Who Wore It Better? (2021)",
      "type": "story",
      "url": "https://www.vidyasource.com/blog/scala-go"
    },
    {
      "by": "jacv",
      "descendants": 0,
      "id": 32069776,
      "score": 1,
      "time": 1657633304,
      "title": "Where the Crawdads Sing Author Wanted for Questioning in Murder",
      "type": "story",
      "url": "https://www.theatlantic.com/books/archive/2022/07/where-the-crawdads-sing-delia-mark-owens-zambia-murder/670479/"
    },
    {
      "by": "Hard_Space",
      "descendants": 0,
      "id": 32069759,
      "score": 1,
      "time": 1657633235,
      "title": "Our Subconscious Deepfake-Detection Skills Could Power Future Automated Systems",
      "type": "story",
      "url": "https://www.unite.ai/our-subconscious-deepfake-detection-skills-could-power-future-automated-systems/"
    },
    {
      "by": "locriacyber",
      "descendants": 0,
      "id": 32069723,
      "score": 1,
      "text": "Hello HN,<p>I am looking to find a ZKP scheme for humans. Instead of remembering passwords, the user can remember a unique function that has a certain property. Services then probe the user to prove that they know such a function, without revealing the function to the service.<p>The problem is, I&#x27;m not good at cryptography. I need to find a set of functions that one such function is<p>- is easy to evaluate in my head\n- is possible for me to remember\n- can be pre-calculated \n- reasonably fast to use in ZKP<p>One example of a function is to imaging a 3D cellular shape with holes. The challenge type is a list of &quot;discrete movement through the space&quot;, and the response is a list of &quot;crossing the boundary of the 3D shape&quot;.<p>I hope you hackers have a better idea of what types to use for `C`, `R`, and how to choose `generate_f`.<p>details in pseudo-code:<p>```idris2\n-- this is public\n-- the secret `f` generator\n-- should discourage rainbow table\ngenerate_f : (random_seed: Seed) -&gt; P -&gt; F<p>-- this is private\n-- the user remembers a function `f` with certain property in set `P`\n-- this function should be easy to remember and calculate for humans\nF : Type\nF = (challenge: C) -&gt; (response: R)\nf : F<p>-- this is public\n-- prove that the function is generated with `property` from its response\n-- this should be straight-forward to implement using ZKP\nverify : (property: P) -&gt; (challenge: C) -&gt; (response: R) -&gt; bool\n```",
      "time": 1657633085,
      "title": "Ask HN: Building a ZKP Scheme for Humans",
      "type": "story"
    },
    {
      "by": "fortran77",
      "descendants": 0,
      "id": 32069711,
      "score": 2,
      "time": 1657633017,
      "title": "Parícutin",
      "type": "story",
      "url": "https://en.wikipedia.org/wiki/Par%C3%ADcutin"
    },
    {
      "by": "jka",
      "descendants": 0,
      "id": 32069668,
      "score": 1,
      "time": 1657632846,
      "title": "Beyond PEP 8 – Best practices for beautiful intelligible code [video] (2015)",
      "type": "story",
      "url": "https://www.youtube.com/watch?v=wf-BqAjZb8M"
    }
  ]
}
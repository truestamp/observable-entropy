{
  "stories": [
    {
      "by": "Etai",
      "descendants": 0,
      "id": 29434024,
      "score": 1,
      "text": "As an early data hire at a fast-growing company, one of the first things that you’ll likely encounter is a backlog of questions from employees. This backlog, alongside all the other tasks associated with reporting, maintaining data and creating new pipelines can feel extremely overwhelming. These long lists of tasks and questions prevent many data teams from being proactive about analysis. Without a proper process in place that allows analysts to enable self-service, managing data requests proactively can feel like a never-ending battle against a current. Additionally, data teams that constantly need to answer the same question are not creating processes that help them manage the scale and complexity that companies experience as they grow.<p>Below are some of our tips on how to manage the data requests backlog. We believe that great data teams should be proactive. They should adopt tools and processes that ensure that the data team never has to answer the same question twice. We hope this step by step list is helpful to all data teams that want to improve their efficiency and reduce their workload in the future:<p>1. Set expectations about the data requests workflow with reasonable timelines<p>The first step of setting expectations around a team is communicating the way that your team is working to the stakeholders in the company. We suggest adopting an Agile workflow with weekly or bi-weekly sprints. Although your Scrum team may be small at first, setting expectations about when certain requests will be answered with the sprint methodology can be helpful. With scrum, a product is built in a series of iterations called sprints that break down big, complex projects into bite-sized pieces.<p>2. Define your requests workflow<p>Data requests are questions that employees have about data that exists in the organization or about new data that isn&#x27;t being collected yet. Traditionally, data teams will take data requests through an intake form or a Slack channel where employees can ask for the request. Some of the requests are unique and difficult questions, which require the full attention of the data team. On the other hand, some data requests are repetitive and low priority, which doesn’t require much effort from the data team.<p>3. Create a requests template<p>We’ve created a data requests template for teams that are looking for a better way to manage inbound questions. Below is the template. Feel free to copy the template and use it in your team&#x27;s workflow. Here&#x27;s our template:<p>What is the business question you are trying to answer?<p>What is the impact of this question and how will it help the company?<p>Who will be using this data?<p>What time frames are crucial here? (Example: Monthly, weekly, daily)<p>What is the visualization you are trying to create?<p>What interactions&#x2F;drill-downs are required? (Ie. the type of use, revenue amount etc.)<p>Are there any other details we should know about this data request?<p>4. Automate repetitive data requests<p>Data teams that take the next step with their data requests process can start to think proactively about data requests. Customer support teams have been deflecting inbound questions for years using tools like Intercoms knowledge base and Ada automated customer support chatbots. Smart data teams realize that they can do the same. Data teams can automate and deflect common questions with tools that allow them to document data requests in the same place teammates are looking for answers.<p>5. Measure the data requests workflow<p>Lastly, you can’t improve anything you don’t measure. Taking the time to measure what your users are asking, which tables are used the most, and who is the most influential user in your organization is a great way to automate more common questions.<p>If you found this useful, you can find the full article here: https:&#x2F;&#x2F;www.secoda.co&#x2F;blog&#x2F;how-to-manage-and-prioritize-data-requests",
      "time": 1638559087,
      "title": "Steps to managing and prioritizing data requests",
      "type": "story"
    },
    {
      "by": "optimalsolver",
      "descendants": 0,
      "id": 29433982,
      "score": 2,
      "time": 1638558937,
      "title": "OpenML: A Science-Focused, Collaborative Machine Learning Platform",
      "type": "story",
      "url": "https://www.openml.org/"
    },
    {
      "by": "yamrzou",
      "descendants": 0,
      "id": 29433963,
      "score": 2,
      "time": 1638558861,
      "title": "Zoom's Pandemic Hedge",
      "type": "story",
      "url": "https://www.reuters.com/breakingviews/zooms-pandemic-hedge-2021-12-03/"
    },
    {
      "by": "todsacerdoti",
      "descendants": 0,
      "id": 29433959,
      "score": 1,
      "time": 1638558832,
      "title": "PlusCal Tutorial",
      "type": "story",
      "url": "https://lamport.azurewebsites.net/tla/tutorial/intro.html"
    },
    {
      "by": "42jd",
      "descendants": 0,
      "id": 29433957,
      "score": 1,
      "time": 1638558821,
      "title": "Rusty Typestates – Starting Out",
      "type": "story",
      "url": "https://rustype.github.io/notes/notes/rust-typestate-series/rust-typestate-part-1.html"
    },
    {
      "by": "loh",
      "descendants": 0,
      "id": 29433955,
      "score": 1,
      "time": 1638558817,
      "title": "Show HN: Molecule.dev saves you months of dev time on cross-platform apps",
      "type": "story",
      "url": "https://www.molecule.dev/"
    },
    {
      "by": "Vaslo",
      "descendants": 0,
      "id": 29433945,
      "score": 1,
      "time": 1638558779,
      "title": "New Humanoid Robot with Ultra-realistic is disturbing people",
      "type": "story",
      "url": "https://futurism.com/the-byte/people-disturbed-robot-human-face"
    },
    {
      "by": "hfmuehleisen",
      "descendants": 0,
      "id": 29433941,
      "score": 11,
      "time": 1638558753,
      "title": "DuckDB quacks Arrow: A zero-copy data integration between Arrow and DuckDB",
      "type": "story",
      "url": "https://duckdb.org/2021/12/03/duck-arrow.html"
    },
    {
      "by": "johnymontana",
      "descendants": 0,
      "id": 29433913,
      "score": 1,
      "time": 1638558635,
      "title": "Neo4j GraphQL Library: Build GraphQL APIs backed by a native graph database",
      "type": "story",
      "url": "https://neo4j.com/product/graphql-library/"
    },
    {
      "by": "riksucks",
      "descendants": 0,
      "id": 29433912,
      "score": 1,
      "time": 1638558630,
      "title": "GameFi has potential to create equitable societies in developing countries",
      "type": "story",
      "url": "https://sg.finance.yahoo.com/news/gamefi-potential-change-lives-create-192702157.html"
    }
  ]
}
{
  "stories": [
    {
      "by": "antiverse",
      "descendants": 0,
      "id": 32108852,
      "score": 1,
      "time": 1657897144,
      "title": "EA: The Human Story",
      "type": "story",
      "url": "https://ea-spouse.livejournal.com/274.html"
    },
    {
      "by": "test1235",
      "descendants": 0,
      "id": 32108845,
      "score": 1,
      "time": 1657897126,
      "title": "2022 MacBook Air review: Apple’s clean slate",
      "type": "story",
      "url": "https://arstechnica.com/gadgets/2022/07/2022-macbook-air-review-apples-clean-slate/"
    },
    {
      "by": "emme",
      "descendants": 0,
      "id": 32108812,
      "score": 1,
      "text": "This may seem like a trivial question (especially on HN!), but there are so many different aspects to programming that it’s valuable to explore them. We are particularly interested in doing this so that educators can develop a broad view of what the purpose of teaching programming is, and deal with a range of views they may encounter as students engage with the subject.<p>The document has been written by a group of Computer Science Education researchers (WG5 at ITiCSE 2022 [0]), and is available, at https:&#x2F;&#x2F;bit.ly&#x2F;nop-framework, together with a form for collecting your comments in structured way.<p>If you are an educator or a CS expert interested in CS education, we would be grateful to have your feedback about the scientific soundness of the document, and its interest, usefulness, and readability for educators. Please, read the accompanying document first, and then complete the survey. The questions in the survey are organized in two parts: the first aspect concentrates on the &quot;facets of programs&quot;, the second one explores &quot;How programs are created&quot;. The comments collected (anonymously) in the survey will be used to revise and improve the document which will be published as a report by ACM.<p>I&#x27;m one of the member of the working group: I&#x27;m happy to answer to any question you may have.<p>[0] https:&#x2F;&#x2F;iticse.acm.org&#x2F;2022&#x2F;working-groups&#x2F;#wg5",
      "time": 1657896934,
      "title": "Ask HN: What we talk about when we talk about programs",
      "type": "story"
    },
    {
      "by": "cloudsql",
      "descendants": 0,
      "id": 32108811,
      "score": 1,
      "time": 1657896929,
      "title": "Restoring a MySQL Database to a Point in Time",
      "type": "story",
      "url": "https://www.bytebase.com/blog/restoring-a-mysql-database-to-a-point-in-time"
    },
    {
      "by": "todsacerdoti",
      "descendants": 0,
      "id": 32108793,
      "score": 2,
      "time": 1657896856,
      "title": "Writing and Running a BBS on a Macintosh Plus",
      "type": "story",
      "url": "https://jcs.org/2022/07/15/kludge"
    },
    {
      "by": "elashri",
      "descendants": 0,
      "id": 32108780,
      "score": 1,
      "time": 1657896763,
      "title": "Jetbrains Fleet will be paid product with free plans",
      "type": "story",
      "url": "https://twitter.com/jetbrains_fleet/status/1547895766458322948"
    },
    {
      "by": "mikece",
      "descendants": 0,
      "id": 32108776,
      "score": 1,
      "time": 1657896741,
      "title": "DevOps feedback loop explained: Delayed feedback",
      "type": "story",
      "url": "https://sdtimes.com/devops/devops-feedback-loop-explained-delayed-feedback/"
    },
    {
      "by": "olalonde",
      "descendants": 0,
      "id": 32108759,
      "score": 1,
      "time": 1657896609,
      "title": "Rust: TIL how `+toolchain` works under the hood and it's pretty cool",
      "type": "story",
      "url": "https://old.reddit.com/r/rust/comments/vznctr/til_how_toolchain_works_under_the_hood_and_its/"
    },
    {
      "by": "nudpiedo",
      "descendants": 0,
      "id": 32108735,
      "score": 2,
      "text": "Hi all,<p>I would like to write a programming language with semantics compatible with Haskell alike languages like F# or OCaml. I would make the prototype in python for all its bindings as I hope I can be more productive even if it has not support for pattern matching and ADTs.<p>The only known guide I know about hundreds of &quot;Make you a Lisp&quot; tutorials and about a &quot;Make you a Haskell&quot; one which is not complete.<p>The only part that scares me a bit is the type system for what I would be afraid to have to recreate a Prolog or something similar (my first thought was to delegate this job to a separate engine during the first proofs of concept but I to report errors properly and advance I will end up having to implement my own, much more complex, system). Also in order to implement proper Effect Systems or Lazy Execution&#x2F;evaluation elegantly.<p>If that doesn&#x27;t exist I also would love some pointers in any other programming language, such as Python, Clojure or OCaml.",
      "time": 1657896476,
      "title": "Ask HN: Is there any “Make you a Haskell” tutorial?",
      "type": "story"
    },
    {
      "by": "razin",
      "descendants": 0,
      "id": 32108695,
      "score": 2,
      "time": 1657896203,
      "title": "How a fake cricket league ran for Russian punters",
      "type": "story",
      "url": "https://www.bbc.com/news/world-asia-india-62123966"
    }
  ]
}
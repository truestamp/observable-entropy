{
  "stories": [
    {
      "by": "aiyen",
      "descendants": 0,
      "id": 31097913,
      "score": 1,
      "time": 1650466757,
      "title": "Ask HN: Best skills to learn for process automation?",
      "type": "story"
    },
    {
      "by": "DemiGuru",
      "descendants": 0,
      "id": 31097896,
      "score": 1,
      "time": 1650466687,
      "title": "Russian state hackers hit Ukraine with new malware variants",
      "type": "story",
      "url": "https://www.bleepingcomputer.com/news/security/russian-state-hackers-hit-ukraine-with-new-malware-variants/"
    },
    {
      "by": "pseudolus",
      "descendants": 0,
      "id": 31097894,
      "score": 1,
      "time": 1650466681,
      "title": "Having Your Camera Off in Meetings Could Cost You Your Job",
      "type": "story",
      "url": "https://www.pcmag.com/news/having-your-camera-off-in-meetings-could-cost-you-your-job"
    },
    {
      "by": "hubraumhugo",
      "descendants": 0,
      "id": 31097893,
      "score": 1,
      "time": 1650466679,
      "title": "Netflix hints at password sharing crackdown as subscribers fall",
      "type": "story",
      "url": "https://www.bbc.com/news/business-61153252"
    },
    {
      "by": "LucasFancation",
      "descendants": 0,
      "id": 31097869,
      "score": 1,
      "text": "Hi, fellow developers who hate CSS and designing,<p>I worked on a photo-sharing app as my side hustle using React Js. I want to allow the photo owners to view the statistics and analytical data of every photo they share. However, building the analytic dashboard from scratch is hard as I rather spend my time building my product. That is why I came out with this idea to solve this problem that fellow makers might face. Since this is the MVP, I decided to make the tool easy and simple to use by having only 3 steps :<p>1. Add your Webhook API.<p>2. Edit the charts.<p>3. Embed the charts.<p>Hope you guys find it useful! Any feedback and tips are sincerely appreciated as this is my first time launching a web app to the public.",
      "time": 1650466586,
      "title": "No-code analytic dashboard builder",
      "type": "story"
    },
    {
      "by": "PaulHoule",
      "descendants": 0,
      "id": 31097868,
      "score": 2,
      "time": 1650466585,
      "title": "Putin's war in Ukraine puts Germany's Greens in a tight spot",
      "type": "story",
      "url": "https://www.dw.com/en/putins-war-in-ukraine-puts-germanys-greens-in-a-tight-spot/a-61330562"
    },
    {
      "by": "todsacerdoti",
      "descendants": 0,
      "id": 31097865,
      "score": 1,
      "time": 1650466564,
      "title": "Top Founders at YC Tech Talks: Healthcare",
      "type": "story",
      "url": "https://www.ycombinator.com/blog/yc-tech-talks-healthcare/"
    },
    {
      "by": "pseudolus",
      "descendants": 0,
      "id": 31097832,
      "score": 2,
      "time": 1650466474,
      "title": "The brain-reading devices helping paralysed people to move, talk and touch",
      "type": "story",
      "url": "https://www.nature.com/articles/d41586-022-01047-w"
    },
    {
      "by": "andrew_",
      "descendants": 0,
      "id": 31097819,
      "score": 1,
      "text": "For the last few months, we&#x27;ve been running our database migrations using Go and Goose [1] within our Github Actions workflows as a step that completes after a successful asset deployment. For the sake of the post, assume that the deployed &quot;thing&quot; is a lambda function. Installing Go and Goose for each deployment run costs us about a minute and a half, to two minutes, depending on Github Actions&#x27; mood that day. It&#x27;s a chunk that I&#x27;d like to remove from our deployment runs, as maybe 1 out of every 100 deployments has a database migration in tow. Separating the db migrations and Go&#x2F;Goose installs into a separate job that runs based on whether or not the migrations directory has changes, dependent on the deployment job (or vise versa), seems like a good way to go. However, that presents some race conditions and there doesn&#x27;t seem to be much (that I could find) written on best practices for this scenario. Here are the conditions I&#x27;ve come up with:<p>1. if a migration is run first, then the current thing running against the db could start erroring<p>2. if a migration is run first, and the deployment fails, a migrate down needs to be immediately performed, the current thing errors until done<p>3. if a migration is run last, then the new deployed thing could error for a hot moment while migration is running<p>4. if a migration is run last and fails, then the new deployed thing could error until the migration is fixed<p>Presently, we&#x27;re taking the latter approach in running migrations last. We haven&#x27;t hit any snags there... yet. But the team is small and I&#x27;m trying to plan around eventual expansion. What does HN think?<p>[1] https:&#x2F;&#x2F;github.com&#x2F;pressly&#x2F;goose",
      "time": 1650466425,
      "title": "Ask HN: DB Migration and Deployment Race Strategy",
      "type": "story"
    },
    {
      "by": "danny00",
      "descendants": 0,
      "id": 31097807,
      "score": 1,
      "time": 1650466383,
      "title": "Monte is a nascent dynamic programming language reminiscent of Python and E",
      "type": "story",
      "url": "http://www.monte-language.org/"
    }
  ]
}
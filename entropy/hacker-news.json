{
  "stories": [
    {
      "by": "bookofjoe",
      "descendants": 0,
      "id": 31920119,
      "score": 1,
      "time": 1656510833,
      "title": "China's Xi Says Covid Strategy Is 'Correct and Effective'",
      "type": "story",
      "url": "https://www.usnews.com/news/world/articles/2022-06-29/chinas-xi-says-covid-strategy-is-correct-and-effective"
    },
    {
      "by": "Claude_Shannon",
      "descendants": 0,
      "id": 31920112,
      "score": 1,
      "time": 1656510798,
      "title": "No such thing as a fresh start",
      "type": "story",
      "url": "https://www.oliverburkeman.com/so/a3NNWwpfw#/main"
    },
    {
      "by": "justinzollars",
      "descendants": 0,
      "id": 31920110,
      "score": 1,
      "time": 1656510778,
      "title": "Reports of Disinformation Campaign Against Rare Earth Processing Facilities",
      "type": "story",
      "url": "https://www.defense.gov/News/Releases/Release/Article/3077280/reports-of-disinformation-campaign-against-rare-earth-processing-facilities/"
    },
    {
      "by": "PaulHoule",
      "descendants": 0,
      "id": 31920108,
      "score": 2,
      "time": 1656510774,
      "title": "Binding methane with metal: A new hope for recycling the potent fossil fuel",
      "type": "story",
      "url": "https://phys.org/news/2022-06-methane-metal-recycling-potent-fossil.html"
    },
    {
      "by": "ovis",
      "descendants": 0,
      "id": 31920087,
      "score": 1,
      "time": 1656510691,
      "title": "St. John's woman loses home after Phoenix pay fiasco",
      "type": "story",
      "url": "https://www.cbc.ca/news/canada/newfoundland-labrador/phoenix-pay-joanne-osmond-1.6500083"
    },
    {
      "by": "theovermage",
      "descendants": 0,
      "id": 31920065,
      "score": 1,
      "time": 1656510577,
      "title": "To the Fediverse â€“ search for a fediverse instance",
      "type": "story",
      "url": "https://www.fediverse.to"
    },
    {
      "by": "theovermage",
      "descendants": 0,
      "id": 31920051,
      "score": 1,
      "time": 1656510527,
      "title": "Create a series of posts with navigation in Jekyll",
      "type": "story",
      "url": "https://www.ayushsharma.in/2022/02/creating-article-series-posts-navigation-jekyll"
    },
    {
      "by": "theovermage",
      "descendants": 0,
      "id": 31920050,
      "score": 1,
      "time": 1656510516,
      "title": "A practical guide to light and dark mode in Bootstrap 5 and Jekyll",
      "type": "story",
      "url": "https://www.ayushsharma.in/2022/01/practical-light-dark-mode-jekyll-bootstrap5"
    },
    {
      "by": "pupeno",
      "descendants": 1,
      "id": 31920047,
      "kids": [
        31920104
      ],
      "score": 1,
      "time": 1656510495,
      "title": "Show HN: I wrote a book on how to hire and manage remote teams",
      "type": "story",
      "url": "https://pablofernandez.tech/how-to-hire-and-manage-remote-teams/"
    },
    {
      "by": "newsoul",
      "descendants": 0,
      "id": 31920038,
      "score": 1,
      "text": "There is always a tussle going on between functional vs imperative language people.<p>But nowadays most languages are mixed paradigm. Still there are differences.<p>Functional people give arguments like:<p>1. Code is easy to reason about<p>2. Can be verified easily and less prone to errors<p>3. Use mutation only when necessary, not as a default.<p>Imperative people say:<p>1. More efficient as close to the machine<p>2. More space efficient hence faster. (although functional languages can be as fast with compiler optimisations)<p>Functional languages are used in industry now at large scale e.g: Jane Street, Twitter, etc. Imperative language has always been used in industries. I bring up industries because it proves that the languages are scalable.<p>Functional programming experts say that their code is efficient because the compiler translates it to an efficient representation on the CPU. They have TCO and other things. But they don&#x27;t mutate data and hence every function call creates a new data in memory taking up space. How do they overcome that?<p>Also we can switch between imperative and functional implementations. Basically an algorithm can be implemented eitherwise.<p>Now my question is where do I learn about these nitty gritty&#x27;s? Should I read about compilers more? Or systems? Or what?<p>Can you suggest books&#x2F;blogs&#x2F;courses?",
      "time": 1656510461,
      "title": "Ask HN: Functional vs. Imperative Implementation of Algorithms",
      "type": "story"
    }
  ]
}
import * as base64 from "https://deno.land/x/base64@v0.2.1/mod.ts";
import * as base64url from "https://deno.land/x/base64@v0.2.1/base64url.ts";
const decoder = new TextDecoder();
const encoder = new TextEncoder();
function toHexString(buf) {
    return buf.reduce((hex, byte) => `${hex}${byte < 16 ? "0" : ""}${byte.toString(16)}`, "");
}
function fromHexString(hex) {
    const len = hex.length;
    if (len % 2 || !/^[0-9a-fA-F]+$/.test(hex)) {
        throw new TypeError("Invalid hex string.");
    }
    hex = hex.toLowerCase();
    const buf = new Uint8Array(Math.floor(len / 2));
    const end = len / 2;
    for (let i = 0; i < end; ++i) {
        buf[i] = parseInt(hex.substr(i * 2, 2), 16);
    }
    return buf;
}
export function decode(buf, encoding = "utf8") {
    if (/^utf-?8$/i.test(encoding)) {
        return decoder.decode(buf);
    }
    else if (/^base64$/i.test(encoding)) {
        return base64.fromUint8Array(buf);
    }
    else if (/^base64url$/i.test(encoding)) {
        return base64url.fromUint8Array(buf);
    }
    else if (/^hex(?:adecimal)?$/i.test(encoding)) {
        return toHexString(buf);
    }
    else {
        throw new TypeError("Unsupported string encoding.");
    }
}
export function encode(str, encoding = "utf8") {
    if (/^utf-?8$/i.test(encoding)) {
        return encoder.encode(str);
    }
    else if (/^base64(?:url)?$/i.test(encoding)) {
        return base64.toUint8Array(str);
    }
    else if (/^hex(?:adecimal)?$/i.test(encoding)) {
        return fromHexString(str);
    }
    else {
        throw new TypeError("Unsupported string encoding.");
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE1BQU0sMENBQTBDLENBQUM7QUFDbkUsT0FBTyxLQUFLLFNBQVMsTUFBTSxnREFBZ0QsQ0FBQztBQUU1RSxNQUFNLE9BQU8sR0FBZ0IsSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUMvQyxNQUFNLE9BQU8sR0FBZ0IsSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUcvQyxTQUFTLFdBQVcsQ0FBQyxHQUFlO0lBQ2xDLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FDZixDQUFDLEdBQVcsRUFBRSxJQUFZLEVBQVUsRUFBRSxDQUNwQyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQ3JELEVBQUUsQ0FDSCxDQUFDO0FBQ0osQ0FBQztBQUdELFNBQVMsYUFBYSxDQUFDLEdBQVc7SUFDaEMsTUFBTSxHQUFHLEdBQVcsR0FBRyxDQUFDLE1BQU0sQ0FBQztJQUMvQixJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDMUMsTUFBTSxJQUFJLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0tBQzVDO0lBQ0QsR0FBRyxHQUFHLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN4QixNQUFNLEdBQUcsR0FBZSxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVELE1BQU0sR0FBRyxHQUFXLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDNUIsS0FBSyxJQUFJLENBQUMsR0FBVyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRTtRQUNwQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUM3QztJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUdELE1BQU0sVUFBVSxNQUFNLENBQUMsR0FBZSxFQUFFLFdBQW1CLE1BQU07SUFDL0QsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQzlCLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUM1QjtTQUFNLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUNyQyxPQUFPLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDbkM7U0FBTSxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDeEMsT0FBTyxTQUFTLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3RDO1NBQU0sSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDL0MsT0FBTyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDekI7U0FBTTtRQUNMLE1BQU0sSUFBSSxTQUFTLENBQUMsOEJBQThCLENBQUMsQ0FBQztLQUNyRDtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsTUFBTSxDQUFDLEdBQVcsRUFBRSxXQUFtQixNQUFNO0lBQzNELElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUM5QixPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDNUI7U0FBTSxJQUFJLG1CQUFtQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUM3QyxPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDakM7U0FBTSxJQUFJLHFCQUFxQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUMvQyxPQUFPLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUMzQjtTQUFNO1FBQ0wsTUFBTSxJQUFJLFNBQVMsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0tBQ3JEO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGJhc2U2NCBmcm9tIFwiaHR0cHM6Ly9kZW5vLmxhbmQveC9iYXNlNjRAdjAuMi4xL21vZC50c1wiO1xuaW1wb3J0ICogYXMgYmFzZTY0dXJsIGZyb20gXCJodHRwczovL2Rlbm8ubGFuZC94L2Jhc2U2NEB2MC4yLjEvYmFzZTY0dXJsLnRzXCI7XG5cbmNvbnN0IGRlY29kZXI6IFRleHREZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCk7XG5jb25zdCBlbmNvZGVyOiBUZXh0RW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuXG4vKiogU2VyaWFsaXplcyBhIFVpbnQ4QXJyYXkgdG8gYSBoZXhhZGVjaW1hbCBzdHJpbmcuICovXG5mdW5jdGlvbiB0b0hleFN0cmluZyhidWY6IFVpbnQ4QXJyYXkpOiBzdHJpbmcge1xuICByZXR1cm4gYnVmLnJlZHVjZShcbiAgICAoaGV4OiBzdHJpbmcsIGJ5dGU6IG51bWJlcik6IHN0cmluZyA9PlxuICAgICAgYCR7aGV4fSR7Ynl0ZSA8IDE2ID8gXCIwXCIgOiBcIlwifSR7Ynl0ZS50b1N0cmluZygxNil9YCxcbiAgICBcIlwiLFxuICApO1xufVxuXG4vKiogRGVzZXJpYWxpemVzIGEgVWludDhBcnJheSBmcm9tIGEgaGV4YWRlY2ltYWwgc3RyaW5nLiAqL1xuZnVuY3Rpb24gZnJvbUhleFN0cmluZyhoZXg6IHN0cmluZyk6IFVpbnQ4QXJyYXkge1xuICBjb25zdCBsZW46IG51bWJlciA9IGhleC5sZW5ndGg7XG4gIGlmIChsZW4gJSAyIHx8ICEvXlswLTlhLWZBLUZdKyQvLnRlc3QoaGV4KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGhleCBzdHJpbmcuXCIpO1xuICB9XG4gIGhleCA9IGhleC50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBidWY6IFVpbnQ4QXJyYXkgPSBuZXcgVWludDhBcnJheShNYXRoLmZsb29yKGxlbiAvIDIpKTtcbiAgY29uc3QgZW5kOiBudW1iZXIgPSBsZW4gLyAyO1xuICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgZW5kOyArK2kpIHtcbiAgICBidWZbaV0gPSBwYXJzZUludChoZXguc3Vic3RyKGkgKiAyLCAyKSwgMTYpO1xuICB9XG4gIHJldHVybiBidWY7XG59XG5cbi8qKiBEZWNvZGVzIGEgVWludDhBcnJheSB0byB1dGY4LSwgYmFzZTY0LSwgb3IgaGV4LWVuY29kZWQgc3RyaW5nLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZShidWY6IFVpbnQ4QXJyYXksIGVuY29kaW5nOiBzdHJpbmcgPSBcInV0ZjhcIik6IHN0cmluZyB7XG4gIGlmICgvXnV0Zi0/OCQvaS50ZXN0KGVuY29kaW5nKSkge1xuICAgIHJldHVybiBkZWNvZGVyLmRlY29kZShidWYpO1xuICB9IGVsc2UgaWYgKC9eYmFzZTY0JC9pLnRlc3QoZW5jb2RpbmcpKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tVWludDhBcnJheShidWYpO1xuICB9IGVsc2UgaWYgKC9eYmFzZTY0dXJsJC9pLnRlc3QoZW5jb2RpbmcpKSB7XG4gICAgcmV0dXJuIGJhc2U2NHVybC5mcm9tVWludDhBcnJheShidWYpO1xuICB9IGVsc2UgaWYgKC9eaGV4KD86YWRlY2ltYWwpPyQvaS50ZXN0KGVuY29kaW5nKSkge1xuICAgIHJldHVybiB0b0hleFN0cmluZyhidWYpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJVbnN1cHBvcnRlZCBzdHJpbmcgZW5jb2RpbmcuXCIpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGUoc3RyOiBzdHJpbmcsIGVuY29kaW5nOiBzdHJpbmcgPSBcInV0ZjhcIik6IFVpbnQ4QXJyYXkge1xuICBpZiAoL151dGYtPzgkL2kudGVzdChlbmNvZGluZykpIHtcbiAgICByZXR1cm4gZW5jb2Rlci5lbmNvZGUoc3RyKTtcbiAgfSBlbHNlIGlmICgvXmJhc2U2NCg/OnVybCk/JC9pLnRlc3QoZW5jb2RpbmcpKSB7XG4gICAgcmV0dXJuIGJhc2U2NC50b1VpbnQ4QXJyYXkoc3RyKTtcbiAgfSBlbHNlIGlmICgvXmhleCg/OmFkZWNpbWFsKT8kL2kudGVzdChlbmNvZGluZykpIHtcbiAgICByZXR1cm4gZnJvbUhleFN0cmluZyhzdHIpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJVbnN1cHBvcnRlZCBzdHJpbmcgZW5jb2RpbmcuXCIpO1xuICB9XG59XG4iXX0=
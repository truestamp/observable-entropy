export const ERROR_SUCCESS = 0;
export const ERROR_INVALID_FUNCTION = 1;
export const ERROR_FILE_NOT_FOUND = 2;
export const ERROR_PATH_NOT_FOUND = 3;
export const ERROR_TOO_MANY_OPEN_FILES = 4;
export const ERROR_ACCESS_DENIED = 5;
export const ERROR_INVALID_HANDLE = 6;
export const ERROR_ARENA_TRASHED = 7;
export const ERROR_NOT_ENOUGH_MEMORY = 8;
export const ERROR_INVALID_BLOCK = 9;
export const ERROR_BAD_ENVIRONMENT = 10;
export const ERROR_BAD_FORMAT = 11;
export const ERROR_INVALID_ACCESS = 12;
export const ERROR_INVALID_DATA = 13;
export const ERROR_OUTOFMEMORY = 14;
export const ERROR_INVALID_DRIVE = 15;
export const ERROR_CURRENT_DIRECTORY = 16;
export const ERROR_NOT_SAME_DEVICE = 17;
export const ERROR_NO_MORE_FILES = 18;
export const ERROR_WRITE_PROTECT = 19;
export const ERROR_BAD_UNIT = 20;
export const ERROR_NOT_READY = 21;
export const ERROR_BAD_COMMAND = 22;
export const ERROR_CRC = 23;
export const ERROR_BAD_LENGTH = 24;
export const ERROR_SEEK = 25;
export const ERROR_NOT_DOS_DISK = 26;
export const ERROR_SECTOR_NOT_FOUND = 27;
export const ERROR_OUT_OF_PAPER = 28;
export const ERROR_WRITE_FAULT = 29;
export const ERROR_READ_FAULT = 30;
export const ERROR_GEN_FAILURE = 31;
export const ERROR_SHARING_VIOLATION = 32;
export const ERROR_LOCK_VIOLATION = 33;
export const ERROR_WRONG_DISK = 34;
export const ERROR_SHARING_BUFFER_EXCEEDED = 36;
export const ERROR_HANDLE_EOF = 38;
export const ERROR_HANDLE_DISK_FULL = 39;
export const ERROR_NOT_SUPPORTED = 50;
export const ERROR_REM_NOT_LIST = 51;
export const ERROR_DUP_NAME = 52;
export const ERROR_BAD_NETPATH = 53;
export const ERROR_NETWORK_BUSY = 54;
export const ERROR_DEV_NOT_EXIST = 55;
export const ERROR_TOO_MANY_CMDS = 56;
export const ERROR_ADAP_HDW_ERR = 57;
export const ERROR_BAD_NET_RESP = 58;
export const ERROR_UNEXP_NET_ERR = 59;
export const ERROR_BAD_REM_ADAP = 60;
export const ERROR_PRINTQ_FULL = 61;
export const ERROR_NO_SPOOL_SPACE = 62;
export const ERROR_PRINT_CANCELLED = 63;
export const ERROR_NETNAME_DELETED = 64;
export const ERROR_NETWORK_ACCESS_DENIED = 65;
export const ERROR_BAD_DEV_TYPE = 66;
export const ERROR_BAD_NET_NAME = 67;
export const ERROR_TOO_MANY_NAMES = 68;
export const ERROR_TOO_MANY_SESS = 69;
export const ERROR_SHARING_PAUSED = 70;
export const ERROR_REQ_NOT_ACCEP = 71;
export const ERROR_REDIR_PAUSED = 72;
export const ERROR_FILE_EXISTS = 80;
export const ERROR_CANNOT_MAKE = 82;
export const ERROR_FAIL_I24 = 83;
export const ERROR_OUT_OF_STRUCTURES = 84;
export const ERROR_ALREADY_ASSIGNED = 85;
export const ERROR_INVALID_PASSWORD = 86;
export const ERROR_INVALID_PARAMETER = 87;
export const ERROR_NET_WRITE_FAULT = 88;
export const ERROR_NO_PROC_SLOTS = 89;
export const ERROR_TOO_MANY_SEMAPHORES = 100;
export const ERROR_EXCL_SEM_ALREADY_OWNED = 101;
export const ERROR_SEM_IS_SET = 102;
export const ERROR_TOO_MANY_SEM_REQUESTS = 103;
export const ERROR_INVALID_AT_INTERRUPT_TIME = 104;
export const ERROR_SEM_OWNER_DIED = 105;
export const ERROR_SEM_USER_LIMIT = 106;
export const ERROR_DISK_CHANGE = 107;
export const ERROR_DRIVE_LOCKED = 108;
export const ERROR_BROKEN_PIPE = 109;
export const ERROR_OPEN_FAILED = 110;
export const ERROR_BUFFER_OVERFLOW = 111;
export const ERROR_DISK_FULL = 112;
export const ERROR_NO_MORE_SEARCH_HANDLES = 113;
export const ERROR_INVALID_TARGET_HANDLE = 114;
export const ERROR_INVALID_CATEGORY = 117;
export const ERROR_INVALID_VERIFY_SWITCH = 118;
export const ERROR_BAD_DRIVER_LEVEL = 119;
export const ERROR_CALL_NOT_IMPLEMENTED = 120;
export const ERROR_SEM_TIMEOUT = 121;
export const ERROR_INSUFFICIENT_BUFFER = 122;
export const ERROR_INVALID_NAME = 123;
export const ERROR_INVALID_LEVEL = 124;
export const ERROR_NO_VOLUME_LABEL = 125;
export const ERROR_MOD_NOT_FOUND = 126;
export const ERROR_PROC_NOT_FOUND = 127;
export const ERROR_WAIT_NO_CHILDREN = 128;
export const ERROR_CHILD_NOT_COMPLETE = 129;
export const ERROR_DIRECT_ACCESS_HANDLE = 130;
export const ERROR_NEGATIVE_SEEK = 131;
export const ERROR_SEEK_ON_DEVICE = 132;
export const ERROR_IS_JOIN_TARGET = 133;
export const ERROR_IS_JOINED = 134;
export const ERROR_IS_SUBSTED = 135;
export const ERROR_NOT_JOINED = 136;
export const ERROR_NOT_SUBSTED = 137;
export const ERROR_JOIN_TO_JOIN = 138;
export const ERROR_SUBST_TO_SUBST = 139;
export const ERROR_JOIN_TO_SUBST = 140;
export const ERROR_SUBST_TO_JOIN = 141;
export const ERROR_BUSY_DRIVE = 142;
export const ERROR_SAME_DRIVE = 143;
export const ERROR_DIR_NOT_ROOT = 144;
export const ERROR_DIR_NOT_EMPTY = 145;
export const ERROR_IS_SUBST_PATH = 146;
export const ERROR_IS_JOIN_PATH = 147;
export const ERROR_PATH_BUSY = 148;
export const ERROR_IS_SUBST_TARGET = 149;
export const ERROR_SYSTEM_TRACE = 150;
export const ERROR_INVALID_EVENT_COUNT = 151;
export const ERROR_TOO_MANY_MUXWAITERS = 152;
export const ERROR_INVALID_LIST_FORMAT = 153;
export const ERROR_LABEL_TOO_LONG = 154;
export const ERROR_TOO_MANY_TCBS = 155;
export const ERROR_SIGNAL_REFUSED = 156;
export const ERROR_DISCARDED = 157;
export const ERROR_NOT_LOCKED = 158;
export const ERROR_BAD_THREADID_ADDR = 159;
export const ERROR_BAD_ARGUMENTS = 160;
export const ERROR_BAD_PATHNAME = 161;
export const ERROR_SIGNAL_PENDING = 162;
export const ERROR_MAX_THRDS_REACHED = 164;
export const ERROR_LOCK_FAILED = 167;
export const ERROR_BUSY = 170;
export const ERROR_CANCEL_VIOLATION = 173;
export const ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = 174;
export const ERROR_INVALID_SEGMENT_NUMBER = 180;
export const ERROR_INVALID_ORDINAL = 182;
export const ERROR_ALREADY_EXISTS = 183;
export const ERROR_INVALID_FLAG_NUMBER = 186;
export const ERROR_SEM_NOT_FOUND = 187;
export const ERROR_INVALID_STARTING_CODESEG = 188;
export const ERROR_INVALID_STACKSEG = 189;
export const ERROR_INVALID_MODULETYPE = 190;
export const ERROR_INVALID_EXE_SIGNATURE = 191;
export const ERROR_EXE_MARKED_INVALID = 192;
export const ERROR_BAD_EXE_FORMAT = 193;
export const ERROR_ITERATED_DATA_EXCEEDS_64k = 194;
export const ERROR_INVALID_MINALLOCSIZE = 195;
export const ERROR_DYNLINK_FROM_INVALID_RING = 196;
export const ERROR_IOPL_NOT_ENABLED = 197;
export const ERROR_INVALID_SEGDPL = 198;
export const ERROR_AUTODATASEG_EXCEEDS_64k = 199;
export const ERROR_RING2SEG_MUST_BE_MOVABLE = 200;
export const ERROR_RELOC_CHAIN_XEEDS_SEGLIM = 201;
export const ERROR_INFLOOP_IN_RELOC_CHAIN = 202;
export const ERROR_ENVVAR_NOT_FOUND = 203;
export const ERROR_NO_SIGNAL_SENT = 205;
export const ERROR_FILENAME_EXCED_RANGE = 206;
export const ERROR_RING2_STACK_IN_USE = 207;
export const ERROR_META_EXPANSION_TOO_LONG = 208;
export const ERROR_INVALID_SIGNAL_NUMBER = 209;
export const ERROR_THREAD_1_INACTIVE = 210;
export const ERROR_LOCKED = 212;
export const ERROR_TOO_MANY_MODULES = 214;
export const ERROR_NESTING_NOT_ALLOWED = 215;
export const ERROR_EXE_MACHINE_TYPE_MISMATCH = 216;
export const ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY = 217;
export const ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY = 218;
export const ERROR_BAD_PIPE = 230;
export const ERROR_PIPE_BUSY = 231;
export const ERROR_NO_DATA = 232;
export const ERROR_PIPE_NOT_CONNECTED = 233;
export const ERROR_MORE_DATA = 234;
export const ERROR_VC_DISCONNECTED = 240;
export const ERROR_INVALID_EA_NAME = 254;
export const ERROR_EA_LIST_INCONSISTENT = 255;
export const WAIT_TIMEOUT = 258;
export const ERROR_NO_MORE_ITEMS = 259;
export const ERROR_CANNOT_COPY = 266;
export const ERROR_DIRECTORY = 267;
export const ERROR_EAS_DIDNT_FIT = 275;
export const ERROR_EA_FILE_CORRUPT = 276;
export const ERROR_EA_TABLE_FULL = 277;
export const ERROR_INVALID_EA_HANDLE = 278;
export const ERROR_EAS_NOT_SUPPORTED = 282;
export const ERROR_NOT_OWNER = 288;
export const ERROR_TOO_MANY_POSTS = 298;
export const ERROR_PARTIAL_COPY = 299;
export const ERROR_OPLOCK_NOT_GRANTED = 300;
export const ERROR_INVALID_OPLOCK_PROTOCOL = 301;
export const ERROR_DISK_TOO_FRAGMENTED = 302;
export const ERROR_DELETE_PENDING = 303;
export const ERROR_MR_MID_NOT_FOUND = 317;
export const ERROR_SCOPE_NOT_FOUND = 318;
export const ERROR_INVALID_ADDRESS = 487;
export const ERROR_ARITHMETIC_OVERFLOW = 534;
export const ERROR_PIPE_CONNECTED = 535;
export const ERROR_PIPE_LISTENING = 536;
export const ERROR_EA_ACCESS_DENIED = 994;
export const ERROR_OPERATION_ABORTED = 995;
export const ERROR_IO_INCOMPLETE = 996;
export const ERROR_IO_PENDING = 997;
export const ERROR_NOACCESS = 998;
export const ERROR_SWAPERROR = 999;
export const ERROR_STACK_OVERFLOW = 1001;
export const ERROR_INVALID_MESSAGE = 1002;
export const ERROR_CAN_NOT_COMPLETE = 1003;
export const ERROR_INVALID_FLAGS = 1004;
export const ERROR_UNRECOGNIZED_VOLUME = 1005;
export const ERROR_FILE_INVALID = 1006;
export const ERROR_FULLSCREEN_MODE = 1007;
export const ERROR_NO_TOKEN = 1008;
export const ERROR_BADDB = 1009;
export const ERROR_BADKEY = 1010;
export const ERROR_CANTOPEN = 1011;
export const ERROR_CANTREAD = 1012;
export const ERROR_CANTWRITE = 1013;
export const ERROR_REGISTRY_RECOVERED = 1014;
export const ERROR_REGISTRY_CORRUPT = 1015;
export const ERROR_REGISTRY_IO_FAILED = 1016;
export const ERROR_NOT_REGISTRY_FILE = 1017;
export const ERROR_KEY_DELETED = 1018;
export const ERROR_NO_LOG_SPACE = 1019;
export const ERROR_KEY_HAS_CHILDREN = 1020;
export const ERROR_CHILD_MUST_BE_VOLATILE = 1021;
export const ERROR_NOTIFY_ENUM_DIR = 1022;
export const ERROR_DEPENDENT_SERVICES_RUNNING = 1051;
export const ERROR_INVALID_SERVICE_CONTROL = 1052;
export const ERROR_SERVICE_REQUEST_TIMEOUT = 1053;
export const ERROR_SERVICE_NO_THREAD = 1054;
export const ERROR_SERVICE_DATABASE_LOCKED = 1055;
export const ERROR_SERVICE_ALREADY_RUNNING = 1056;
export const ERROR_INVALID_SERVICE_ACCOUNT = 1057;
export const ERROR_SERVICE_DISABLED = 1058;
export const ERROR_CIRCULAR_DEPENDENCY = 1059;
export const ERROR_SERVICE_DOES_NOT_EXIST = 1060;
export const ERROR_SERVICE_CANNOT_ACCEPT_CTRL = 1061;
export const ERROR_SERVICE_NOT_ACTIVE = 1062;
export const ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = 1063;
export const ERROR_EXCEPTION_IN_SERVICE = 1064;
export const ERROR_DATABASE_DOES_NOT_EXIST = 1065;
export const ERROR_SERVICE_SPECIFIC_ERROR = 1066;
export const ERROR_PROCESS_ABORTED = 1067;
export const ERROR_SERVICE_DEPENDENCY_FAIL = 1068;
export const ERROR_SERVICE_LOGON_FAILED = 1069;
export const ERROR_SERVICE_START_HANG = 1070;
export const ERROR_INVALID_SERVICE_LOCK = 1071;
export const ERROR_SERVICE_MARKED_FOR_DELETE = 1072;
export const ERROR_SERVICE_EXISTS = 1073;
export const ERROR_ALREADY_RUNNING_LKG = 1074;
export const ERROR_SERVICE_DEPENDENCY_DELETED = 1075;
export const ERROR_BOOT_ALREADY_ACCEPTED = 1076;
export const ERROR_SERVICE_NEVER_STARTED = 1077;
export const ERROR_DUPLICATE_SERVICE_NAME = 1078;
export const ERROR_DIFFERENT_SERVICE_ACCOUNT = 1079;
export const ERROR_CANNOT_DETECT_DRIVER_FAILURE = 1080;
export const ERROR_CANNOT_DETECT_PROCESS_ABORT = 1081;
export const ERROR_NO_RECOVERY_PROGRAM = 1082;
export const ERROR_SERVICE_NOT_IN_EXE = 1083;
export const ERROR_NOT_SAFEBOOT_SERVICE = 1084;
export const ERROR_END_OF_MEDIA = 1100;
export const ERROR_FILEMARK_DETECTED = 1101;
export const ERROR_BEGINNING_OF_MEDIA = 1102;
export const ERROR_SETMARK_DETECTED = 1103;
export const ERROR_NO_DATA_DETECTED = 1104;
export const ERROR_PARTITION_FAILURE = 1105;
export const ERROR_INVALID_BLOCK_LENGTH = 1106;
export const ERROR_DEVICE_NOT_PARTITIONED = 1107;
export const ERROR_UNABLE_TO_LOCK_MEDIA = 1108;
export const ERROR_UNABLE_TO_UNLOAD_MEDIA = 1109;
export const ERROR_MEDIA_CHANGED = 1110;
export const ERROR_BUS_RESET = 1111;
export const ERROR_NO_MEDIA_IN_DRIVE = 1112;
export const ERROR_NO_UNICODE_TRANSLATION = 1113;
export const ERROR_DLL_INIT_FAILED = 1114;
export const ERROR_SHUTDOWN_IN_PROGRESS = 1115;
export const ERROR_NO_SHUTDOWN_IN_PROGRESS = 1116;
export const ERROR_IO_DEVICE = 1117;
export const ERROR_SERIAL_NO_DEVICE = 1118;
export const ERROR_IRQ_BUSY = 1119;
export const ERROR_MORE_WRITES = 1120;
export const ERROR_COUNTER_TIMEOUT = 1121;
export const ERROR_FLOPPY_ID_MARK_NOT_FOUND = 1122;
export const ERROR_FLOPPY_WRONG_CYLINDER = 1123;
export const ERROR_FLOPPY_UNKNOWN_ERROR = 1124;
export const ERROR_FLOPPY_BAD_REGISTERS = 1125;
export const ERROR_DISK_RECALIBRATE_FAILED = 1126;
export const ERROR_DISK_OPERATION_FAILED = 1127;
export const ERROR_DISK_RESET_FAILED = 1128;
export const ERROR_EOM_OVERFLOW = 1129;
export const ERROR_NOT_ENOUGH_SERVER_MEMORY = 1130;
export const ERROR_POSSIBLE_DEADLOCK = 1131;
export const ERROR_MAPPED_ALIGNMENT = 1132;
export const ERROR_SET_POWER_STATE_VETOED = 1140;
export const ERROR_SET_POWER_STATE_FAILED = 1141;
export const ERROR_TOO_MANY_LINKS = 1142;
export const ERROR_OLD_WIN_VERSION = 1150;
export const ERROR_APP_WRONG_OS = 1151;
export const ERROR_SINGLE_INSTANCE_APP = 1152;
export const ERROR_RMODE_APP = 1153;
export const ERROR_INVALID_DLL = 1154;
export const ERROR_NO_ASSOCIATION = 1155;
export const ERROR_DDE_FAIL = 1156;
export const ERROR_DLL_NOT_FOUND = 1157;
export const ERROR_NO_MORE_USER_HANDLES = 1158;
export const ERROR_MESSAGE_SYNC_ONLY = 1159;
export const ERROR_SOURCE_ELEMENT_EMPTY = 1160;
export const ERROR_DESTINATION_ELEMENT_FULL = 1161;
export const ERROR_ILLEGAL_ELEMENT_ADDRESS = 1162;
export const ERROR_MAGAZINE_NOT_PRESENT = 1163;
export const ERROR_DEVICE_REINITIALIZATION_NEEDED = 1164;
export const ERROR_DEVICE_REQUIRES_CLEANING = 1165;
export const ERROR_DEVICE_DOOR_OPEN = 1166;
export const ERROR_DEVICE_NOT_CONNECTED = 1167;
export const ERROR_NOT_FOUND = 1168;
export const ERROR_NO_MATCH = 1169;
export const ERROR_SET_NOT_FOUND = 1170;
export const ERROR_POINT_NOT_FOUND = 1171;
export const ERROR_NO_TRACKING_SERVICE = 1172;
export const ERROR_NO_VOLUME_ID = 1173;
export const ERROR_UNABLE_TO_REMOVE_REPLACED = 1175;
export const ERROR_UNABLE_TO_MOVE_REPLACEMENT = 1176;
export const ERROR_UNABLE_TO_MOVE_REPLACEMENT_2 = 1177;
export const ERROR_JOURNAL_DELETE_IN_PROGRESS = 1178;
export const ERROR_JOURNAL_NOT_ACTIVE = 1179;
export const ERROR_POTENTIAL_FILE_FOUND = 1180;
export const ERROR_JOURNAL_ENTRY_DELETED = 1181;
export const ERROR_BAD_DEVICE = 1200;
export const ERROR_CONNECTION_UNAVAIL = 1201;
export const ERROR_DEVICE_ALREADY_REMEMBERED = 1202;
export const ERROR_NO_NET_OR_BAD_PATH = 1203;
export const ERROR_BAD_PROVIDER = 1204;
export const ERROR_CANNOT_OPEN_PROFILE = 1205;
export const ERROR_BAD_PROFILE = 1206;
export const ERROR_NOT_CONTAINER = 1207;
export const ERROR_EXTENDED_ERROR = 1208;
export const ERROR_INVALID_GROUPNAME = 1209;
export const ERROR_INVALID_COMPUTERNAME = 1210;
export const ERROR_INVALID_EVENTNAME = 1211;
export const ERROR_INVALID_DOMAINNAME = 1212;
export const ERROR_INVALID_SERVICENAME = 1213;
export const ERROR_INVALID_NETNAME = 1214;
export const ERROR_INVALID_SHARENAME = 1215;
export const ERROR_INVALID_PASSWORDNAME = 1216;
export const ERROR_INVALID_MESSAGENAME = 1217;
export const ERROR_INVALID_MESSAGEDEST = 1218;
export const ERROR_SESSION_CREDENTIAL_CONFLICT = 1219;
export const ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = 1220;
export const ERROR_DUP_DOMAINNAME = 1221;
export const ERROR_NO_NETWORK = 1222;
export const ERROR_CANCELLED = 1223;
export const ERROR_USER_MAPPED_FILE = 1224;
export const ERROR_CONNECTION_REFUSED = 1225;
export const ERROR_GRACEFUL_DISCONNECT = 1226;
export const ERROR_ADDRESS_ALREADY_ASSOCIATED = 1227;
export const ERROR_ADDRESS_NOT_ASSOCIATED = 1228;
export const ERROR_CONNECTION_INVALID = 1229;
export const ERROR_CONNECTION_ACTIVE = 1230;
export const ERROR_NETWORK_UNREACHABLE = 1231;
export const ERROR_HOST_UNREACHABLE = 1232;
export const ERROR_PROTOCOL_UNREACHABLE = 1233;
export const ERROR_PORT_UNREACHABLE = 1234;
export const ERROR_REQUEST_ABORTED = 1235;
export const ERROR_CONNECTION_ABORTED = 1236;
export const ERROR_RETRY = 1237;
export const ERROR_CONNECTION_COUNT_LIMIT = 1238;
export const ERROR_LOGIN_TIME_RESTRICTION = 1239;
export const ERROR_LOGIN_WKSTA_RESTRICTION = 1240;
export const ERROR_INCORRECT_ADDRESS = 1241;
export const ERROR_ALREADY_REGISTERED = 1242;
export const ERROR_SERVICE_NOT_FOUND = 1243;
export const ERROR_NOT_AUTHENTICATED = 1244;
export const ERROR_NOT_LOGGED_ON = 1245;
export const ERROR_CONTINUE = 1246;
export const ERROR_ALREADY_INITIALIZED = 1247;
export const ERROR_NO_MORE_DEVICES = 1248;
export const ERROR_NO_SUCH_SITE = 1249;
export const ERROR_DOMAIN_CONTROLLER_EXISTS = 1250;
export const ERROR_ONLY_IF_CONNECTED = 1251;
export const ERROR_OVERRIDE_NOCHANGES = 1252;
export const ERROR_BAD_USER_PROFILE = 1253;
export const ERROR_NOT_SUPPORTED_ON_SBS = 1254;
export const ERROR_SERVER_SHUTDOWN_IN_PROGRESS = 1255;
export const ERROR_HOST_DOWN = 1256;
export const ERROR_NON_ACCOUNT_SID = 1257;
export const ERROR_NON_DOMAIN_SID = 1258;
export const ERROR_APPHELP_BLOCK = 1259;
export const ERROR_ACCESS_DISABLED_BY_POLICY = 1260;
export const ERROR_REG_NAT_CONSUMPTION = 1261;
export const ERROR_CSCSHARE_OFFLINE = 1262;
export const ERROR_PKINIT_FAILURE = 1263;
export const ERROR_SMARTCARD_SUBSYSTEM_FAILURE = 1264;
export const ERROR_DOWNGRADE_DETECTED = 1265;
export const ERROR_MACHINE_LOCKED = 1271;
export const ERROR_CALLBACK_SUPPLIED_INVALID_DATA = 1273;
export const ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED = 1274;
export const ERROR_DRIVER_BLOCKED = 1275;
export const ERROR_INVALID_IMPORT_OF_NON_DLL = 1276;
export const ERROR_ACCESS_DISABLED_WEBBLADE = 1277;
export const ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER = 1278;
export const ERROR_RECOVERY_FAILURE = 1279;
export const ERROR_ALREADY_FIBER = 1280;
export const ERROR_ALREADY_THREAD = 1281;
export const ERROR_STACK_BUFFER_OVERRUN = 1282;
export const ERROR_PARAMETER_QUOTA_EXCEEDED = 1283;
export const ERROR_DEBUGGER_INACTIVE = 1284;
export const ERROR_DELAY_LOAD_FAILED = 1285;
export const ERROR_VDM_DISALLOWED = 1286;
export const ERROR_UNIDENTIFIED_ERROR = 1287;
export const ERROR_NOT_ALL_ASSIGNED = 1300;
export const ERROR_SOME_NOT_MAPPED = 1301;
export const ERROR_NO_QUOTAS_FOR_ACCOUNT = 1302;
export const ERROR_LOCAL_USER_SESSION_KEY = 1303;
export const ERROR_NULL_LM_PASSWORD = 1304;
export const ERROR_UNKNOWN_REVISION = 1305;
export const ERROR_REVISION_MISMATCH = 1306;
export const ERROR_INVALID_OWNER = 1307;
export const ERROR_INVALID_PRIMARY_GROUP = 1308;
export const ERROR_NO_IMPERSONATION_TOKEN = 1309;
export const ERROR_CANT_DISABLE_MANDATORY = 1310;
export const ERROR_NO_LOGON_SERVERS = 1311;
export const ERROR_NO_SUCH_LOGON_SESSION = 1312;
export const ERROR_NO_SUCH_PRIVILEGE = 1313;
export const ERROR_PRIVILEGE_NOT_HELD = 1314;
export const ERROR_INVALID_ACCOUNT_NAME = 1315;
export const ERROR_USER_EXISTS = 1316;
export const ERROR_NO_SUCH_USER = 1317;
export const ERROR_GROUP_EXISTS = 1318;
export const ERROR_NO_SUCH_GROUP = 1319;
export const ERROR_MEMBER_IN_GROUP = 1320;
export const ERROR_MEMBER_NOT_IN_GROUP = 1321;
export const ERROR_LAST_ADMIN = 1322;
export const ERROR_WRONG_PASSWORD = 1323;
export const ERROR_ILL_FORMED_PASSWORD = 1324;
export const ERROR_PASSWORD_RESTRICTION = 1325;
export const ERROR_LOGON_FAILURE = 1326;
export const ERROR_ACCOUNT_RESTRICTION = 1327;
export const ERROR_INVALID_LOGON_HOURS = 1328;
export const ERROR_INVALID_WORKSTATION = 1329;
export const ERROR_PASSWORD_EXPIRED = 1330;
export const ERROR_ACCOUNT_DISABLED = 1331;
export const ERROR_NONE_MAPPED = 1332;
export const ERROR_TOO_MANY_LUIDS_REQUESTED = 1333;
export const ERROR_LUIDS_EXHAUSTED = 1334;
export const ERROR_INVALID_SUB_AUTHORITY = 1335;
export const ERROR_INVALID_ACL = 1336;
export const ERROR_INVALID_SID = 1337;
export const ERROR_INVALID_SECURITY_DESCR = 1338;
export const ERROR_BAD_INHERITANCE_ACL = 1340;
export const ERROR_SERVER_DISABLED = 1341;
export const ERROR_SERVER_NOT_DISABLED = 1342;
export const ERROR_INVALID_ID_AUTHORITY = 1343;
export const ERROR_ALLOTTED_SPACE_EXCEEDED = 1344;
export const ERROR_INVALID_GROUP_ATTRIBUTES = 1345;
export const ERROR_BAD_IMPERSONATION_LEVEL = 1346;
export const ERROR_CANT_OPEN_ANONYMOUS = 1347;
export const ERROR_BAD_VALIDATION_CLASS = 1348;
export const ERROR_BAD_TOKEN_TYPE = 1349;
export const ERROR_NO_SECURITY_ON_OBJECT = 1350;
export const ERROR_CANT_ACCESS_DOMAIN_INFO = 1351;
export const ERROR_INVALID_SERVER_STATE = 1352;
export const ERROR_INVALID_DOMAIN_STATE = 1353;
export const ERROR_INVALID_DOMAIN_ROLE = 1354;
export const ERROR_NO_SUCH_DOMAIN = 1355;
export const ERROR_DOMAIN_EXISTS = 1356;
export const ERROR_DOMAIN_LIMIT_EXCEEDED = 1357;
export const ERROR_INTERNAL_DB_CORRUPTION = 1358;
export const ERROR_INTERNAL_ERROR = 1359;
export const ERROR_GENERIC_NOT_MAPPED = 1360;
export const ERROR_BAD_DESCRIPTOR_FORMAT = 1361;
export const ERROR_NOT_LOGON_PROCESS = 1362;
export const ERROR_LOGON_SESSION_EXISTS = 1363;
export const ERROR_NO_SUCH_PACKAGE = 1364;
export const ERROR_BAD_LOGON_SESSION_STATE = 1365;
export const ERROR_LOGON_SESSION_COLLISION = 1366;
export const ERROR_INVALID_LOGON_TYPE = 1367;
export const ERROR_CANNOT_IMPERSONATE = 1368;
export const ERROR_RXACT_INVALID_STATE = 1369;
export const ERROR_RXACT_COMMIT_FAILURE = 1370;
export const ERROR_SPECIAL_ACCOUNT = 1371;
export const ERROR_SPECIAL_GROUP = 1372;
export const ERROR_SPECIAL_USER = 1373;
export const ERROR_MEMBERS_PRIMARY_GROUP = 1374;
export const ERROR_TOKEN_ALREADY_IN_USE = 1375;
export const ERROR_NO_SUCH_ALIAS = 1376;
export const ERROR_MEMBER_NOT_IN_ALIAS = 1377;
export const ERROR_MEMBER_IN_ALIAS = 1378;
export const ERROR_ALIAS_EXISTS = 1379;
export const ERROR_LOGON_NOT_GRANTED = 1380;
export const ERROR_TOO_MANY_SECRETS = 1381;
export const ERROR_SECRET_TOO_LONG = 1382;
export const ERROR_INTERNAL_DB_ERROR = 1383;
export const ERROR_TOO_MANY_CONTEXT_IDS = 1384;
export const ERROR_LOGON_TYPE_NOT_GRANTED = 1385;
export const ERROR_NT_CROSS_ENCRYPTION_REQUIRED = 1386;
export const ERROR_NO_SUCH_MEMBER = 1387;
export const ERROR_INVALID_MEMBER = 1388;
export const ERROR_TOO_MANY_SIDS = 1389;
export const ERROR_LM_CROSS_ENCRYPTION_REQUIRED = 1390;
export const ERROR_NO_INHERITANCE = 1391;
export const ERROR_FILE_CORRUPT = 1392;
export const ERROR_DISK_CORRUPT = 1393;
export const ERROR_NO_USER_SESSION_KEY = 1394;
export const ERROR_LICENSE_QUOTA_EXCEEDED = 1395;
export const ERROR_WRONG_TARGET_NAME = 1396;
export const ERROR_MUTUAL_AUTH_FAILED = 1397;
export const ERROR_TIME_SKEW = 1398;
export const ERROR_CURRENT_DOMAIN_NOT_ALLOWED = 1399;
export const ERROR_INVALID_WINDOW_HANDLE = 1400;
export const ERROR_INVALID_MENU_HANDLE = 1401;
export const ERROR_INVALID_CURSOR_HANDLE = 1402;
export const ERROR_INVALID_ACCEL_HANDLE = 1403;
export const ERROR_INVALID_HOOK_HANDLE = 1404;
export const ERROR_INVALID_DWP_HANDLE = 1405;
export const ERROR_TLW_WITH_WSCHILD = 1406;
export const ERROR_CANNOT_FIND_WND_CLASS = 1407;
export const ERROR_WINDOW_OF_OTHER_THREAD = 1408;
export const ERROR_HOTKEY_ALREADY_REGISTERED = 1409;
export const ERROR_CLASS_ALREADY_EXISTS = 1410;
export const ERROR_CLASS_DOES_NOT_EXIST = 1411;
export const ERROR_CLASS_HAS_WINDOWS = 1412;
export const ERROR_INVALID_INDEX = 1413;
export const ERROR_INVALID_ICON_HANDLE = 1414;
export const ERROR_PRIVATE_DIALOG_INDEX = 1415;
export const ERROR_LISTBOX_ID_NOT_FOUND = 1416;
export const ERROR_NO_WILDCARD_CHARACTERS = 1417;
export const ERROR_CLIPBOARD_NOT_OPEN = 1418;
export const ERROR_HOTKEY_NOT_REGISTERED = 1419;
export const ERROR_WINDOW_NOT_DIALOG = 1420;
export const ERROR_CONTROL_ID_NOT_FOUND = 1421;
export const ERROR_INVALID_COMBOBOX_MESSAGE = 1422;
export const ERROR_WINDOW_NOT_COMBOBOX = 1423;
export const ERROR_INVALID_EDIT_HEIGHT = 1424;
export const ERROR_DC_NOT_FOUND = 1425;
export const ERROR_INVALID_HOOK_FILTER = 1426;
export const ERROR_INVALID_FILTER_PROC = 1427;
export const ERROR_HOOK_NEEDS_HMOD = 1428;
export const ERROR_GLOBAL_ONLY_HOOK = 1429;
export const ERROR_JOURNAL_HOOK_SET = 1430;
export const ERROR_HOOK_NOT_INSTALLED = 1431;
export const ERROR_INVALID_LB_MESSAGE = 1432;
export const ERROR_SETCOUNT_ON_BAD_LB = 1433;
export const ERROR_LB_WITHOUT_TABSTOPS = 1434;
export const ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = 1435;
export const ERROR_CHILD_WINDOW_MENU = 1436;
export const ERROR_NO_SYSTEM_MENU = 1437;
export const ERROR_INVALID_MSGBOX_STYLE = 1438;
export const ERROR_INVALID_SPI_VALUE = 1439;
export const ERROR_SCREEN_ALREADY_LOCKED = 1440;
export const ERROR_HWNDS_HAVE_DIFF_PARENT = 1441;
export const ERROR_NOT_CHILD_WINDOW = 1442;
export const ERROR_INVALID_GW_COMMAND = 1443;
export const ERROR_INVALID_THREAD_ID = 1444;
export const ERROR_NON_MDICHILD_WINDOW = 1445;
export const ERROR_POPUP_ALREADY_ACTIVE = 1446;
export const ERROR_NO_SCROLLBARS = 1447;
export const ERROR_INVALID_SCROLLBAR_RANGE = 1448;
export const ERROR_INVALID_SHOWWIN_COMMAND = 1449;
export const ERROR_NO_SYSTEM_RESOURCES = 1450;
export const ERROR_NONPAGED_SYSTEM_RESOURCES = 1451;
export const ERROR_PAGED_SYSTEM_RESOURCES = 1452;
export const ERROR_WORKING_SET_QUOTA = 1453;
export const ERROR_PAGEFILE_QUOTA = 1454;
export const ERROR_COMMITMENT_LIMIT = 1455;
export const ERROR_MENU_ITEM_NOT_FOUND = 1456;
export const ERROR_INVALID_KEYBOARD_HANDLE = 1457;
export const ERROR_HOOK_TYPE_NOT_ALLOWED = 1458;
export const ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION = 1459;
export const ERROR_TIMEOUT = 1460;
export const ERROR_INVALID_MONITOR_HANDLE = 1461;
export const ERROR_INCORRECT_SIZE = 1462;
export const ERROR_EVENTLOG_FILE_CORRUPT = 1500;
export const ERROR_EVENTLOG_CANT_START = 1501;
export const ERROR_LOG_FILE_FULL = 1502;
export const ERROR_EVENTLOG_FILE_CHANGED = 1503;
export const ERROR_INSTALL_SERVICE_FAILURE = 1601;
export const ERROR_INSTALL_USEREXIT = 1602;
export const ERROR_INSTALL_FAILURE = 1603;
export const ERROR_INSTALL_SUSPEND = 1604;
export const ERROR_UNKNOWN_PRODUCT = 1605;
export const ERROR_UNKNOWN_FEATURE = 1606;
export const ERROR_UNKNOWN_COMPONENT = 1607;
export const ERROR_UNKNOWN_PROPERTY = 1608;
export const ERROR_INVALID_HANDLE_STATE = 1609;
export const ERROR_BAD_CONFIGURATION = 1610;
export const ERROR_INDEX_ABSENT = 1611;
export const ERROR_INSTALL_SOURCE_ABSENT = 1612;
export const ERROR_INSTALL_PACKAGE_VERSION = 1613;
export const ERROR_PRODUCT_UNINSTALLED = 1614;
export const ERROR_BAD_QUERY_SYNTAX = 1615;
export const ERROR_INVALID_FIELD = 1616;
export const ERROR_DEVICE_REMOVED = 1617;
export const ERROR_INSTALL_ALREADY_RUNNING = 1618;
export const ERROR_INSTALL_PACKAGE_OPEN_FAILED = 1619;
export const ERROR_INSTALL_PACKAGE_INVALID = 1620;
export const ERROR_INSTALL_UI_FAILURE = 1621;
export const ERROR_INSTALL_LOG_FAILURE = 1622;
export const ERROR_INSTALL_LANGUAGE_UNSUPPORTED = 1623;
export const ERROR_INSTALL_TRANSFORM_FAILURE = 1624;
export const ERROR_INSTALL_PACKAGE_REJECTED = 1625;
export const ERROR_FUNCTION_NOT_CALLED = 1626;
export const ERROR_FUNCTION_FAILED = 1627;
export const ERROR_INVALID_TABLE = 1628;
export const ERROR_DATATYPE_MISMATCH = 1629;
export const ERROR_UNSUPPORTED_TYPE = 1630;
export const ERROR_CREATE_FAILED = 1631;
export const ERROR_INSTALL_TEMP_UNWRITABLE = 1632;
export const ERROR_INSTALL_PLATFORM_UNSUPPORTED = 1633;
export const ERROR_INSTALL_NOTUSED = 1634;
export const ERROR_PATCH_PACKAGE_OPEN_FAILED = 1635;
export const ERROR_PATCH_PACKAGE_INVALID = 1636;
export const ERROR_PATCH_PACKAGE_UNSUPPORTED = 1637;
export const ERROR_PRODUCT_VERSION = 1638;
export const ERROR_INVALID_COMMAND_LINE = 1639;
export const ERROR_INSTALL_REMOTE_DISALLOWED = 1640;
export const ERROR_SUCCESS_REBOOT_INITIATED = 1641;
export const ERROR_PATCH_TARGET_NOT_FOUND = 1642;
export const ERROR_PATCH_PACKAGE_REJECTED = 1643;
export const ERROR_INSTALL_TRANSFORM_REJECTED = 1644;
export const ERROR_INSTALL_REMOTE_PROHIBITED = 1645;
export const RPC_S_INVALID_STRING_BINDING = 1700;
export const RPC_S_WRONG_KIND_OF_BINDING = 1701;
export const RPC_S_INVALID_BINDING = 1702;
export const RPC_S_PROTSEQ_NOT_SUPPORTED = 1703;
export const RPC_S_INVALID_RPC_PROTSEQ = 1704;
export const RPC_S_INVALID_STRING_UUID = 1705;
export const RPC_S_INVALID_ENDPOINT_FORMAT = 1706;
export const RPC_S_INVALID_NET_ADDR = 1707;
export const RPC_S_NO_ENDPOINT_FOUND = 1708;
export const RPC_S_INVALID_TIMEOUT = 1709;
export const RPC_S_OBJECT_NOT_FOUND = 1710;
export const RPC_S_ALREADY_REGISTERED = 1711;
export const RPC_S_TYPE_ALREADY_REGISTERED = 1712;
export const RPC_S_ALREADY_LISTENING = 1713;
export const RPC_S_NO_PROTSEQS_REGISTERED = 1714;
export const RPC_S_NOT_LISTENING = 1715;
export const RPC_S_UNKNOWN_MGR_TYPE = 1716;
export const RPC_S_UNKNOWN_IF = 1717;
export const RPC_S_NO_BINDINGS = 1718;
export const RPC_S_NO_PROTSEQS = 1719;
export const RPC_S_CANT_CREATE_ENDPOINT = 1720;
export const RPC_S_OUT_OF_RESOURCES = 1721;
export const RPC_S_SERVER_UNAVAILABLE = 1722;
export const RPC_S_SERVER_TOO_BUSY = 1723;
export const RPC_S_INVALID_NETWORK_OPTIONS = 1724;
export const RPC_S_NO_CALL_ACTIVE = 1725;
export const RPC_S_CALL_FAILED = 1726;
export const RPC_S_CALL_FAILED_DNE = 1727;
export const RPC_S_PROTOCOL_ERROR = 1728;
export const RPC_S_UNSUPPORTED_TRANS_SYN = 1730;
export const RPC_S_UNSUPPORTED_TYPE = 1732;
export const RPC_S_INVALID_TAG = 1733;
export const RPC_S_INVALID_BOUND = 1734;
export const RPC_S_NO_ENTRY_NAME = 1735;
export const RPC_S_INVALID_NAME_SYNTAX = 1736;
export const RPC_S_UNSUPPORTED_NAME_SYNTAX = 1737;
export const RPC_S_UUID_NO_ADDRESS = 1739;
export const RPC_S_DUPLICATE_ENDPOINT = 1740;
export const RPC_S_UNKNOWN_AUTHN_TYPE = 1741;
export const RPC_S_MAX_CALLS_TOO_SMALL = 1742;
export const RPC_S_STRING_TOO_LONG = 1743;
export const RPC_S_PROTSEQ_NOT_FOUND = 1744;
export const RPC_S_PROCNUM_OUT_OF_RANGE = 1745;
export const RPC_S_BINDING_HAS_NO_AUTH = 1746;
export const RPC_S_UNKNOWN_AUTHN_SERVICE = 1747;
export const RPC_S_UNKNOWN_AUTHN_LEVEL = 1748;
export const RPC_S_INVALID_AUTH_IDENTITY = 1749;
export const RPC_S_UNKNOWN_AUTHZ_SERVICE = 1750;
export const EPT_S_INVALID_ENTRY = 1751;
export const EPT_S_CANT_PERFORM_OP = 1752;
export const EPT_S_NOT_REGISTERED = 1753;
export const RPC_S_NOTHING_TO_EXPORT = 1754;
export const RPC_S_INCOMPLETE_NAME = 1755;
export const RPC_S_INVALID_VERS_OPTION = 1756;
export const RPC_S_NO_MORE_MEMBERS = 1757;
export const RPC_S_NOT_ALL_OBJS_UNEXPORTED = 1758;
export const RPC_S_INTERFACE_NOT_FOUND = 1759;
export const RPC_S_ENTRY_ALREADY_EXISTS = 1760;
export const RPC_S_ENTRY_NOT_FOUND = 1761;
export const RPC_S_NAME_SERVICE_UNAVAILABLE = 1762;
export const RPC_S_INVALID_NAF_ID = 1763;
export const RPC_S_CANNOT_SUPPORT = 1764;
export const RPC_S_NO_CONTEXT_AVAILABLE = 1765;
export const RPC_S_INTERNAL_ERROR = 1766;
export const RPC_S_ZERO_DIVIDE = 1767;
export const RPC_S_ADDRESS_ERROR = 1768;
export const RPC_S_FP_DIV_ZERO = 1769;
export const RPC_S_FP_UNDERFLOW = 1770;
export const RPC_S_FP_OVERFLOW = 1771;
export const RPC_X_NO_MORE_ENTRIES = 1772;
export const RPC_X_SS_CHAR_TRANS_OPEN_FAIL = 1773;
export const RPC_X_SS_CHAR_TRANS_SHORT_FILE = 1774;
export const RPC_X_SS_IN_NULL_CONTEXT = 1775;
export const RPC_X_SS_CONTEXT_DAMAGED = 1777;
export const RPC_X_SS_HANDLES_MISMATCH = 1778;
export const RPC_X_SS_CANNOT_GET_CALL_HANDLE = 1779;
export const RPC_X_NULL_REF_POINTER = 1780;
export const RPC_X_ENUM_VALUE_OUT_OF_RANGE = 1781;
export const RPC_X_BYTE_COUNT_TOO_SMALL = 1782;
export const RPC_X_BAD_STUB_DATA = 1783;
export const ERROR_INVALID_USER_BUFFER = 1784;
export const ERROR_UNRECOGNIZED_MEDIA = 1785;
export const ERROR_NO_TRUST_LSA_SECRET = 1786;
export const ERROR_NO_TRUST_SAM_ACCOUNT = 1787;
export const ERROR_TRUSTED_DOMAIN_FAILURE = 1788;
export const ERROR_TRUSTED_RELATIONSHIP_FAILURE = 1789;
export const ERROR_TRUST_FAILURE = 1790;
export const RPC_S_CALL_IN_PROGRESS = 1791;
export const ERROR_NETLOGON_NOT_STARTED = 1792;
export const ERROR_ACCOUNT_EXPIRED = 1793;
export const ERROR_REDIRECTOR_HAS_OPEN_HANDLES = 1794;
export const ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = 1795;
export const ERROR_UNKNOWN_PORT = 1796;
export const ERROR_UNKNOWN_PRINTER_DRIVER = 1797;
export const ERROR_UNKNOWN_PRINTPROCESSOR = 1798;
export const ERROR_INVALID_SEPARATOR_FILE = 1799;
export const ERROR_INVALID_PRIORITY = 1800;
export const ERROR_INVALID_PRINTER_NAME = 1801;
export const ERROR_PRINTER_ALREADY_EXISTS = 1802;
export const ERROR_INVALID_PRINTER_COMMAND = 1803;
export const ERROR_INVALID_DATATYPE = 1804;
export const ERROR_INVALID_ENVIRONMENT = 1805;
export const RPC_S_NO_MORE_BINDINGS = 1806;
export const ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = 1807;
export const ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = 1808;
export const ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = 1809;
export const ERROR_DOMAIN_TRUST_INCONSISTENT = 1810;
export const ERROR_SERVER_HAS_OPEN_HANDLES = 1811;
export const ERROR_RESOURCE_DATA_NOT_FOUND = 1812;
export const ERROR_RESOURCE_TYPE_NOT_FOUND = 1813;
export const ERROR_RESOURCE_NAME_NOT_FOUND = 1814;
export const ERROR_RESOURCE_LANG_NOT_FOUND = 1815;
export const ERROR_NOT_ENOUGH_QUOTA = 1816;
export const RPC_S_NO_INTERFACES = 1817;
export const RPC_S_CALL_CANCELLED = 1818;
export const RPC_S_BINDING_INCOMPLETE = 1819;
export const RPC_S_COMM_FAILURE = 1820;
export const RPC_S_UNSUPPORTED_AUTHN_LEVEL = 1821;
export const RPC_S_NO_PRINC_NAME = 1822;
export const RPC_S_NOT_RPC_ERROR = 1823;
export const RPC_S_UUID_LOCAL_ONLY = 1824;
export const RPC_S_SEC_PKG_ERROR = 1825;
export const RPC_S_NOT_CANCELLED = 1826;
export const RPC_X_INVALID_ES_ACTION = 1827;
export const RPC_X_WRONG_ES_VERSION = 1828;
export const RPC_X_WRONG_STUB_VERSION = 1829;
export const RPC_X_INVALID_PIPE_OBJECT = 1830;
export const RPC_X_WRONG_PIPE_ORDER = 1831;
export const RPC_X_WRONG_PIPE_VERSION = 1832;
export const RPC_S_GROUP_MEMBER_NOT_FOUND = 1898;
export const EPT_S_CANT_CREATE = 1899;
export const RPC_S_INVALID_OBJECT = 1900;
export const ERROR_INVALID_TIME = 1901;
export const ERROR_INVALID_FORM_NAME = 1902;
export const ERROR_INVALID_FORM_SIZE = 1903;
export const ERROR_ALREADY_WAITING = 1904;
export const ERROR_PRINTER_DELETED = 1905;
export const ERROR_INVALID_PRINTER_STATE = 1906;
export const ERROR_PASSWORD_MUST_CHANGE = 1907;
export const ERROR_DOMAIN_CONTROLLER_NOT_FOUND = 1908;
export const ERROR_ACCOUNT_LOCKED_OUT = 1909;
export const OR_INVALID_OXID = 1910;
export const OR_INVALID_OID = 1911;
export const OR_INVALID_SET = 1912;
export const RPC_S_SEND_INCOMPLETE = 1913;
export const RPC_S_INVALID_ASYNC_HANDLE = 1914;
export const RPC_S_INVALID_ASYNC_CALL = 1915;
export const RPC_X_PIPE_CLOSED = 1916;
export const RPC_X_PIPE_DISCIPLINE_ERROR = 1917;
export const RPC_X_PIPE_EMPTY = 1918;
export const ERROR_NO_SITENAME = 1919;
export const ERROR_CANT_ACCESS_FILE = 1920;
export const ERROR_CANT_RESOLVE_FILENAME = 1921;
export const RPC_S_ENTRY_TYPE_MISMATCH = 1922;
export const RPC_S_NOT_ALL_OBJS_EXPORTED = 1923;
export const RPC_S_INTERFACE_NOT_EXPORTED = 1924;
export const RPC_S_PROFILE_NOT_ADDED = 1925;
export const RPC_S_PRF_ELT_NOT_ADDED = 1926;
export const RPC_S_PRF_ELT_NOT_REMOVED = 1927;
export const RPC_S_GRP_ELT_NOT_ADDED = 1928;
export const RPC_S_GRP_ELT_NOT_REMOVED = 1929;
export const ERROR_KM_DRIVER_BLOCKED = 1930;
export const ERROR_CONTEXT_EXPIRED = 1931;
export const ERROR_PER_USER_TRUST_QUOTA_EXCEEDED = 1932;
export const ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED = 1933;
export const ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED = 1934;
export const ERROR_AUTHENTICATION_FIREWALL_FAILED = 1935;
export const ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED = 1936;
export const ERROR_INVALID_PIXEL_FORMAT = 2000;
export const ERROR_BAD_DRIVER = 2001;
export const ERROR_INVALID_WINDOW_STYLE = 2002;
export const ERROR_METAFILE_NOT_SUPPORTED = 2003;
export const ERROR_TRANSFORM_NOT_SUPPORTED = 2004;
export const ERROR_CLIPPING_NOT_SUPPORTED = 2005;
export const ERROR_INVALID_CMM = 2010;
export const ERROR_INVALID_PROFILE = 2011;
export const ERROR_TAG_NOT_FOUND = 2012;
export const ERROR_TAG_NOT_PRESENT = 2013;
export const ERROR_DUPLICATE_TAG = 2014;
export const ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE = 2015;
export const ERROR_PROFILE_NOT_FOUND = 2016;
export const ERROR_INVALID_COLORSPACE = 2017;
export const ERROR_ICM_NOT_ENABLED = 2018;
export const ERROR_DELETING_ICM_XFORM = 2019;
export const ERROR_INVALID_TRANSFORM = 2020;
export const ERROR_COLORSPACE_MISMATCH = 2021;
export const ERROR_INVALID_COLORINDEX = 2022;
export const ERROR_CONNECTED_OTHER_PASSWORD = 2108;
export const ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT = 2109;
export const ERROR_BAD_USERNAME = 2202;
export const ERROR_NOT_CONNECTED = 2250;
export const ERROR_OPEN_FILES = 2401;
export const ERROR_ACTIVE_CONNECTIONS = 2402;
export const ERROR_DEVICE_IN_USE = 2404;
export const ERROR_UNKNOWN_PRINT_MONITOR = 3000;
export const ERROR_PRINTER_DRIVER_IN_USE = 3001;
export const ERROR_SPOOL_FILE_NOT_FOUND = 3002;
export const ERROR_SPL_NO_STARTDOC = 3003;
export const ERROR_SPL_NO_ADDJOB = 3004;
export const ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = 3005;
export const ERROR_PRINT_MONITOR_ALREADY_INSTALLED = 3006;
export const ERROR_INVALID_PRINT_MONITOR = 3007;
export const ERROR_PRINT_MONITOR_IN_USE = 3008;
export const ERROR_PRINTER_HAS_JOBS_QUEUED = 3009;
export const ERROR_SUCCESS_REBOOT_REQUIRED = 3010;
export const ERROR_SUCCESS_RESTART_REQUIRED = 3011;
export const ERROR_PRINTER_NOT_FOUND = 3012;
export const ERROR_PRINTER_DRIVER_WARNED = 3013;
export const ERROR_PRINTER_DRIVER_BLOCKED = 3014;
export const ERROR_WINS_INTERNAL = 4000;
export const ERROR_CAN_NOT_DEL_LOCAL_WINS = 4001;
export const ERROR_STATIC_INIT = 4002;
export const ERROR_INC_BACKUP = 4003;
export const ERROR_FULL_BACKUP = 4004;
export const ERROR_REC_NON_EXISTENT = 4005;
export const ERROR_RPL_NOT_ALLOWED = 4006;
export const ERROR_DHCP_ADDRESS_CONFLICT = 4100;
export const ERROR_WMI_GUID_NOT_FOUND = 4200;
export const ERROR_WMI_INSTANCE_NOT_FOUND = 4201;
export const ERROR_WMI_ITEMID_NOT_FOUND = 4202;
export const ERROR_WMI_TRY_AGAIN = 4203;
export const ERROR_WMI_DP_NOT_FOUND = 4204;
export const ERROR_WMI_UNRESOLVED_INSTANCE_REF = 4205;
export const ERROR_WMI_ALREADY_ENABLED = 4206;
export const ERROR_WMI_GUID_DISCONNECTED = 4207;
export const ERROR_WMI_SERVER_UNAVAILABLE = 4208;
export const ERROR_WMI_DP_FAILED = 4209;
export const ERROR_WMI_INVALID_MOF = 4210;
export const ERROR_WMI_INVALID_REGINFO = 4211;
export const ERROR_WMI_ALREADY_DISABLED = 4212;
export const ERROR_WMI_READ_ONLY = 4213;
export const ERROR_WMI_SET_FAILURE = 4214;
export const ERROR_INVALID_MEDIA = 4300;
export const ERROR_INVALID_LIBRARY = 4301;
export const ERROR_INVALID_MEDIA_POOL = 4302;
export const ERROR_DRIVE_MEDIA_MISMATCH = 4303;
export const ERROR_MEDIA_OFFLINE = 4304;
export const ERROR_LIBRARY_OFFLINE = 4305;
export const ERROR_EMPTY = 4306;
export const ERROR_NOT_EMPTY = 4307;
export const ERROR_MEDIA_UNAVAILABLE = 4308;
export const ERROR_RESOURCE_DISABLED = 4309;
export const ERROR_INVALID_CLEANER = 4310;
export const ERROR_UNABLE_TO_CLEAN = 4311;
export const ERROR_OBJECT_NOT_FOUND = 4312;
export const ERROR_DATABASE_FAILURE = 4313;
export const ERROR_DATABASE_FULL = 4314;
export const ERROR_MEDIA_INCOMPATIBLE = 4315;
export const ERROR_RESOURCE_NOT_PRESENT = 4316;
export const ERROR_INVALID_OPERATION = 4317;
export const ERROR_MEDIA_NOT_AVAILABLE = 4318;
export const ERROR_DEVICE_NOT_AVAILABLE = 4319;
export const ERROR_REQUEST_REFUSED = 4320;
export const ERROR_INVALID_DRIVE_OBJECT = 4321;
export const ERROR_LIBRARY_FULL = 4322;
export const ERROR_MEDIUM_NOT_ACCESSIBLE = 4323;
export const ERROR_UNABLE_TO_LOAD_MEDIUM = 4324;
export const ERROR_UNABLE_TO_INVENTORY_DRIVE = 4325;
export const ERROR_UNABLE_TO_INVENTORY_SLOT = 4326;
export const ERROR_UNABLE_TO_INVENTORY_TRANSPORT = 4327;
export const ERROR_TRANSPORT_FULL = 4328;
export const ERROR_CONTROLLING_IEPORT = 4329;
export const ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA = 4330;
export const ERROR_CLEANER_SLOT_SET = 4331;
export const ERROR_CLEANER_SLOT_NOT_SET = 4332;
export const ERROR_CLEANER_CARTRIDGE_SPENT = 4333;
export const ERROR_UNEXPECTED_OMID = 4334;
export const ERROR_CANT_DELETE_LAST_ITEM = 4335;
export const ERROR_MESSAGE_EXCEEDS_MAX_SIZE = 4336;
export const ERROR_VOLUME_CONTAINS_SYS_FILES = 4337;
export const ERROR_INDIGENOUS_TYPE = 4338;
export const ERROR_NO_SUPPORTING_DRIVES = 4339;
export const ERROR_CLEANER_CARTRIDGE_INSTALLED = 4340;
export const ERROR_IEPORT_FULL = 4341;
export const ERROR_FILE_OFFLINE = 4350;
export const ERROR_REMOTE_STORAGE_NOT_ACTIVE = 4351;
export const ERROR_REMOTE_STORAGE_MEDIA_ERROR = 4352;
export const ERROR_NOT_A_REPARSE_POINT = 4390;
export const ERROR_REPARSE_ATTRIBUTE_CONFLICT = 4391;
export const ERROR_INVALID_REPARSE_DATA = 4392;
export const ERROR_REPARSE_TAG_INVALID = 4393;
export const ERROR_REPARSE_TAG_MISMATCH = 4394;
export const ERROR_VOLUME_NOT_SIS_ENABLED = 4500;
export const ERROR_DEPENDENT_RESOURCE_EXISTS = 5001;
export const ERROR_DEPENDENCY_NOT_FOUND = 5002;
export const ERROR_DEPENDENCY_ALREADY_EXISTS = 5003;
export const ERROR_RESOURCE_NOT_ONLINE = 5004;
export const ERROR_HOST_NODE_NOT_AVAILABLE = 5005;
export const ERROR_RESOURCE_NOT_AVAILABLE = 5006;
export const ERROR_RESOURCE_NOT_FOUND = 5007;
export const ERROR_SHUTDOWN_CLUSTER = 5008;
export const ERROR_CANT_EVICT_ACTIVE_NODE = 5009;
export const ERROR_OBJECT_ALREADY_EXISTS = 5010;
export const ERROR_OBJECT_IN_LIST = 5011;
export const ERROR_GROUP_NOT_AVAILABLE = 5012;
export const ERROR_GROUP_NOT_FOUND = 5013;
export const ERROR_GROUP_NOT_ONLINE = 5014;
export const ERROR_HOST_NODE_NOT_RESOURCE_OWNER = 5015;
export const ERROR_HOST_NODE_NOT_GROUP_OWNER = 5016;
export const ERROR_RESMON_CREATE_FAILED = 5017;
export const ERROR_RESMON_ONLINE_FAILED = 5018;
export const ERROR_RESOURCE_ONLINE = 5019;
export const ERROR_QUORUM_RESOURCE = 5020;
export const ERROR_NOT_QUORUM_CAPABLE = 5021;
export const ERROR_CLUSTER_SHUTTING_DOWN = 5022;
export const ERROR_INVALID_STATE = 5023;
export const ERROR_RESOURCE_PROPERTIES_STORED = 5024;
export const ERROR_NOT_QUORUM_CLASS = 5025;
export const ERROR_CORE_RESOURCE = 5026;
export const ERROR_QUORUM_RESOURCE_ONLINE_FAILED = 5027;
export const ERROR_QUORUMLOG_OPEN_FAILED = 5028;
export const ERROR_CLUSTERLOG_CORRUPT = 5029;
export const ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE = 5030;
export const ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE = 5031;
export const ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND = 5032;
export const ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE = 5033;
export const ERROR_QUORUM_OWNER_ALIVE = 5034;
export const ERROR_NETWORK_NOT_AVAILABLE = 5035;
export const ERROR_NODE_NOT_AVAILABLE = 5036;
export const ERROR_ALL_NODES_NOT_AVAILABLE = 5037;
export const ERROR_RESOURCE_FAILED = 5038;
export const ERROR_CLUSTER_INVALID_NODE = 5039;
export const ERROR_CLUSTER_NODE_EXISTS = 5040;
export const ERROR_CLUSTER_JOIN_IN_PROGRESS = 5041;
export const ERROR_CLUSTER_NODE_NOT_FOUND = 5042;
export const ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND = 5043;
export const ERROR_CLUSTER_NETWORK_EXISTS = 5044;
export const ERROR_CLUSTER_NETWORK_NOT_FOUND = 5045;
export const ERROR_CLUSTER_NETINTERFACE_EXISTS = 5046;
export const ERROR_CLUSTER_NETINTERFACE_NOT_FOUND = 5047;
export const ERROR_CLUSTER_INVALID_REQUEST = 5048;
export const ERROR_CLUSTER_INVALID_NETWORK_PROVIDER = 5049;
export const ERROR_CLUSTER_NODE_DOWN = 5050;
export const ERROR_CLUSTER_NODE_UNREACHABLE = 5051;
export const ERROR_CLUSTER_NODE_NOT_MEMBER = 5052;
export const ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS = 5053;
export const ERROR_CLUSTER_INVALID_NETWORK = 5054;
export const ERROR_CLUSTER_NODE_UP = 5056;
export const ERROR_CLUSTER_IPADDR_IN_USE = 5057;
export const ERROR_CLUSTER_NODE_NOT_PAUSED = 5058;
export const ERROR_CLUSTER_NO_SECURITY_CONTEXT = 5059;
export const ERROR_CLUSTER_NETWORK_NOT_INTERNAL = 5060;
export const ERROR_CLUSTER_NODE_ALREADY_UP = 5061;
export const ERROR_CLUSTER_NODE_ALREADY_DOWN = 5062;
export const ERROR_CLUSTER_NETWORK_ALREADY_ONLINE = 5063;
export const ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE = 5064;
export const ERROR_CLUSTER_NODE_ALREADY_MEMBER = 5065;
export const ERROR_CLUSTER_LAST_INTERNAL_NETWORK = 5066;
export const ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS = 5067;
export const ERROR_INVALID_OPERATION_ON_QUORUM = 5068;
export const ERROR_DEPENDENCY_NOT_ALLOWED = 5069;
export const ERROR_CLUSTER_NODE_PAUSED = 5070;
export const ERROR_NODE_CANT_HOST_RESOURCE = 5071;
export const ERROR_CLUSTER_NODE_NOT_READY = 5072;
export const ERROR_CLUSTER_NODE_SHUTTING_DOWN = 5073;
export const ERROR_CLUSTER_JOIN_ABORTED = 5074;
export const ERROR_CLUSTER_INCOMPATIBLE_VERSIONS = 5075;
export const ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED = 5076;
export const ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED = 5077;
export const ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND = 5078;
export const ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED = 5079;
export const ERROR_CLUSTER_RESNAME_NOT_FOUND = 5080;
export const ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED = 5081;
export const ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST = 5082;
export const ERROR_CLUSTER_DATABASE_SEQMISMATCH = 5083;
export const ERROR_RESMON_INVALID_STATE = 5084;
export const ERROR_CLUSTER_GUM_NOT_LOCKER = 5085;
export const ERROR_QUORUM_DISK_NOT_FOUND = 5086;
export const ERROR_DATABASE_BACKUP_CORRUPT = 5087;
export const ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT = 5088;
export const ERROR_RESOURCE_PROPERTY_UNCHANGEABLE = 5089;
export const ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE = 5890;
export const ERROR_CLUSTER_QUORUMLOG_NOT_FOUND = 5891;
export const ERROR_CLUSTER_MEMBERSHIP_HALT = 5892;
export const ERROR_CLUSTER_INSTANCE_ID_MISMATCH = 5893;
export const ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP = 5894;
export const ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH = 5895;
export const ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP = 5896;
export const ERROR_CLUSTER_PARAMETER_MISMATCH = 5897;
export const ERROR_NODE_CANNOT_BE_CLUSTERED = 5898;
export const ERROR_CLUSTER_WRONG_OS_VERSION = 5899;
export const ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME = 5900;
export const ERROR_CLUSCFG_ALREADY_COMMITTED = 5901;
export const ERROR_CLUSCFG_ROLLBACK_FAILED = 5902;
export const ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT = 5903;
export const ERROR_CLUSTER_OLD_VERSION = 5904;
export const ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME = 5905;
export const ERROR_ENCRYPTION_FAILED = 6000;
export const ERROR_DECRYPTION_FAILED = 6001;
export const ERROR_FILE_ENCRYPTED = 6002;
export const ERROR_NO_RECOVERY_POLICY = 6003;
export const ERROR_NO_EFS = 6004;
export const ERROR_WRONG_EFS = 6005;
export const ERROR_NO_USER_KEYS = 6006;
export const ERROR_FILE_NOT_ENCRYPTED = 6007;
export const ERROR_NOT_EXPORT_FORMAT = 6008;
export const ERROR_FILE_READ_ONLY = 6009;
export const ERROR_DIR_EFS_DISALLOWED = 6010;
export const ERROR_EFS_SERVER_NOT_TRUSTED = 6011;
export const ERROR_BAD_RECOVERY_POLICY = 6012;
export const ERROR_EFS_ALG_BLOB_TOO_BIG = 6013;
export const ERROR_VOLUME_NOT_SUPPORT_EFS = 6014;
export const ERROR_EFS_DISABLED = 6015;
export const ERROR_EFS_VERSION_NOT_SUPPORT = 6016;
export const ERROR_NO_BROWSER_SERVERS_FOUND = 6118;
export const SCHED_E_SERVICE_NOT_LOCALSYSTEM = 6200;
export const ERROR_CTX_WINSTATION_NAME_INVALID = 7001;
export const ERROR_CTX_INVALID_PD = 7002;
export const ERROR_CTX_PD_NOT_FOUND = 7003;
export const ERROR_CTX_WD_NOT_FOUND = 7004;
export const ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY = 7005;
export const ERROR_CTX_SERVICE_NAME_COLLISION = 7006;
export const ERROR_CTX_CLOSE_PENDING = 7007;
export const ERROR_CTX_NO_OUTBUF = 7008;
export const ERROR_CTX_MODEM_INF_NOT_FOUND = 7009;
export const ERROR_CTX_INVALID_MODEMNAME = 7010;
export const ERROR_CTX_MODEM_RESPONSE_ERROR = 7011;
export const ERROR_CTX_MODEM_RESPONSE_TIMEOUT = 7012;
export const ERROR_CTX_MODEM_RESPONSE_NO_CARRIER = 7013;
export const ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE = 7014;
export const ERROR_CTX_MODEM_RESPONSE_BUSY = 7015;
export const ERROR_CTX_MODEM_RESPONSE_VOICE = 7016;
export const ERROR_CTX_TD_ERROR = 7017;
export const ERROR_CTX_WINSTATION_NOT_FOUND = 7022;
export const ERROR_CTX_WINSTATION_ALREADY_EXISTS = 7023;
export const ERROR_CTX_WINSTATION_BUSY = 7024;
export const ERROR_CTX_BAD_VIDEO_MODE = 7025;
export const ERROR_CTX_GRAPHICS_INVALID = 7035;
export const ERROR_CTX_LOGON_DISABLED = 7037;
export const ERROR_CTX_NOT_CONSOLE = 7038;
export const ERROR_CTX_CLIENT_QUERY_TIMEOUT = 7040;
export const ERROR_CTX_CONSOLE_DISCONNECT = 7041;
export const ERROR_CTX_CONSOLE_CONNECT = 7042;
export const ERROR_CTX_SHADOW_DENIED = 7044;
export const ERROR_CTX_WINSTATION_ACCESS_DENIED = 7045;
export const ERROR_CTX_INVALID_WD = 7049;
export const ERROR_CTX_SHADOW_INVALID = 7050;
export const ERROR_CTX_SHADOW_DISABLED = 7051;
export const ERROR_CTX_CLIENT_LICENSE_IN_USE = 7052;
export const ERROR_CTX_CLIENT_LICENSE_NOT_SET = 7053;
export const ERROR_CTX_LICENSE_NOT_AVAILABLE = 7054;
export const ERROR_CTX_LICENSE_CLIENT_INVALID = 7055;
export const ERROR_CTX_LICENSE_EXPIRED = 7056;
export const ERROR_CTX_SHADOW_NOT_RUNNING = 7057;
export const ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE = 7058;
export const ERROR_ACTIVATION_COUNT_EXCEEDED = 7059;
export const FRS_ERR_INVALID_API_SEQUENCE = 8001;
export const FRS_ERR_STARTING_SERVICE = 8002;
export const FRS_ERR_STOPPING_SERVICE = 8003;
export const FRS_ERR_INTERNAL_API = 8004;
export const FRS_ERR_INTERNAL = 8005;
export const FRS_ERR_SERVICE_COMM = 8006;
export const FRS_ERR_INSUFFICIENT_PRIV = 8007;
export const FRS_ERR_AUTHENTICATION = 8008;
export const FRS_ERR_PARENT_INSUFFICIENT_PRIV = 8009;
export const FRS_ERR_PARENT_AUTHENTICATION = 8010;
export const FRS_ERR_CHILD_TO_PARENT_COMM = 8011;
export const FRS_ERR_PARENT_TO_CHILD_COMM = 8012;
export const FRS_ERR_SYSVOL_POPULATE = 8013;
export const FRS_ERR_SYSVOL_POPULATE_TIMEOUT = 8014;
export const FRS_ERR_SYSVOL_IS_BUSY = 8015;
export const FRS_ERR_SYSVOL_DEMOTE = 8016;
export const FRS_ERR_INVALID_SERVICE_PARAMETER = 8017;
export const ERROR_DS_NOT_INSTALLED = 8200;
export const ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY = 8201;
export const ERROR_DS_NO_ATTRIBUTE_OR_VALUE = 8202;
export const ERROR_DS_INVALID_ATTRIBUTE_SYNTAX = 8203;
export const ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED = 8204;
export const ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS = 8205;
export const ERROR_DS_BUSY = 8206;
export const ERROR_DS_UNAVAILABLE = 8207;
export const ERROR_DS_NO_RIDS_ALLOCATED = 8208;
export const ERROR_DS_NO_MORE_RIDS = 8209;
export const ERROR_DS_INCORRECT_ROLE_OWNER = 8210;
export const ERROR_DS_RIDMGR_INIT_ERROR = 8211;
export const ERROR_DS_OBJ_CLASS_VIOLATION = 8212;
export const ERROR_DS_CANT_ON_NON_LEAF = 8213;
export const ERROR_DS_CANT_ON_RDN = 8214;
export const ERROR_DS_CANT_MOD_OBJ_CLASS = 8215;
export const ERROR_DS_CROSS_DOM_MOVE_ERROR = 8216;
export const ERROR_DS_GC_NOT_AVAILABLE = 8217;
export const ERROR_SHARED_POLICY = 8218;
export const ERROR_POLICY_OBJECT_NOT_FOUND = 8219;
export const ERROR_POLICY_ONLY_IN_DS = 8220;
export const ERROR_PROMOTION_ACTIVE = 8221;
export const ERROR_NO_PROMOTION_ACTIVE = 8222;
export const ERROR_DS_OPERATIONS_ERROR = 8224;
export const ERROR_DS_PROTOCOL_ERROR = 8225;
export const ERROR_DS_TIMELIMIT_EXCEEDED = 8226;
export const ERROR_DS_SIZELIMIT_EXCEEDED = 8227;
export const ERROR_DS_ADMIN_LIMIT_EXCEEDED = 8228;
export const ERROR_DS_COMPARE_FALSE = 8229;
export const ERROR_DS_COMPARE_TRUE = 8230;
export const ERROR_DS_AUTH_METHOD_NOT_SUPPORTED = 8231;
export const ERROR_DS_STRONG_AUTH_REQUIRED = 8232;
export const ERROR_DS_INAPPROPRIATE_AUTH = 8233;
export const ERROR_DS_AUTH_UNKNOWN = 8234;
export const ERROR_DS_REFERRAL = 8235;
export const ERROR_DS_UNAVAILABLE_CRIT_EXTENSION = 8236;
export const ERROR_DS_CONFIDENTIALITY_REQUIRED = 8237;
export const ERROR_DS_INAPPROPRIATE_MATCHING = 8238;
export const ERROR_DS_NO_SUCH_OBJECT = 8240;
export const ERROR_DS_ALIAS_PROBLEM = 8241;
export const ERROR_DS_INVALID_DN_SYNTAX = 8242;
export const ERROR_DS_IS_LEAF = 8243;
export const ERROR_DS_ALIAS_DEREF_PROBLEM = 8244;
export const ERROR_DS_UNWILLING_TO_PERFORM = 8245;
export const ERROR_DS_LOOP_DETECT = 8246;
export const ERROR_DS_NAMING_VIOLATION = 8247;
export const ERROR_DS_OBJECT_RESULTS_TOO_LARGE = 8248;
export const ERROR_DS_AFFECTS_MULTIPLE_DSAS = 8249;
export const ERROR_DS_SERVER_DOWN = 8250;
export const ERROR_DS_LOCAL_ERROR = 8251;
export const ERROR_DS_ENCODING_ERROR = 8252;
export const ERROR_DS_DECODING_ERROR = 8253;
export const ERROR_DS_FILTER_UNKNOWN = 8254;
export const ERROR_DS_PARAM_ERROR = 8255;
export const ERROR_DS_NOT_SUPPORTED = 8256;
export const ERROR_DS_NO_RESULTS_RETURNED = 8257;
export const ERROR_DS_CONTROL_NOT_FOUND = 8258;
export const ERROR_DS_CLIENT_LOOP = 8259;
export const ERROR_DS_REFERRAL_LIMIT_EXCEEDED = 8260;
export const ERROR_DS_SORT_CONTROL_MISSING = 8261;
export const ERROR_DS_OFFSET_RANGE_ERROR = 8262;
export const ERROR_DS_ROOT_MUST_BE_NC = 8301;
export const ERROR_DS_ADD_REPLICA_INHIBITED = 8302;
export const ERROR_DS_ATT_NOT_DEF_IN_SCHEMA = 8303;
export const ERROR_DS_MAX_OBJ_SIZE_EXCEEDED = 8304;
export const ERROR_DS_OBJ_STRING_NAME_EXISTS = 8305;
export const ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA = 8306;
export const ERROR_DS_RDN_DOESNT_MATCH_SCHEMA = 8307;
export const ERROR_DS_NO_REQUESTED_ATTS_FOUND = 8308;
export const ERROR_DS_USER_BUFFER_TO_SMALL = 8309;
export const ERROR_DS_ATT_IS_NOT_ON_OBJ = 8310;
export const ERROR_DS_ILLEGAL_MOD_OPERATION = 8311;
export const ERROR_DS_OBJ_TOO_LARGE = 8312;
export const ERROR_DS_BAD_INSTANCE_TYPE = 8313;
export const ERROR_DS_MASTERDSA_REQUIRED = 8314;
export const ERROR_DS_OBJECT_CLASS_REQUIRED = 8315;
export const ERROR_DS_MISSING_REQUIRED_ATT = 8316;
export const ERROR_DS_ATT_NOT_DEF_FOR_CLASS = 8317;
export const ERROR_DS_ATT_ALREADY_EXISTS = 8318;
export const ERROR_DS_CANT_ADD_ATT_VALUES = 8320;
export const ERROR_DS_ATT_VAL_ALREADY_EXISTS = 8323;
export const ERROR_DS_CANT_REM_MISSING_ATT = 8324;
export const ERROR_DS_CANT_REM_MISSING_ATT_VAL = 8325;
export const ERROR_DS_ROOT_CANT_BE_SUBREF = 8326;
export const ERROR_DS_NO_CHAINING = 8327;
export const ERROR_DS_NO_CHAINED_EVAL = 8328;
export const ERROR_DS_NO_PARENT_OBJECT = 8329;
export const ERROR_DS_PARENT_IS_AN_ALIAS = 8330;
export const ERROR_DS_CANT_MIX_MASTER_AND_REPS = 8331;
export const ERROR_DS_CHILDREN_EXIST = 8332;
export const ERROR_DS_OBJ_NOT_FOUND = 8333;
export const ERROR_DS_ALIASED_OBJ_MISSING = 8334;
export const ERROR_DS_BAD_NAME_SYNTAX = 8335;
export const ERROR_DS_ALIAS_POINTS_TO_ALIAS = 8336;
export const ERROR_DS_CANT_DEREF_ALIAS = 8337;
export const ERROR_DS_OUT_OF_SCOPE = 8338;
export const ERROR_DS_OBJECT_BEING_REMOVED = 8339;
export const ERROR_DS_CANT_DELETE_DSA_OBJ = 8340;
export const ERROR_DS_GENERIC_ERROR = 8341;
export const ERROR_DS_DSA_MUST_BE_INT_MASTER = 8342;
export const ERROR_DS_CLASS_NOT_DSA = 8343;
export const ERROR_DS_INSUFF_ACCESS_RIGHTS = 8344;
export const ERROR_DS_ILLEGAL_SUPERIOR = 8345;
export const ERROR_DS_ATTRIBUTE_OWNED_BY_SAM = 8346;
export const ERROR_DS_NAME_TOO_MANY_PARTS = 8347;
export const ERROR_DS_NAME_TOO_LONG = 8348;
export const ERROR_DS_NAME_VALUE_TOO_LONG = 8349;
export const ERROR_DS_NAME_UNPARSEABLE = 8350;
export const ERROR_DS_NAME_TYPE_UNKNOWN = 8351;
export const ERROR_DS_NOT_AN_OBJECT = 8352;
export const ERROR_DS_SEC_DESC_TOO_SHORT = 8353;
export const ERROR_DS_SEC_DESC_INVALID = 8354;
export const ERROR_DS_NO_DELETED_NAME = 8355;
export const ERROR_DS_SUBREF_MUST_HAVE_PARENT = 8356;
export const ERROR_DS_NCNAME_MUST_BE_NC = 8357;
export const ERROR_DS_CANT_ADD_SYSTEM_ONLY = 8358;
export const ERROR_DS_CLASS_MUST_BE_CONCRETE = 8359;
export const ERROR_DS_INVALID_DMD = 8360;
export const ERROR_DS_OBJ_GUID_EXISTS = 8361;
export const ERROR_DS_NOT_ON_BACKLINK = 8362;
export const ERROR_DS_NO_CROSSREF_FOR_NC = 8363;
export const ERROR_DS_SHUTTING_DOWN = 8364;
export const ERROR_DS_UNKNOWN_OPERATION = 8365;
export const ERROR_DS_INVALID_ROLE_OWNER = 8366;
export const ERROR_DS_COULDNT_CONTACT_FSMO = 8367;
export const ERROR_DS_CROSS_NC_DN_RENAME = 8368;
export const ERROR_DS_CANT_MOD_SYSTEM_ONLY = 8369;
export const ERROR_DS_REPLICATOR_ONLY = 8370;
export const ERROR_DS_OBJ_CLASS_NOT_DEFINED = 8371;
export const ERROR_DS_OBJ_CLASS_NOT_SUBCLASS = 8372;
export const ERROR_DS_NAME_REFERENCE_INVALID = 8373;
export const ERROR_DS_CROSS_REF_EXISTS = 8374;
export const ERROR_DS_CANT_DEL_MASTER_CROSSREF = 8375;
export const ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD = 8376;
export const ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX = 8377;
export const ERROR_DS_DUP_RDN = 8378;
export const ERROR_DS_DUP_OID = 8379;
export const ERROR_DS_DUP_MAPI_ID = 8380;
export const ERROR_DS_DUP_SCHEMA_ID_GUID = 8381;
export const ERROR_DS_DUP_LDAP_DISPLAY_NAME = 8382;
export const ERROR_DS_SEMANTIC_ATT_TEST = 8383;
export const ERROR_DS_SYNTAX_MISMATCH = 8384;
export const ERROR_DS_EXISTS_IN_MUST_HAVE = 8385;
export const ERROR_DS_EXISTS_IN_MAY_HAVE = 8386;
export const ERROR_DS_NONEXISTENT_MAY_HAVE = 8387;
export const ERROR_DS_NONEXISTENT_MUST_HAVE = 8388;
export const ERROR_DS_AUX_CLS_TEST_FAIL = 8389;
export const ERROR_DS_NONEXISTENT_POSS_SUP = 8390;
export const ERROR_DS_SUB_CLS_TEST_FAIL = 8391;
export const ERROR_DS_BAD_RDN_ATT_ID_SYNTAX = 8392;
export const ERROR_DS_EXISTS_IN_AUX_CLS = 8393;
export const ERROR_DS_EXISTS_IN_SUB_CLS = 8394;
export const ERROR_DS_EXISTS_IN_POSS_SUP = 8395;
export const ERROR_DS_RECALCSCHEMA_FAILED = 8396;
export const ERROR_DS_TREE_DELETE_NOT_FINISHED = 8397;
export const ERROR_DS_CANT_DELETE = 8398;
export const ERROR_DS_ATT_SCHEMA_REQ_ID = 8399;
export const ERROR_DS_BAD_ATT_SCHEMA_SYNTAX = 8400;
export const ERROR_DS_CANT_CACHE_ATT = 8401;
export const ERROR_DS_CANT_CACHE_CLASS = 8402;
export const ERROR_DS_CANT_REMOVE_ATT_CACHE = 8403;
export const ERROR_DS_CANT_REMOVE_CLASS_CACHE = 8404;
export const ERROR_DS_CANT_RETRIEVE_DN = 8405;
export const ERROR_DS_MISSING_SUPREF = 8406;
export const ERROR_DS_CANT_RETRIEVE_INSTANCE = 8407;
export const ERROR_DS_CODE_INCONSISTENCY = 8408;
export const ERROR_DS_DATABASE_ERROR = 8409;
export const ERROR_DS_GOVERNSID_MISSING = 8410;
export const ERROR_DS_MISSING_EXPECTED_ATT = 8411;
export const ERROR_DS_NCNAME_MISSING_CR_REF = 8412;
export const ERROR_DS_SECURITY_CHECKING_ERROR = 8413;
export const ERROR_DS_SCHEMA_NOT_LOADED = 8414;
export const ERROR_DS_SCHEMA_ALLOC_FAILED = 8415;
export const ERROR_DS_ATT_SCHEMA_REQ_SYNTAX = 8416;
export const ERROR_DS_GCVERIFY_ERROR = 8417;
export const ERROR_DS_DRA_SCHEMA_MISMATCH = 8418;
export const ERROR_DS_CANT_FIND_DSA_OBJ = 8419;
export const ERROR_DS_CANT_FIND_EXPECTED_NC = 8420;
export const ERROR_DS_CANT_FIND_NC_IN_CACHE = 8421;
export const ERROR_DS_CANT_RETRIEVE_CHILD = 8422;
export const ERROR_DS_SECURITY_ILLEGAL_MODIFY = 8423;
export const ERROR_DS_CANT_REPLACE_HIDDEN_REC = 8424;
export const ERROR_DS_BAD_HIERARCHY_FILE = 8425;
export const ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED = 8426;
export const ERROR_DS_CONFIG_PARAM_MISSING = 8427;
export const ERROR_DS_COUNTING_AB_INDICES_FAILED = 8428;
export const ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED = 8429;
export const ERROR_DS_INTERNAL_FAILURE = 8430;
export const ERROR_DS_UNKNOWN_ERROR = 8431;
export const ERROR_DS_ROOT_REQUIRES_CLASS_TOP = 8432;
export const ERROR_DS_REFUSING_FSMO_ROLES = 8433;
export const ERROR_DS_MISSING_FSMO_SETTINGS = 8434;
export const ERROR_DS_UNABLE_TO_SURRENDER_ROLES = 8435;
export const ERROR_DS_DRA_GENERIC = 8436;
export const ERROR_DS_DRA_INVALID_PARAMETER = 8437;
export const ERROR_DS_DRA_BUSY = 8438;
export const ERROR_DS_DRA_BAD_DN = 8439;
export const ERROR_DS_DRA_BAD_NC = 8440;
export const ERROR_DS_DRA_DN_EXISTS = 8441;
export const ERROR_DS_DRA_INTERNAL_ERROR = 8442;
export const ERROR_DS_DRA_INCONSISTENT_DIT = 8443;
export const ERROR_DS_DRA_CONNECTION_FAILED = 8444;
export const ERROR_DS_DRA_BAD_INSTANCE_TYPE = 8445;
export const ERROR_DS_DRA_OUT_OF_MEM = 8446;
export const ERROR_DS_DRA_MAIL_PROBLEM = 8447;
export const ERROR_DS_DRA_REF_ALREADY_EXISTS = 8448;
export const ERROR_DS_DRA_REF_NOT_FOUND = 8449;
export const ERROR_DS_DRA_OBJ_IS_REP_SOURCE = 8450;
export const ERROR_DS_DRA_DB_ERROR = 8451;
export const ERROR_DS_DRA_NO_REPLICA = 8452;
export const ERROR_DS_DRA_ACCESS_DENIED = 8453;
export const ERROR_DS_DRA_NOT_SUPPORTED = 8454;
export const ERROR_DS_DRA_RPC_CANCELLED = 8455;
export const ERROR_DS_DRA_SOURCE_DISABLED = 8456;
export const ERROR_DS_DRA_SINK_DISABLED = 8457;
export const ERROR_DS_DRA_NAME_COLLISION = 8458;
export const ERROR_DS_DRA_SOURCE_REINSTALLED = 8459;
export const ERROR_DS_DRA_MISSING_PARENT = 8460;
export const ERROR_DS_DRA_PREEMPTED = 8461;
export const ERROR_DS_DRA_ABANDON_SYNC = 8462;
export const ERROR_DS_DRA_SHUTDOWN = 8463;
export const ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET = 8464;
export const ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA = 8465;
export const ERROR_DS_DRA_EXTN_CONNECTION_FAILED = 8466;
export const ERROR_DS_INSTALL_SCHEMA_MISMATCH = 8467;
export const ERROR_DS_DUP_LINK_ID = 8468;
export const ERROR_DS_NAME_ERROR_RESOLVING = 8469;
export const ERROR_DS_NAME_ERROR_NOT_FOUND = 8470;
export const ERROR_DS_NAME_ERROR_NOT_UNIQUE = 8471;
export const ERROR_DS_NAME_ERROR_NO_MAPPING = 8472;
export const ERROR_DS_NAME_ERROR_DOMAIN_ONLY = 8473;
export const ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING = 8474;
export const ERROR_DS_WRONG_OM_OBJ_CLASS = 8476;
export const ERROR_DS_DRA_REPL_PENDING = 8477;
export const ERROR_DS_DS_REQUIRED = 8478;
export const ERROR_DS_INVALID_LDAP_DISPLAY_NAME = 8479;
export const ERROR_DS_NON_BASE_SEARCH = 8480;
export const ERROR_DS_CANT_RETRIEVE_ATTS = 8481;
export const ERROR_DS_BACKLINK_WITHOUT_LINK = 8482;
export const ERROR_DS_EPOCH_MISMATCH = 8483;
export const ERROR_DS_SRC_NAME_MISMATCH = 8484;
export const ERROR_DS_SRC_AND_DST_NC_IDENTICAL = 8485;
export const ERROR_DS_DST_NC_MISMATCH = 8486;
export const ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC = 8487;
export const ERROR_DS_SRC_GUID_MISMATCH = 8488;
export const ERROR_DS_CANT_MOVE_DELETED_OBJECT = 8489;
export const ERROR_DS_PDC_OPERATION_IN_PROGRESS = 8490;
export const ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD = 8491;
export const ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION = 8492;
export const ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS = 8493;
export const ERROR_DS_NC_MUST_HAVE_NC_PARENT = 8494;
export const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE = 8495;
export const ERROR_DS_DST_DOMAIN_NOT_NATIVE = 8496;
export const ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER = 8497;
export const ERROR_DS_CANT_MOVE_ACCOUNT_GROUP = 8498;
export const ERROR_DS_CANT_MOVE_RESOURCE_GROUP = 8499;
export const ERROR_DS_INVALID_SEARCH_FLAG = 8500;
export const ERROR_DS_NO_TREE_DELETE_ABOVE_NC = 8501;
export const ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE = 8502;
export const ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE = 8503;
export const ERROR_DS_SAM_INIT_FAILURE = 8504;
export const ERROR_DS_SENSITIVE_GROUP_VIOLATION = 8505;
export const ERROR_DS_CANT_MOD_PRIMARYGROUPID = 8506;
export const ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD = 8507;
export const ERROR_DS_NONSAFE_SCHEMA_CHANGE = 8508;
export const ERROR_DS_SCHEMA_UPDATE_DISALLOWED = 8509;
export const ERROR_DS_CANT_CREATE_UNDER_SCHEMA = 8510;
export const ERROR_DS_INSTALL_NO_SRC_SCH_VERSION = 8511;
export const ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE = 8512;
export const ERROR_DS_INVALID_GROUP_TYPE = 8513;
export const ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN = 8514;
export const ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN = 8515;
export const ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER = 8516;
export const ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER = 8517;
export const ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER = 8518;
export const ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER = 8519;
export const ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER = 8520;
export const ERROR_DS_HAVE_PRIMARY_MEMBERS = 8521;
export const ERROR_DS_STRING_SD_CONVERSION_FAILED = 8522;
export const ERROR_DS_NAMING_MASTER_GC = 8523;
export const ERROR_DS_DNS_LOOKUP_FAILURE = 8524;
export const ERROR_DS_COULDNT_UPDATE_SPNS = 8525;
export const ERROR_DS_CANT_RETRIEVE_SD = 8526;
export const ERROR_DS_KEY_NOT_UNIQUE = 8527;
export const ERROR_DS_WRONG_LINKED_ATT_SYNTAX = 8528;
export const ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD = 8529;
export const ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY = 8530;
export const ERROR_DS_CANT_START = 8531;
export const ERROR_DS_INIT_FAILURE = 8532;
export const ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION = 8533;
export const ERROR_DS_SOURCE_DOMAIN_IN_FOREST = 8534;
export const ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST = 8535;
export const ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED = 8536;
export const ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN = 8537;
export const ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER = 8538;
export const ERROR_DS_SRC_SID_EXISTS_IN_FOREST = 8539;
export const ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH = 8540;
export const ERROR_SAM_INIT_FAILURE = 8541;
export const ERROR_DS_DRA_SCHEMA_INFO_SHIP = 8542;
export const ERROR_DS_DRA_SCHEMA_CONFLICT = 8543;
export const ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT = 8544;
export const ERROR_DS_DRA_OBJ_NC_MISMATCH = 8545;
export const ERROR_DS_NC_STILL_HAS_DSAS = 8546;
export const ERROR_DS_GC_REQUIRED = 8547;
export const ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY = 8548;
export const ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS = 8549;
export const ERROR_DS_CANT_ADD_TO_GC = 8550;
export const ERROR_DS_NO_CHECKPOINT_WITH_PDC = 8551;
export const ERROR_DS_SOURCE_AUDITING_NOT_ENABLED = 8552;
export const ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC = 8553;
export const ERROR_DS_INVALID_NAME_FOR_SPN = 8554;
export const ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS = 8555;
export const ERROR_DS_UNICODEPWD_NOT_IN_QUOTES = 8556;
export const ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = 8557;
export const ERROR_DS_MUST_BE_RUN_ON_DST_DC = 8558;
export const ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER = 8559;
export const ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ = 8560;
export const ERROR_DS_INIT_FAILURE_CONSOLE = 8561;
export const ERROR_DS_SAM_INIT_FAILURE_CONSOLE = 8562;
export const ERROR_DS_FOREST_VERSION_TOO_HIGH = 8563;
export const ERROR_DS_DOMAIN_VERSION_TOO_HIGH = 8564;
export const ERROR_DS_FOREST_VERSION_TOO_LOW = 8565;
export const ERROR_DS_DOMAIN_VERSION_TOO_LOW = 8566;
export const ERROR_DS_INCOMPATIBLE_VERSION = 8567;
export const ERROR_DS_LOW_DSA_VERSION = 8568;
export const ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN = 8569;
export const ERROR_DS_NOT_SUPPORTED_SORT_ORDER = 8570;
export const ERROR_DS_NAME_NOT_UNIQUE = 8571;
export const ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4 = 8572;
export const ERROR_DS_OUT_OF_VERSION_STORE = 8573;
export const ERROR_DS_INCOMPATIBLE_CONTROLS_USED = 8574;
export const ERROR_DS_NO_REF_DOMAIN = 8575;
export const ERROR_DS_RESERVED_LINK_ID = 8576;
export const ERROR_DS_LINK_ID_NOT_AVAILABLE = 8577;
export const ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER = 8578;
export const ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE = 8579;
export const ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC = 8580;
export const ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG = 8581;
export const ERROR_DS_MODIFYDN_WRONG_GRANDPARENT = 8582;
export const ERROR_DS_NAME_ERROR_TRUST_REFERRAL = 8583;
export const ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER = 8584;
export const ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD = 8585;
export const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2 = 8586;
export const ERROR_DS_THREAD_LIMIT_EXCEEDED = 8587;
export const ERROR_DS_NOT_CLOSEST = 8588;
export const ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF = 8589;
export const ERROR_DS_SINGLE_USER_MODE_FAILED = 8590;
export const ERROR_DS_NTDSCRIPT_SYNTAX_ERROR = 8591;
export const ERROR_DS_NTDSCRIPT_PROCESS_ERROR = 8592;
export const ERROR_DS_DIFFERENT_REPL_EPOCHS = 8593;
export const ERROR_DS_DRS_EXTENSIONS_CHANGED = 8594;
export const ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR = 8595;
export const ERROR_DS_NO_MSDS_INTID = 8596;
export const ERROR_DS_DUP_MSDS_INTID = 8597;
export const ERROR_DS_EXISTS_IN_RDNATTID = 8598;
export const ERROR_DS_AUTHORIZATION_FAILED = 8599;
export const ERROR_DS_INVALID_SCRIPT = 8600;
export const ERROR_DS_REMOTE_CROSSREF_OP_FAILED = 8601;
export const ERROR_DS_CROSS_REF_BUSY = 8602;
export const ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN = 8603;
export const ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC = 8604;
export const ERROR_DS_DUPLICATE_ID_FOUND = 8605;
export const ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT = 8606;
export const ERROR_DS_GROUP_CONVERSION_ERROR = 8607;
export const ERROR_DS_CANT_MOVE_APP_BASIC_GROUP = 8608;
export const ERROR_DS_CANT_MOVE_APP_QUERY_GROUP = 8609;
export const ERROR_DS_ROLE_NOT_VERIFIED = 8610;
export const ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL = 8611;
export const ERROR_DS_DOMAIN_RENAME_IN_PROGRESS = 8612;
export const ERROR_DS_EXISTING_AD_CHILD_NC = 8613;
export const ERROR_DS_REPL_LIFETIME_EXCEEDED = 8614;
export const ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER = 8615;
export const ERROR_DS_LDAP_SEND_QUEUE_FULL = 8616;
export const ERROR_DS_DRA_OUT_SCHEDULE_WINDOW = 8617;
export const DNS_ERROR_RESPONSE_CODES_BASE = 9000;
export const DNS_ERROR_RCODE_FORMAT_ERROR = 9001;
export const DNS_ERROR_RCODE_SERVER_FAILURE = 9002;
export const DNS_ERROR_RCODE_NAME_ERROR = 9003;
export const DNS_ERROR_RCODE_NOT_IMPLEMENTED = 9004;
export const DNS_ERROR_RCODE_REFUSED = 9005;
export const DNS_ERROR_RCODE_YXDOMAIN = 9006;
export const DNS_ERROR_RCODE_YXRRSET = 9007;
export const DNS_ERROR_RCODE_NXRRSET = 9008;
export const DNS_ERROR_RCODE_NOTAUTH = 9009;
export const DNS_ERROR_RCODE_NOTZONE = 9010;
export const DNS_ERROR_RCODE_BADSIG = 9016;
export const DNS_ERROR_RCODE_BADKEY = 9017;
export const DNS_ERROR_RCODE_BADTIME = 9018;
export const DNS_ERROR_PACKET_FMT_BASE = 9500;
export const DNS_INFO_NO_RECORDS = 9501;
export const DNS_ERROR_BAD_PACKET = 9502;
export const DNS_ERROR_NO_PACKET = 9503;
export const DNS_ERROR_RCODE = 9504;
export const DNS_ERROR_UNSECURE_PACKET = 9505;
export const DNS_ERROR_INVALID_TYPE = 9551;
export const DNS_ERROR_INVALID_IP_ADDRESS = 9552;
export const DNS_ERROR_INVALID_PROPERTY = 9553;
export const DNS_ERROR_TRY_AGAIN_LATER = 9554;
export const DNS_ERROR_NOT_UNIQUE = 9555;
export const DNS_ERROR_NON_RFC_NAME = 9556;
export const DNS_STATUS_FQDN = 9557;
export const DNS_STATUS_DOTTED_NAME = 9558;
export const DNS_STATUS_SINGLE_PART_NAME = 9559;
export const DNS_ERROR_INVALID_NAME_CHAR = 9560;
export const DNS_ERROR_NUMERIC_NAME = 9561;
export const DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER = 9562;
export const DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION = 9563;
export const DNS_ERROR_CANNOT_FIND_ROOT_HINTS = 9564;
export const DNS_ERROR_INCONSISTENT_ROOT_HINTS = 9565;
export const DNS_ERROR_ZONE_BASE = 9600;
export const DNS_ERROR_ZONE_DOES_NOT_EXIST = 9601;
export const DNS_ERROR_NO_ZONE_INFO = 9602;
export const DNS_ERROR_INVALID_ZONE_OPERATION = 9603;
export const DNS_ERROR_ZONE_CONFIGURATION_ERROR = 9604;
export const DNS_ERROR_ZONE_HAS_NO_SOA_RECORD = 9605;
export const DNS_ERROR_ZONE_HAS_NO_NS_RECORDS = 9606;
export const DNS_ERROR_ZONE_LOCKED = 9607;
export const DNS_ERROR_ZONE_CREATION_FAILED = 9608;
export const DNS_ERROR_ZONE_ALREADY_EXISTS = 9609;
export const DNS_ERROR_AUTOZONE_ALREADY_EXISTS = 9610;
export const DNS_ERROR_INVALID_ZONE_TYPE = 9611;
export const DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP = 9612;
export const DNS_ERROR_ZONE_NOT_SECONDARY = 9613;
export const DNS_ERROR_NEED_SECONDARY_ADDRESSES = 9614;
export const DNS_ERROR_WINS_INIT_FAILED = 9615;
export const DNS_ERROR_NEED_WINS_SERVERS = 9616;
export const DNS_ERROR_NBSTAT_INIT_FAILED = 9617;
export const DNS_ERROR_SOA_DELETE_INVALID = 9618;
export const DNS_ERROR_FORWARDER_ALREADY_EXISTS = 9619;
export const DNS_ERROR_ZONE_REQUIRES_MASTER_IP = 9620;
export const DNS_ERROR_ZONE_IS_SHUTDOWN = 9621;
export const DNS_ERROR_PRIMARY_REQUIRES_DATAFILE = 9651;
export const DNS_ERROR_INVALID_DATAFILE_NAME = 9652;
export const DNS_ERROR_DATAFILE_OPEN_FAILURE = 9653;
export const DNS_ERROR_FILE_WRITEBACK_FAILED = 9654;
export const DNS_ERROR_DATAFILE_PARSING = 9655;
export const DNS_ERROR_DATABASE_BASE = 9700;
export const DNS_ERROR_RECORD_DOES_NOT_EXIST = 9701;
export const DNS_ERROR_RECORD_FORMAT = 9702;
export const DNS_ERROR_NODE_CREATION_FAILED = 9703;
export const DNS_ERROR_UNKNOWN_RECORD_TYPE = 9704;
export const DNS_ERROR_RECORD_TIMED_OUT = 9705;
export const DNS_ERROR_NAME_NOT_IN_ZONE = 9706;
export const DNS_ERROR_CNAME_LOOP = 9707;
export const DNS_ERROR_NODE_IS_CNAME = 9708;
export const DNS_ERROR_CNAME_COLLISION = 9709;
export const DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT = 9710;
export const DNS_ERROR_RECORD_ALREADY_EXISTS = 9711;
export const DNS_ERROR_SECONDARY_DATA = 9712;
export const DNS_ERROR_NO_CREATE_CACHE_DATA = 9713;
export const DNS_ERROR_NAME_DOES_NOT_EXIST = 9714;
export const DNS_WARNING_PTR_CREATE_FAILED = 9715;
export const DNS_WARNING_DOMAIN_UNDELETED = 9716;
export const DNS_ERROR_DS_UNAVAILABLE = 9717;
export const DNS_ERROR_DS_ZONE_ALREADY_EXISTS = 9718;
export const DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE = 9719;
export const DNS_ERROR_OPERATION_BASE = 9750;
export const DNS_INFO_AXFR_COMPLETE = 9751;
export const DNS_ERROR_AXFR = 9752;
export const DNS_INFO_ADDED_LOCAL_WINS = 9753;
export const DNS_ERROR_SECURE_BASE = 9800;
export const DNS_STATUS_CONTINUE_NEEDED = 9801;
export const DNS_ERROR_SETUP_BASE = 9850;
export const DNS_ERROR_NO_TCPIP = 9851;
export const DNS_ERROR_NO_DNS_SERVERS = 9852;
export const DNS_ERROR_DP_BASE = 9900;
export const DNS_ERROR_DP_DOES_NOT_EXIST = 9901;
export const DNS_ERROR_DP_ALREADY_EXISTS = 9902;
export const DNS_ERROR_DP_NOT_ENLISTED = 9903;
export const DNS_ERROR_DP_ALREADY_ENLISTED = 9904;
export const DNS_ERROR_DP_NOT_AVAILABLE = 9905;
export const DNS_ERROR_DP_FSMO_ERROR = 9906;
export const WSABASEERR = 10000;
export const WSAEINTR = 10004;
export const WSAEBADF = 10009;
export const WSAEACCES = 10013;
export const WSAEFAULT = 10014;
export const WSAEINVAL = 10022;
export const WSAEMFILE = 10024;
export const WSAEWOULDBLOCK = 10035;
export const WSAEINPROGRESS = 10036;
export const WSAEALREADY = 10037;
export const WSAENOTSOCK = 10038;
export const WSAEDESTADDRREQ = 10039;
export const WSAEMSGSIZE = 10040;
export const WSAEPROTOTYPE = 10041;
export const WSAENOPROTOOPT = 10042;
export const WSAEPROTONOSUPPORT = 10043;
export const WSAESOCKTNOSUPPORT = 10044;
export const WSAEOPNOTSUPP = 10045;
export const WSAEPFNOSUPPORT = 10046;
export const WSAEAFNOSUPPORT = 10047;
export const WSAEADDRINUSE = 10048;
export const WSAEADDRNOTAVAIL = 10049;
export const WSAENETDOWN = 10050;
export const WSAENETUNREACH = 10051;
export const WSAENETRESET = 10052;
export const WSAECONNABORTED = 10053;
export const WSAECONNRESET = 10054;
export const WSAENOBUFS = 10055;
export const WSAEISCONN = 10056;
export const WSAENOTCONN = 10057;
export const WSAESHUTDOWN = 10058;
export const WSAETOOMANYREFS = 10059;
export const WSAETIMEDOUT = 10060;
export const WSAECONNREFUSED = 10061;
export const WSAELOOP = 10062;
export const WSAENAMETOOLONG = 10063;
export const WSAEHOSTDOWN = 10064;
export const WSAEHOSTUNREACH = 10065;
export const WSAENOTEMPTY = 10066;
export const WSAEPROCLIM = 10067;
export const WSAEUSERS = 10068;
export const WSAEDQUOT = 10069;
export const WSAESTALE = 10070;
export const WSAEREMOTE = 10071;
export const WSASYSNOTREADY = 10091;
export const WSAVERNOTSUPPORTED = 10092;
export const WSANOTINITIALISED = 10093;
export const WSAEDISCON = 10101;
export const WSAENOMORE = 10102;
export const WSAECANCELLED = 10103;
export const WSAEINVALIDPROCTABLE = 10104;
export const WSAEINVALIDPROVIDER = 10105;
export const WSAEPROVIDERFAILEDINIT = 10106;
export const WSASYSCALLFAILURE = 10107;
export const WSASERVICE_NOT_FOUND = 10108;
export const WSATYPE_NOT_FOUND = 10109;
export const WSA_E_NO_MORE = 10110;
export const WSA_E_CANCELLED = 10111;
export const WSAEREFUSED = 10112;
export const WSAHOST_NOT_FOUND = 11001;
export const WSATRY_AGAIN = 11002;
export const WSANO_RECOVERY = 11003;
export const WSANO_DATA = 11004;
export const WSA_QOS_RECEIVERS = 11005;
export const WSA_QOS_SENDERS = 11006;
export const WSA_QOS_NO_SENDERS = 11007;
export const WSA_QOS_NO_RECEIVERS = 11008;
export const WSA_QOS_REQUEST_CONFIRMED = 11009;
export const WSA_QOS_ADMISSION_FAILURE = 11010;
export const WSA_QOS_POLICY_FAILURE = 11011;
export const WSA_QOS_BAD_STYLE = 11012;
export const WSA_QOS_BAD_OBJECT = 11013;
export const WSA_QOS_TRAFFIC_CTRL_ERROR = 11014;
export const WSA_QOS_GENERIC_ERROR = 11015;
export const WSA_QOS_ESERVICETYPE = 11016;
export const WSA_QOS_EFLOWSPEC = 11017;
export const WSA_QOS_EPROVSPECBUF = 11018;
export const WSA_QOS_EFILTERSTYLE = 11019;
export const WSA_QOS_EFILTERTYPE = 11020;
export const WSA_QOS_EFILTERCOUNT = 11021;
export const WSA_QOS_EOBJLENGTH = 11022;
export const WSA_QOS_EFLOWCOUNT = 11023;
export const WSA_QOS_EUNKOWNPSOBJ = 11024;
export const WSA_QOS_EPOLICYOBJ = 11025;
export const WSA_QOS_EFLOWDESC = 11026;
export const WSA_QOS_EPSFLOWSPEC = 11027;
export const WSA_QOS_EPSFILTERSPEC = 11028;
export const WSA_QOS_ESDMODEOBJ = 11029;
export const WSA_QOS_ESHAPERATEOBJ = 11030;
export const WSA_QOS_RESERVED_PETYPE = 11031;
export const ERROR_SXS_SECTION_NOT_FOUND = 14000;
export const ERROR_SXS_CANT_GEN_ACTCTX = 14001;
export const ERROR_SXS_INVALID_ACTCTXDATA_FORMAT = 14002;
export const ERROR_SXS_ASSEMBLY_NOT_FOUND = 14003;
export const ERROR_SXS_MANIFEST_FORMAT_ERROR = 14004;
export const ERROR_SXS_MANIFEST_PARSE_ERROR = 14005;
export const ERROR_SXS_ACTIVATION_CONTEXT_DISABLED = 14006;
export const ERROR_SXS_KEY_NOT_FOUND = 14007;
export const ERROR_SXS_VERSION_CONFLICT = 14008;
export const ERROR_SXS_WRONG_SECTION_TYPE = 14009;
export const ERROR_SXS_THREAD_QUERIES_DISABLED = 14010;
export const ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET = 14011;
export const ERROR_SXS_UNKNOWN_ENCODING_GROUP = 14012;
export const ERROR_SXS_UNKNOWN_ENCODING = 14013;
export const ERROR_SXS_INVALID_XML_NAMESPACE_URI = 14014;
export const ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14015;
export const ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14016;
export const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE = 14017;
export const ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE = 14018;
export const ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE = 14019;
export const ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT = 14020;
export const ERROR_SXS_DUPLICATE_DLL_NAME = 14021;
export const ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME = 14022;
export const ERROR_SXS_DUPLICATE_CLSID = 14023;
export const ERROR_SXS_DUPLICATE_IID = 14024;
export const ERROR_SXS_DUPLICATE_TLBID = 14025;
export const ERROR_SXS_DUPLICATE_PROGID = 14026;
export const ERROR_SXS_DUPLICATE_ASSEMBLY_NAME = 14027;
export const ERROR_SXS_FILE_HASH_MISMATCH = 14028;
export const ERROR_SXS_POLICY_PARSE_ERROR = 14029;
export const ERROR_SXS_XML_E_MISSINGQUOTE = 14030;
export const ERROR_SXS_XML_E_COMMENTSYNTAX = 14031;
export const ERROR_SXS_XML_E_BADSTARTNAMECHAR = 14032;
export const ERROR_SXS_XML_E_BADNAMECHAR = 14033;
export const ERROR_SXS_XML_E_BADCHARINSTRING = 14034;
export const ERROR_SXS_XML_E_XMLDECLSYNTAX = 14035;
export const ERROR_SXS_XML_E_BADCHARDATA = 14036;
export const ERROR_SXS_XML_E_MISSINGWHITESPACE = 14037;
export const ERROR_SXS_XML_E_EXPECTINGTAGEND = 14038;
export const ERROR_SXS_XML_E_MISSINGSEMICOLON = 14039;
export const ERROR_SXS_XML_E_UNBALANCEDPAREN = 14040;
export const ERROR_SXS_XML_E_INTERNALERROR = 14041;
export const ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE = 14042;
export const ERROR_SXS_XML_E_INCOMPLETE_ENCODING = 14043;
export const ERROR_SXS_XML_E_MISSING_PAREN = 14044;
export const ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE = 14045;
export const ERROR_SXS_XML_E_MULTIPLE_COLONS = 14046;
export const ERROR_SXS_XML_E_INVALID_DECIMAL = 14047;
export const ERROR_SXS_XML_E_INVALID_HEXIDECIMAL = 14048;
export const ERROR_SXS_XML_E_INVALID_UNICODE = 14049;
export const ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK = 14050;
export const ERROR_SXS_XML_E_UNEXPECTEDENDTAG = 14051;
export const ERROR_SXS_XML_E_UNCLOSEDTAG = 14052;
export const ERROR_SXS_XML_E_DUPLICATEATTRIBUTE = 14053;
export const ERROR_SXS_XML_E_MULTIPLEROOTS = 14054;
export const ERROR_SXS_XML_E_INVALIDATROOTLEVEL = 14055;
export const ERROR_SXS_XML_E_BADXMLDECL = 14056;
export const ERROR_SXS_XML_E_MISSINGROOT = 14057;
export const ERROR_SXS_XML_E_UNEXPECTEDEOF = 14058;
export const ERROR_SXS_XML_E_BADPEREFINSUBSET = 14059;
export const ERROR_SXS_XML_E_UNCLOSEDSTARTTAG = 14060;
export const ERROR_SXS_XML_E_UNCLOSEDENDTAG = 14061;
export const ERROR_SXS_XML_E_UNCLOSEDSTRING = 14062;
export const ERROR_SXS_XML_E_UNCLOSEDCOMMENT = 14063;
export const ERROR_SXS_XML_E_UNCLOSEDDECL = 14064;
export const ERROR_SXS_XML_E_UNCLOSEDCDATA = 14065;
export const ERROR_SXS_XML_E_RESERVEDNAMESPACE = 14066;
export const ERROR_SXS_XML_E_INVALIDENCODING = 14067;
export const ERROR_SXS_XML_E_INVALIDSWITCH = 14068;
export const ERROR_SXS_XML_E_BADXMLCASE = 14069;
export const ERROR_SXS_XML_E_INVALID_STANDALONE = 14070;
export const ERROR_SXS_XML_E_UNEXPECTED_STANDALONE = 14071;
export const ERROR_SXS_XML_E_INVALID_VERSION = 14072;
export const ERROR_SXS_XML_E_MISSINGEQUALS = 14073;
export const ERROR_SXS_PROTECTION_RECOVERY_FAILED = 14074;
export const ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT = 14075;
export const ERROR_SXS_PROTECTION_CATALOG_NOT_VALID = 14076;
export const ERROR_SXS_UNTRANSLATABLE_HRESULT = 14077;
export const ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING = 14078;
export const ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE = 14079;
export const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME = 14080;
export const ERROR_IPSEC_QM_POLICY_EXISTS = 13000;
export const ERROR_IPSEC_QM_POLICY_NOT_FOUND = 13001;
export const ERROR_IPSEC_QM_POLICY_IN_USE = 13002;
export const ERROR_IPSEC_MM_POLICY_EXISTS = 13003;
export const ERROR_IPSEC_MM_POLICY_NOT_FOUND = 13004;
export const ERROR_IPSEC_MM_POLICY_IN_USE = 13005;
export const ERROR_IPSEC_MM_FILTER_EXISTS = 13006;
export const ERROR_IPSEC_MM_FILTER_NOT_FOUND = 13007;
export const ERROR_IPSEC_TRANSPORT_FILTER_EXISTS = 13008;
export const ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND = 13009;
export const ERROR_IPSEC_MM_AUTH_EXISTS = 13010;
export const ERROR_IPSEC_MM_AUTH_NOT_FOUND = 13011;
export const ERROR_IPSEC_MM_AUTH_IN_USE = 13012;
export const ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND = 13013;
export const ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND = 13014;
export const ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND = 13015;
export const ERROR_IPSEC_TUNNEL_FILTER_EXISTS = 13016;
export const ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND = 13017;
export const ERROR_IPSEC_MM_FILTER_PENDING_DELETION = 13018;
export const ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION = 13019;
export const ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION = 13020;
export const ERROR_IPSEC_MM_POLICY_PENDING_DELETION = 13021;
export const ERROR_IPSEC_MM_AUTH_PENDING_DELETION = 13022;
export const ERROR_IPSEC_QM_POLICY_PENDING_DELETION = 13023;
export const WARNING_IPSEC_MM_POLICY_PRUNED = 13024;
export const WARNING_IPSEC_QM_POLICY_PRUNED = 13025;
export const ERROR_IPSEC_IKE_NEG_STATUS_BEGIN = 13800;
export const ERROR_IPSEC_IKE_AUTH_FAIL = 13801;
export const ERROR_IPSEC_IKE_ATTRIB_FAIL = 13802;
export const ERROR_IPSEC_IKE_NEGOTIATION_PENDING = 13803;
export const ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR = 13804;
export const ERROR_IPSEC_IKE_TIMED_OUT = 13805;
export const ERROR_IPSEC_IKE_NO_CERT = 13806;
export const ERROR_IPSEC_IKE_SA_DELETED = 13807;
export const ERROR_IPSEC_IKE_SA_REAPED = 13808;
export const ERROR_IPSEC_IKE_MM_ACQUIRE_DROP = 13809;
export const ERROR_IPSEC_IKE_QM_ACQUIRE_DROP = 13810;
export const ERROR_IPSEC_IKE_QUEUE_DROP_MM = 13811;
export const ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM = 13812;
export const ERROR_IPSEC_IKE_DROP_NO_RESPONSE = 13813;
export const ERROR_IPSEC_IKE_MM_DELAY_DROP = 13814;
export const ERROR_IPSEC_IKE_QM_DELAY_DROP = 13815;
export const ERROR_IPSEC_IKE_ERROR = 13816;
export const ERROR_IPSEC_IKE_CRL_FAILED = 13817;
export const ERROR_IPSEC_IKE_INVALID_KEY_USAGE = 13818;
export const ERROR_IPSEC_IKE_INVALID_CERT_TYPE = 13819;
export const ERROR_IPSEC_IKE_NO_PRIVATE_KEY = 13820;
export const ERROR_IPSEC_IKE_DH_FAIL = 13822;
export const ERROR_IPSEC_IKE_INVALID_HEADER = 13824;
export const ERROR_IPSEC_IKE_NO_POLICY = 13825;
export const ERROR_IPSEC_IKE_INVALID_SIGNATURE = 13826;
export const ERROR_IPSEC_IKE_KERBEROS_ERROR = 13827;
export const ERROR_IPSEC_IKE_NO_PUBLIC_KEY = 13828;
export const ERROR_IPSEC_IKE_PROCESS_ERR = 13829;
export const ERROR_IPSEC_IKE_PROCESS_ERR_SA = 13830;
export const ERROR_IPSEC_IKE_PROCESS_ERR_PROP = 13831;
export const ERROR_IPSEC_IKE_PROCESS_ERR_TRANS = 13832;
export const ERROR_IPSEC_IKE_PROCESS_ERR_KE = 13833;
export const ERROR_IPSEC_IKE_PROCESS_ERR_ID = 13834;
export const ERROR_IPSEC_IKE_PROCESS_ERR_CERT = 13835;
export const ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ = 13836;
export const ERROR_IPSEC_IKE_PROCESS_ERR_HASH = 13837;
export const ERROR_IPSEC_IKE_PROCESS_ERR_SIG = 13838;
export const ERROR_IPSEC_IKE_PROCESS_ERR_NONCE = 13839;
export const ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY = 13840;
export const ERROR_IPSEC_IKE_PROCESS_ERR_DELETE = 13841;
export const ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR = 13842;
export const ERROR_IPSEC_IKE_INVALID_PAYLOAD = 13843;
export const ERROR_IPSEC_IKE_LOAD_SOFT_SA = 13844;
export const ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN = 13845;
export const ERROR_IPSEC_IKE_INVALID_COOKIE = 13846;
export const ERROR_IPSEC_IKE_NO_PEER_CERT = 13847;
export const ERROR_IPSEC_IKE_PEER_CRL_FAILED = 13848;
export const ERROR_IPSEC_IKE_POLICY_CHANGE = 13849;
export const ERROR_IPSEC_IKE_NO_MM_POLICY = 13850;
export const ERROR_IPSEC_IKE_NOTCBPRIV = 13851;
export const ERROR_IPSEC_IKE_SECLOADFAIL = 13852;
export const ERROR_IPSEC_IKE_FAILSSPINIT = 13853;
export const ERROR_IPSEC_IKE_FAILQUERYSSP = 13854;
export const ERROR_IPSEC_IKE_SRVACQFAIL = 13855;
export const ERROR_IPSEC_IKE_SRVQUERYCRED = 13856;
export const ERROR_IPSEC_IKE_GETSPIFAIL = 13857;
export const ERROR_IPSEC_IKE_INVALID_FILTER = 13858;
export const ERROR_IPSEC_IKE_OUT_OF_MEMORY = 13859;
export const ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED = 13860;
export const ERROR_IPSEC_IKE_INVALID_POLICY = 13861;
export const ERROR_IPSEC_IKE_UNKNOWN_DOI = 13862;
export const ERROR_IPSEC_IKE_INVALID_SITUATION = 13863;
export const ERROR_IPSEC_IKE_DH_FAILURE = 13864;
export const ERROR_IPSEC_IKE_INVALID_GROUP = 13865;
export const ERROR_IPSEC_IKE_ENCRYPT = 13866;
export const ERROR_IPSEC_IKE_DECRYPT = 13867;
export const ERROR_IPSEC_IKE_POLICY_MATCH = 13868;
export const ERROR_IPSEC_IKE_UNSUPPORTED_ID = 13869;
export const ERROR_IPSEC_IKE_INVALID_HASH = 13870;
export const ERROR_IPSEC_IKE_INVALID_HASH_ALG = 13871;
export const ERROR_IPSEC_IKE_INVALID_HASH_SIZE = 13872;
export const ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG = 13873;
export const ERROR_IPSEC_IKE_INVALID_AUTH_ALG = 13874;
export const ERROR_IPSEC_IKE_INVALID_SIG = 13875;
export const ERROR_IPSEC_IKE_LOAD_FAILED = 13876;
export const ERROR_IPSEC_IKE_RPC_DELETE = 13877;
export const ERROR_IPSEC_IKE_BENIGN_REINIT = 13878;
export const ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY = 13879;
export const ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN = 13881;
export const ERROR_IPSEC_IKE_MM_LIMIT = 13882;
export const ERROR_IPSEC_IKE_NEGOTIATION_DISABLED = 13883;
export const ERROR_IPSEC_IKE_NEG_STATUS_END = 13884;
//# sourceMappingURL=data:application/json;base64,
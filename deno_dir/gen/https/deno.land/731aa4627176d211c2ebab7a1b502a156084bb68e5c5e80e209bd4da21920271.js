// Copyright since 2020, FranckLdx. All rights reserved. MIT license.
import { denoDelay } from "../deps.ts";
import { asyncDecorator } from "../misc.ts";
import { defaultDuration } from "./options.ts";
import { TimeoutError } from "./timeoutError.ts";
/** 
 * wait for a function to complete within a givne duration or throw an exception.
 *  
 * @param fn the async function to execute
 * @param duration timeout in milliseconds
 * @param [error] custom error to throw when fn duration exceeded duration. If not provided a TimeoutError is thrown.
 */ export async function waitUntilAsync(fn, duration = defaultDuration, error = new TimeoutError("function did not complete within allowed time")) {
    const canary = Symbol("RETRY_LIB_FN_EXPIRED");
    const result = await Promise.race([
        fn(),
        denoDelay(duration).then(()=>canary), 
    ]);
    if (result === canary) {
        throw error;
    }
    return result;
}
/** 
 * wait for a function to complete within a givne duration or throw an exception.
 *  
 * @param fn the function to execute
 * @param duration timeout in milliseconds
 * @param [error] custom error to throw when fn duration exceeded duration. If not provided a TimeoutError is thrown.
 */ export async function waitUntil(fn, duration, error) {
    const fnAsync = asyncDecorator(fn);
    return await waitUntilAsync(fnAsync, duration, error);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvcmV0cnlAdjIuMC4wL3dhaXQvd2FpdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgc2luY2UgMjAyMCwgRnJhbmNrTGR4LiBBbGwgcmlnaHRzIHJlc2VydmVkLiBNSVQgbGljZW5zZS5cbmltcG9ydCB7IGRlbm9EZWxheSB9IGZyb20gXCIuLi9kZXBzLnRzXCI7XG5pbXBvcnQgeyBhc3luY0RlY29yYXRvciB9IGZyb20gXCIuLi9taXNjLnRzXCI7XG5pbXBvcnQgeyBkZWZhdWx0RHVyYXRpb24gfSBmcm9tIFwiLi9vcHRpb25zLnRzXCI7XG5pbXBvcnQgeyBUaW1lb3V0RXJyb3IgfSBmcm9tIFwiLi90aW1lb3V0RXJyb3IudHNcIjtcblxuLyoqIFxuICogd2FpdCBmb3IgYSBmdW5jdGlvbiB0byBjb21wbGV0ZSB3aXRoaW4gYSBnaXZuZSBkdXJhdGlvbiBvciB0aHJvdyBhbiBleGNlcHRpb24uXG4gKiAgXG4gKiBAcGFyYW0gZm4gdGhlIGFzeW5jIGZ1bmN0aW9uIHRvIGV4ZWN1dGVcbiAqIEBwYXJhbSBkdXJhdGlvbiB0aW1lb3V0IGluIG1pbGxpc2Vjb25kc1xuICogQHBhcmFtIFtlcnJvcl0gY3VzdG9tIGVycm9yIHRvIHRocm93IHdoZW4gZm4gZHVyYXRpb24gZXhjZWVkZWQgZHVyYXRpb24uIElmIG5vdCBwcm92aWRlZCBhIFRpbWVvdXRFcnJvciBpcyB0aHJvd24uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3YWl0VW50aWxBc3luYzxSRVRVUk5fVFlQRT4oXG4gIGZuOiAoKSA9PiBQcm9taXNlPFJFVFVSTl9UWVBFPixcbiAgZHVyYXRpb246IG51bWJlciA9IGRlZmF1bHREdXJhdGlvbixcbiAgZXJyb3I6IEVycm9yID0gbmV3IFRpbWVvdXRFcnJvcihcbiAgICBcImZ1bmN0aW9uIGRpZCBub3QgY29tcGxldGUgd2l0aGluIGFsbG93ZWQgdGltZVwiLFxuICApLFxuKTogUHJvbWlzZTxSRVRVUk5fVFlQRT4ge1xuICBjb25zdCBjYW5hcnkgPSBTeW1ib2woXCJSRVRSWV9MSUJfRk5fRVhQSVJFRFwiKTtcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgUHJvbWlzZS5yYWNlKFtcbiAgICBmbigpLFxuICAgIGRlbm9EZWxheShkdXJhdGlvbikudGhlbigoKSA9PiBjYW5hcnkpLFxuICBdKTtcbiAgaWYgKHJlc3VsdCA9PT0gY2FuYXJ5KSB7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdCBhcyBSRVRVUk5fVFlQRTtcbn1cblxuLyoqIFxuICogd2FpdCBmb3IgYSBmdW5jdGlvbiB0byBjb21wbGV0ZSB3aXRoaW4gYSBnaXZuZSBkdXJhdGlvbiBvciB0aHJvdyBhbiBleGNlcHRpb24uXG4gKiAgXG4gKiBAcGFyYW0gZm4gdGhlIGZ1bmN0aW9uIHRvIGV4ZWN1dGVcbiAqIEBwYXJhbSBkdXJhdGlvbiB0aW1lb3V0IGluIG1pbGxpc2Vjb25kc1xuICogQHBhcmFtIFtlcnJvcl0gY3VzdG9tIGVycm9yIHRvIHRocm93IHdoZW4gZm4gZHVyYXRpb24gZXhjZWVkZWQgZHVyYXRpb24uIElmIG5vdCBwcm92aWRlZCBhIFRpbWVvdXRFcnJvciBpcyB0aHJvd24uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3YWl0VW50aWw8VD4oXG4gIGZuOiAoKSA9PiBULFxuICBkdXJhdGlvbj86IG51bWJlcixcbiAgZXJyb3I/OiBFcnJvcixcbik6IFByb21pc2U8VD4ge1xuICBjb25zdCBmbkFzeW5jID0gYXN5bmNEZWNvcmF0b3IoZm4pO1xuICByZXR1cm4gYXdhaXQgd2FpdFVudGlsQXN5bmMoZm5Bc3luYywgZHVyYXRpb24sIGVycm9yKTtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxxRUFBcUU7QUFDckUsU0FBUyxTQUFTLFFBQVEsWUFBWSxDQUFDO0FBQ3ZDLFNBQVMsY0FBYyxRQUFRLFlBQVksQ0FBQztBQUM1QyxTQUFTLGVBQWUsUUFBUSxjQUFjLENBQUM7QUFDL0MsU0FBUyxZQUFZLFFBQVEsbUJBQW1CLENBQUM7QUFFakQ7Ozs7OztHQU1HLENBQ0gsT0FBTyxlQUFlLGNBQWMsQ0FDbEMsRUFBOEIsRUFDOUIsUUFBZ0IsR0FBRyxlQUFlLEVBQ2xDLEtBQVksR0FBRyxJQUFJLFlBQVksQ0FDN0IsK0NBQStDLENBQ2hELEVBQ3FCO0lBQ3RCLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxBQUFDO0lBQzlDLE1BQU0sTUFBTSxHQUFHLE1BQU0sT0FBTyxDQUFDLElBQUksQ0FBQztRQUNoQyxFQUFFLEVBQUU7UUFDSixTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQU0sTUFBTSxDQUFDO0tBQ3ZDLENBQUMsQUFBQztJQUNILElBQUksTUFBTSxLQUFLLE1BQU0sRUFBRTtRQUNyQixNQUFNLEtBQUssQ0FBQztLQUNiO0lBQ0QsT0FBTyxNQUFNLENBQWdCO0NBQzlCO0FBRUQ7Ozs7OztHQU1HLENBQ0gsT0FBTyxlQUFlLFNBQVMsQ0FDN0IsRUFBVyxFQUNYLFFBQWlCLEVBQ2pCLEtBQWEsRUFDRDtJQUNaLE1BQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQyxFQUFFLENBQUMsQUFBQztJQUNuQyxPQUFPLE1BQU0sY0FBYyxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDdkQifQ==
import { core } from "./_core.ts";
import { validateCallback } from "./internal/validators.mjs";
import { _exiting } from "./_process/exiting.ts";
import { FixedQueue } from "./_fixed_queue.ts";
const queue = new FixedQueue();
let _nextTick;
if (typeof core.setNextTickCallback !== "undefined") {
    function runNextTicks() {
        if (!core.hasTickScheduled()) {
            core.runMicrotasks();
        }
        if (!core.hasTickScheduled()) {
            return true;
        }
        processTicksAndRejections();
        return true;
    }
    function processTicksAndRejections() {
        let tock;
        do {
            while (tock = queue.shift()) {
                try {
                    const callback = tock.callback;
                    if (tock.args === undefined) {
                        callback();
                    }
                    else {
                        const args = tock.args;
                        switch (args.length) {
                            case 1:
                                callback(args[0]);
                                break;
                            case 2:
                                callback(args[0], args[1]);
                                break;
                            case 3:
                                callback(args[0], args[1], args[2]);
                                break;
                            case 4:
                                callback(args[0], args[1], args[2], args[3]);
                                break;
                            default:
                                callback(...args);
                        }
                    }
                }
                finally {
                }
            }
            core.runMicrotasks();
        } while (!queue.isEmpty());
        core.setHasTickScheduled(false);
    }
    core.setNextTickCallback(processTicksAndRejections);
    core.setMacrotaskCallback(runNextTicks);
    function __nextTickNative(callback, ...args) {
        validateCallback(callback);
        if (_exiting) {
            return;
        }
        let args_;
        switch (args.length) {
            case 0:
                break;
            case 1:
                args_ = [args[0]];
                break;
            case 2:
                args_ = [args[0], args[1]];
                break;
            case 3:
                args_ = [args[0], args[1], args[2]];
                break;
            default:
                args_ = new Array(args.length);
                for (let i = 0; i < args.length; i++) {
                    args_[i] = args[i];
                }
        }
        if (queue.isEmpty()) {
            core.setHasTickScheduled(true);
        }
        const tickObject = {
            callback,
            args: args_,
        };
        queue.push(tickObject);
    }
    _nextTick = __nextTickNative;
}
else {
    function __nextTickQueueMicrotask(callback, ...args) {
        if (args) {
            queueMicrotask(() => callback.call(this, ...args));
        }
        else {
            queueMicrotask(callback);
        }
    }
    _nextTick = __nextTickQueueMicrotask;
}
export function nextTick(callback, ...args) {
    _nextTick(callback, ...args);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX25leHRfdGljay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIl9uZXh0X3RpY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNsQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDakQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBTy9DLE1BQU0sS0FBSyxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7QUFHL0IsSUFBSSxTQUFjLENBQUM7QUFFbkIsSUFBSSxPQUFPLElBQUksQ0FBQyxtQkFBbUIsS0FBSyxXQUFXLEVBQUU7SUFDbkQsU0FBUyxZQUFZO1FBTW5CLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsRUFBRTtZQUM1QixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDdEI7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEVBQUU7WUFDNUIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELHlCQUF5QixFQUFFLENBQUM7UUFDNUIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsU0FBUyx5QkFBeUI7UUFDaEMsSUFBSSxJQUFJLENBQUM7UUFDVCxHQUFHO1lBRUQsT0FBTyxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUszQixJQUFJO29CQUNGLE1BQU0sUUFBUSxHQUFJLElBQWEsQ0FBQyxRQUFRLENBQUM7b0JBQ3pDLElBQUssSUFBYSxDQUFDLElBQUksS0FBSyxTQUFTLEVBQUU7d0JBQ3JDLFFBQVEsRUFBRSxDQUFDO3FCQUNaO3lCQUFNO3dCQUNMLE1BQU0sSUFBSSxHQUFJLElBQWEsQ0FBQyxJQUFJLENBQUM7d0JBQ2pDLFFBQVEsSUFBSSxDQUFDLE1BQU0sRUFBRTs0QkFD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QUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUNwRDthQUFNO1lBQ0wsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQUVELFNBQVMsR0FBRyx3QkFBd0IsQ0FBQztDQUN0QztBQVVELE1BQU0sVUFBVSxRQUFRLENBRXRCLFFBQThCLEVBQzlCLEdBQUcsSUFBTztJQUVWLFNBQVMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUMvQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiB0aGUgRGVubyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLiBNSVQgbGljZW5zZS5cbi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuXG4vLyBkZW5vLWxpbnQtaWdub3JlLWZpbGUgbm8taW5uZXItZGVjbGFyYXRpb25zXG5cbmltcG9ydCB7IGNvcmUgfSBmcm9tIFwiLi9fY29yZS50c1wiO1xuaW1wb3J0IHsgdmFsaWRhdGVDYWxsYmFjayB9IGZyb20gXCIuL2ludGVybmFsL3ZhbGlkYXRvcnMubWpzXCI7XG5pbXBvcnQgeyBfZXhpdGluZyB9IGZyb20gXCIuL19wcm9jZXNzL2V4aXRpbmcudHNcIjtcbmltcG9ydCB7IEZpeGVkUXVldWUgfSBmcm9tIFwiLi9fZml4ZWRfcXVldWUudHNcIjtcblxuaW50ZXJmYWNlIFRvY2sge1xuICBjYWxsYmFjazogKC4uLmFyZ3M6IEFycmF5PHVua25vd24+KSA9PiB2b2lkO1xuICBhcmdzOiBBcnJheTx1bmtub3duPjtcbn1cblxuY29uc3QgcXVldWUgPSBuZXcgRml4ZWRRdWV1ZSgpO1xuXG4vLyBkZW5vLWxpbnQtaWdub3JlIG5vLWV4cGxpY2l0LWFueVxubGV0IF9uZXh0VGljazogYW55O1xuXG5pZiAodHlwZW9mIGNvcmUuc2V0TmV4dFRpY2tDYWxsYmFjayAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBmdW5jdGlvbiBydW5OZXh0VGlja3MoKSB7XG4gICAgLy8gRklYTUUoYmFydGxvbWllanUpOiBEZW5vIGN1cnJlbnRseSBkb2Vzbid0IHVuaGFuZGxlZCByZWplY3Rpb25zXG4gICAgLy8gaWYgKCFoYXNUaWNrU2NoZWR1bGVkKCkgJiYgIWhhc1JlamVjdGlvblRvV2FybigpKVxuICAgIC8vICAgcnVuTWljcm90YXNrcygpO1xuICAgIC8vIGlmICghaGFzVGlja1NjaGVkdWxlZCgpICYmICFoYXNSZWplY3Rpb25Ub1dhcm4oKSlcbiAgICAvLyAgIHJldHVybjtcbiAgICBpZiAoIWNvcmUuaGFzVGlja1NjaGVkdWxlZCgpKSB7XG4gICAgICBjb3JlLnJ1bk1pY3JvdGFza3MoKTtcbiAgICB9XG4gICAgaWYgKCFjb3JlLmhhc1RpY2tTY2hlZHVsZWQoKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcHJvY2Vzc1RpY2tzQW5kUmVqZWN0aW9ucygpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc1RpY2tzQW5kUmVqZWN0aW9ucygpIHtcbiAgICBsZXQgdG9jaztcbiAgICBkbyB7XG4gICAgICAvLyBkZW5vLWxpbnQtaWdub3JlIG5vLWNvbmQtYXNzaWduXG4gICAgICB3aGlsZSAodG9jayA9IHF1ZXVlLnNoaWZ0KCkpIHtcbiAgICAgICAgLy8gRklYTUUoYmFydGxvbWllanUpOiBEZW5vIGN1cnJlbnRseSBkb2Vzbid0IHN1cHBvcnQgYXN5bmMgaG9va3NcbiAgICAgICAgLy8gY29uc3QgYXN5bmNJZCA9IHRvY2tbYXN5bmNfaWRfc3ltYm9sXTtcbiAgICAgICAgLy8gZW1pdEJlZm9yZShhc3luY0lkLCB0b2NrW3RyaWdnZXJfYXN5bmNfaWRfc3ltYm9sXSwgdG9jayk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBjYWxsYmFjayA9ICh0b2NrIGFzIFRvY2spLmNhbGxiYWNrO1xuICAgICAgICAgIGlmICgodG9jayBhcyBUb2NrKS5hcmdzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSAodG9jayBhcyBUb2NrKS5hcmdzO1xuICAgICAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soLi4uYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIC8vIEZJWE1FKGJhcnRsb21pZWp1KTogRGVubyBjdXJyZW50bHkgZG9lc24ndCBzdXBwb3J0IGFzeW5jIGhvb2tzXG4gICAgICAgICAgLy8gaWYgKGRlc3Ryb3lIb29rc0V4aXN0KCkpXG4gICAgICAgICAgLy8gZW1pdERlc3Ryb3koYXN5bmNJZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGSVhNRShiYXJ0bG9taWVqdSk6IERlbm8gY3VycmVudGx5IGRvZXNuJ3Qgc3VwcG9ydCBhc3luYyBob29rc1xuICAgICAgICAvLyBlbWl0QWZ0ZXIoYXN5bmNJZCk7XG4gICAgICB9XG4gICAgICBjb3JlLnJ1bk1pY3JvdGFza3MoKTtcbiAgICAgIC8vIEZJWE1FKGJhcnRsb21pZWp1KTogRGVubyBjdXJyZW50bHkgZG9lc24ndCB1bmhhbmRsZWQgcmVqZWN0aW9uc1xuICAgICAgLy8gfSB3aGlsZSAoIXF1ZXVlLmlzRW1wdHkoKSB8fCBwcm9jZXNzUHJvbWlzZVJlamVjdGlvbnMoKSk7XG4gICAgfSB3aGlsZSAoIXF1ZXVlLmlzRW1wdHkoKSk7XG4gICAgY29yZS5zZXRIYXNUaWNrU2NoZWR1bGVkKGZhbHNlKTtcbiAgICAvLyBGSVhNRShiYXJ0bG9taWVqdSk6IERlbm8gY3VycmVudGx5IGRvZXNuJ3QgdW5oYW5kbGVkIHJlamVjdGlvbnNcbiAgICAvLyBzZXRIYXNSZWplY3Rpb25Ub1dhcm4oZmFsc2UpO1xuICB9XG5cbiAgY29yZS5zZXROZXh0VGlja0NhbGxiYWNrKHByb2Nlc3NUaWNrc0FuZFJlamVjdGlvbnMpO1xuICBjb3JlLnNldE1hY3JvdGFza0NhbGxiYWNrKHJ1bk5leHRUaWNrcyk7XG5cbiAgZnVuY3Rpb24gX19uZXh0VGlja05hdGl2ZTxUIGV4dGVuZHMgQXJyYXk8dW5rbm93bj4+KFxuICAgIHRoaXM6IHVua25vd24sXG4gICAgY2FsbGJhY2s6ICguLi5hcmdzOiBUKSA9PiB2b2lkLFxuICAgIC4uLmFyZ3M6IFRcbiAgKSB7XG4gICAgdmFsaWRhdGVDYWxsYmFjayhjYWxsYmFjayk7XG5cbiAgICBpZiAoX2V4aXRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBUT0RPKGJhcnRsb21pZWp1KTogc2VlbXMgc3VwZXJmbHVvdXMgaWYgd2UgZG9uJ3QgZGVwZW5kIG9uIGBhcmd1bWVudHNgXG4gICAgbGV0IGFyZ3NfO1xuICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGFyZ3NfID0gW2FyZ3NbMF1dO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgYXJnc18gPSBbYXJnc1swXSwgYXJnc1sxXV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBhcmdzXyA9IFthcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhcmdzXyA9IG5ldyBBcnJheShhcmdzLmxlbmd0aCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFyZ3NfW2ldID0gYXJnc1tpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChxdWV1ZS5pc0VtcHR5KCkpIHtcbiAgICAgIGNvcmUuc2V0SGFzVGlja1NjaGVkdWxlZCh0cnVlKTtcbiAgICB9XG4gICAgLy8gRklYTUUoYmFydGxvbWllanUpOiBEZW5vIGN1cnJlbnRseSBkb2Vzbid0IHN1cHBvcnQgYXN5bmMgaG9va3NcbiAgICAvLyBjb25zdCBhc3luY0lkID0gbmV3QXN5bmNJZCgpO1xuICAgIC8vIGNvbnN0IHRyaWdnZXJBc3luY0lkID0gZ2V0RGVmYXVsdFRyaWdnZXJBc3luY0lkKCk7XG4gICAgY29uc3QgdGlja09iamVjdCA9IHtcbiAgICAgIC8vIEZJWE1FKGJhcnRsb21pZWp1KTogRGVubyBjdXJyZW50bHkgZG9lc24ndCBzdXBwb3J0IGFzeW5jIGhvb2tzXG4gICAgICAvLyBbYXN5bmNfaWRfc3ltYm9sXTogYXN5bmNJZCxcbiAgICAgIC8vIFt0cmlnZ2VyX2FzeW5jX2lkX3N5bWJvbF06IHRyaWdnZXJBc3luY0lkLFxuICAgICAgY2FsbGJhY2ssXG4gICAgICBhcmdzOiBhcmdzXyxcbiAgICB9O1xuICAgIC8vIEZJWE1FKGJhcnRsb21pZWp1KTogRGVubyBjdXJyZW50bHkgZG9lc24ndCBzdXBwb3J0IGFzeW5jIGhvb2tzXG4gICAgLy8gaWYgKGluaXRIb29rc0V4aXN0KCkpXG4gICAgLy8gICBlbWl0SW5pdChhc3luY0lkLCAnVGlja09iamVjdCcsIHRyaWdnZXJBc3luY0lkLCB0aWNrT2JqZWN0KTtcbiAgICBxdWV1ZS5wdXNoKHRpY2tPYmplY3QpO1xuICB9XG4gIF9uZXh0VGljayA9IF9fbmV4dFRpY2tOYXRpdmU7XG59IGVsc2Uge1xuICBmdW5jdGlvbiBfX25leHRUaWNrUXVldWVNaWNyb3Rhc2s8VCBleHRlbmRzIEFycmF5PHVua25vd24+PihcbiAgICB0aGlzOiB1bmtub3duLFxuICAgIGNhbGxiYWNrOiAoLi4uYXJnczogVCkgPT4gdm9pZCxcbiAgICAuLi5hcmdzOiBUXG4gICkge1xuICAgIGlmIChhcmdzKSB7XG4gICAgICBxdWV1ZU1pY3JvdGFzaygoKSA9PiBjYWxsYmFjay5jYWxsKHRoaXMsIC4uLmFyZ3MpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcXVldWVNaWNyb3Rhc2soY2FsbGJhY2spO1xuICAgIH1cbiAgfVxuXG4gIF9uZXh0VGljayA9IF9fbmV4dFRpY2tRdWV1ZU1pY3JvdGFzaztcbn1cblxuLy8gYG5leHRUaWNrKClgIHdpbGwgbm90IGVucXVldWUgYW55IGNhbGxiYWNrIHdoZW4gdGhlIHByb2Nlc3MgaXMgYWJvdXQgdG9cbi8vIGV4aXQgc2luY2UgdGhlIGNhbGxiYWNrIHdvdWxkIG5vdCBoYXZlIGEgY2hhbmNlIHRvIGJlIGV4ZWN1dGVkLlxuZXhwb3J0IGZ1bmN0aW9uIG5leHRUaWNrKHRoaXM6IHVua25vd24sIGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogdm9pZDtcbmV4cG9ydCBmdW5jdGlvbiBuZXh0VGljazxUIGV4dGVuZHMgQXJyYXk8dW5rbm93bj4+KFxuICB0aGlzOiB1bmtub3duLFxuICBjYWxsYmFjazogKC4uLmFyZ3M6IFQpID0+IHZvaWQsXG4gIC4uLmFyZ3M6IFRcbik6IHZvaWQ7XG5leHBvcnQgZnVuY3Rpb24gbmV4dFRpY2s8VCBleHRlbmRzIEFycmF5PHVua25vd24+PihcbiAgdGhpczogdW5rbm93bixcbiAgY2FsbGJhY2s6ICguLi5hcmdzOiBUKSA9PiB2b2lkLFxuICAuLi5hcmdzOiBUXG4pIHtcbiAgX25leHRUaWNrKGNhbGxiYWNrLCAuLi5hcmdzKTtcbn1cbiJdfQ==
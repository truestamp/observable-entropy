// Copyright since 2020, FranckLdx. All rights reserved. MIT license.
import { waitUntil, waitUntilAsync } from "./wait.ts";
/** a waitUntilAsync decorator 
 * @param fn the async function to execute
 * @param duration timeout in milliseconds
 * @param [error] custom error to throw when fn duration exceeded duration. If not provided a TimeoutError is thrown.
 * @returns a function hat takes same parameters as fn. It calls fn using waitUntilAsync and returns/throws the results/error of this call? 
*/ export function waitUntilAsyncDecorator(fn, duration, error) {
    return (...args)=>{
        const wrappedFn = ()=>fn(...args);
        return waitUntilAsync(wrappedFn, duration, error);
    };
}
/** a waitUntil decorator 
 * @param fn the function to execute
 * @param duration timeout in milliseconds
 * @param [error] custom error to throw when fn duration exceeded duration. If not provided a TimeoutError is thrown.
 * @returns: a function hat takes same parameters as fn. It calls fn using waitUntil and returns/throws the results/error of this call? 
*/ export function waitUntilDecorator(fn, duration, error) {
    return (...args)=>{
        const wrappedFn = ()=>fn(...args);
        return waitUntil(wrappedFn, duration, error);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvcmV0cnlAdjIuMC4wL3dhaXQvZGVjb3JhdG9ycy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgc2luY2UgMjAyMCwgRnJhbmNrTGR4LiBBbGwgcmlnaHRzIHJlc2VydmVkLiBNSVQgbGljZW5zZS5cbmltcG9ydCB7IHdhaXRVbnRpbCwgd2FpdFVudGlsQXN5bmMgfSBmcm9tIFwiLi93YWl0LnRzXCI7XG5cbi8qKiBhIHdhaXRVbnRpbEFzeW5jIGRlY29yYXRvciBcbiAqIEBwYXJhbSBmbiB0aGUgYXN5bmMgZnVuY3Rpb24gdG8gZXhlY3V0ZVxuICogQHBhcmFtIGR1cmF0aW9uIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzXG4gKiBAcGFyYW0gW2Vycm9yXSBjdXN0b20gZXJyb3IgdG8gdGhyb3cgd2hlbiBmbiBkdXJhdGlvbiBleGNlZWRlZCBkdXJhdGlvbi4gSWYgbm90IHByb3ZpZGVkIGEgVGltZW91dEVycm9yIGlzIHRocm93bi5cbiAqIEByZXR1cm5zIGEgZnVuY3Rpb24gaGF0IHRha2VzIHNhbWUgcGFyYW1ldGVycyBhcyBmbi4gSXQgY2FsbHMgZm4gdXNpbmcgd2FpdFVudGlsQXN5bmMgYW5kIHJldHVybnMvdGhyb3dzIHRoZSByZXN1bHRzL2Vycm9yIG9mIHRoaXMgY2FsbD8gXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIHdhaXRVbnRpbEFzeW5jRGVjb3JhdG9yPFxuICAvLyBkZW5vLWxpbnQtaWdub3JlIG5vLWV4cGxpY2l0LWFueVxuICBSRVRVUk5fVFlQRSBleHRlbmRzICguLi5hcmdzOiBhbnlbXSkgPT4gUHJvbWlzZTxhbnk+LFxuPihmbjogUkVUVVJOX1RZUEUsIGR1cmF0aW9uPzogbnVtYmVyLCBlcnJvcj86IEVycm9yKSB7XG4gIHJldHVybiAoLi4uYXJnczogUGFyYW1ldGVyczxSRVRVUk5fVFlQRT4pOiBSZXR1cm5UeXBlPFJFVFVSTl9UWVBFPiA9PiB7XG4gICAgY29uc3Qgd3JhcHBlZEZuID0gKCkgPT4gZm4oLi4uYXJncyk7XG4gICAgcmV0dXJuIHdhaXRVbnRpbEFzeW5jKHdyYXBwZWRGbiwgZHVyYXRpb24sIGVycm9yKSBhcyBSZXR1cm5UeXBlPFxuICAgICAgUkVUVVJOX1RZUEVcbiAgICA+O1xuICB9O1xufVxuXG4vKiogYSB3YWl0VW50aWwgZGVjb3JhdG9yIFxuICogQHBhcmFtIGZuIHRoZSBmdW5jdGlvbiB0byBleGVjdXRlXG4gKiBAcGFyYW0gZHVyYXRpb24gdGltZW91dCBpbiBtaWxsaXNlY29uZHNcbiAqIEBwYXJhbSBbZXJyb3JdIGN1c3RvbSBlcnJvciB0byB0aHJvdyB3aGVuIGZuIGR1cmF0aW9uIGV4Y2VlZGVkIGR1cmF0aW9uLiBJZiBub3QgcHJvdmlkZWQgYSBUaW1lb3V0RXJyb3IgaXMgdGhyb3duLlxuICogQHJldHVybnM6IGEgZnVuY3Rpb24gaGF0IHRha2VzIHNhbWUgcGFyYW1ldGVycyBhcyBmbi4gSXQgY2FsbHMgZm4gdXNpbmcgd2FpdFVudGlsIGFuZCByZXR1cm5zL3Rocm93cyB0aGUgcmVzdWx0cy9lcnJvciBvZiB0aGlzIGNhbGw/IFxuKi9cbmV4cG9ydCBmdW5jdGlvbiB3YWl0VW50aWxEZWNvcmF0b3I8XG4gIC8vIGRlbm8tbGludC1pZ25vcmUgbm8tZXhwbGljaXQtYW55XG4gIFQgZXh0ZW5kcyAoLi4uYXJnczogYW55W10pID0+IGFueSxcbj4oZm46IFQsIGR1cmF0aW9uPzogbnVtYmVyLCBlcnJvcj86IEVycm9yKSB7XG4gIHJldHVybiAoLi4uYXJnczogUGFyYW1ldGVyczxUPik6IFJldHVyblR5cGU8VD4gPT4ge1xuICAgIGNvbnN0IHdyYXBwZWRGbiA9ICgpID0+IGZuKC4uLmFyZ3MpO1xuICAgIHJldHVybiB3YWl0VW50aWwod3JhcHBlZEZuLCBkdXJhdGlvbiwgZXJyb3IpIGFzIFJldHVyblR5cGU8VD47XG4gIH07XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEscUVBQXFFO0FBQ3JFLFNBQVMsU0FBUyxFQUFFLGNBQWMsUUFBUSxXQUFXLENBQUM7QUFFdEQ7Ozs7O0VBS0UsQ0FDRixPQUFPLFNBQVMsdUJBQXVCLENBR3JDLEVBQWUsRUFBRSxRQUFpQixFQUFFLEtBQWEsRUFBRTtJQUNuRCxPQUFPLENBQUMsR0FBRyxJQUFJLEFBQXlCLEdBQThCO1FBQ3BFLE1BQU0sU0FBUyxHQUFHLElBQU0sRUFBRSxJQUFJLElBQUksQ0FBQyxBQUFDO1FBQ3BDLE9BQU8sY0FBYyxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBRS9DO0tBQ0gsQ0FBQztDQUNIO0FBRUQ7Ozs7O0VBS0UsQ0FDRixPQUFPLFNBQVMsa0JBQWtCLENBR2hDLEVBQUssRUFBRSxRQUFpQixFQUFFLEtBQWEsRUFBRTtJQUN6QyxPQUFPLENBQUMsR0FBRyxJQUFJLEFBQWUsR0FBb0I7UUFDaEQsTUFBTSxTQUFTLEdBQUcsSUFBTSxFQUFFLElBQUksSUFBSSxDQUFDLEFBQUM7UUFDcEMsT0FBTyxTQUFTLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBa0I7S0FDL0QsQ0FBQztDQUNIIn0=
const noop = () => { };
class AsyncIterableClone {
    currentPromise;
    resolveCurrent = noop;
    consumed;
    consume = noop;
    constructor() {
        this.currentPromise = new Promise((resolve) => {
            this.resolveCurrent = resolve;
        });
        this.consumed = new Promise((resolve) => {
            this.consume = resolve;
        });
    }
    reset() {
        this.currentPromise = new Promise((resolve) => {
            this.resolveCurrent = resolve;
        });
        this.consumed = new Promise((resolve) => {
            this.consume = resolve;
        });
    }
    async next() {
        const res = await this.currentPromise;
        this.consume();
        this.reset();
        return res;
    }
    async push(res) {
        this.resolveCurrent(res);
        await this.consumed;
    }
    [Symbol.asyncIterator]() {
        return this;
    }
}
export function tee(src, n = 2) {
    const clones = Array.from({ length: n }).map(() => new AsyncIterableClone());
    (async () => {
        const iter = src[Symbol.asyncIterator]();
        await Promise.resolve();
        while (true) {
            const res = iter.next();
            await Promise.all(clones.map((c) => c.push(res)));
            if ((await res).done) {
                break;
            }
        }
    })().catch((e) => {
        console.error(e);
    });
    return clones;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVVBLE1BQU0sSUFBSSxHQUFHLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQztBQUV0QixNQUFNLGtCQUFrQjtJQUN0QixjQUFjLENBQTZCO0lBQzNDLGNBQWMsR0FBNEMsSUFBSSxDQUFDO0lBQy9ELFFBQVEsQ0FBZ0I7SUFDeEIsT0FBTyxHQUFlLElBQUksQ0FBQztJQUUzQjtRQUNFLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxPQUFPLENBQW9CLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDL0QsSUFBSSxDQUFDLGNBQWMsR0FBRyxPQUFPLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksT0FBTyxDQUFPLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDNUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxPQUFPLENBQW9CLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDL0QsSUFBSSxDQUFDLGNBQWMsR0FBRyxPQUFPLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksT0FBTyxDQUFPLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDNUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUk7UUFDUixNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxjQUFjLENBQUM7UUFDdEMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2YsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2IsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUErQjtRQUN4QyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXpCLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN0QixDQUFDO0lBRUQsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBQ3BCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGO0FBMkJELE1BQU0sVUFBVSxHQUFHLENBQ2pCLEdBQXFCLEVBQ3JCLElBQU8sQ0FBTTtJQUViLE1BQU0sTUFBTSxHQUFvQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUMzRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLGtCQUFrQixFQUFFLENBRXhCLENBQUM7SUFDVCxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ1YsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO1FBQ3pDLE1BQU0sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3hCLE9BQU8sSUFBSSxFQUFFO1lBQ1gsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3hCLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsRCxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUU7Z0JBQ3BCLE1BQU07YUFDUDtTQUNGO0lBQ0gsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtRQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMSB0aGUgRGVubyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLiBNSVQgbGljZW5zZS5cblxuLy8gVXRpbGl0eSBmb3IgcmVwcmVzZW50aW5nIG4tdHVwbGVcbnR5cGUgVHVwbGU8VCwgTiBleHRlbmRzIG51bWJlcj4gPSBOIGV4dGVuZHMgTlxuICA/IG51bWJlciBleHRlbmRzIE4gPyBUW10gOiBUdXBsZU9mPFQsIE4sIFtdPlxuICA6IG5ldmVyO1xudHlwZSBUdXBsZU9mPFQsIE4gZXh0ZW5kcyBudW1iZXIsIFIgZXh0ZW5kcyB1bmtub3duW10+ID0gUltcImxlbmd0aFwiXSBleHRlbmRzIE5cbiAgPyBSXG4gIDogVHVwbGVPZjxULCBOLCBbVCwgLi4uUl0+O1xuXG5jb25zdCBub29wID0gKCkgPT4ge307XG5cbmNsYXNzIEFzeW5jSXRlcmFibGVDbG9uZTxUPiBpbXBsZW1lbnRzIEFzeW5jSXRlcmFibGU8VD4ge1xuICBjdXJyZW50UHJvbWlzZTogUHJvbWlzZTxJdGVyYXRvclJlc3VsdDxUPj47XG4gIHJlc29sdmVDdXJyZW50OiAoeDogUHJvbWlzZTxJdGVyYXRvclJlc3VsdDxUPj4pID0+IHZvaWQgPSBub29wO1xuICBjb25zdW1lZDogUHJvbWlzZTx2b2lkPjtcbiAgY29uc3VtZTogKCkgPT4gdm9pZCA9IG5vb3A7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jdXJyZW50UHJvbWlzZSA9IG5ldyBQcm9taXNlPEl0ZXJhdG9yUmVzdWx0PFQ+PigocmVzb2x2ZSkgPT4ge1xuICAgICAgdGhpcy5yZXNvbHZlQ3VycmVudCA9IHJlc29sdmU7XG4gICAgfSk7XG4gICAgdGhpcy5jb25zdW1lZCA9IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlKSA9PiB7XG4gICAgICB0aGlzLmNvbnN1bWUgPSByZXNvbHZlO1xuICAgIH0pO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5jdXJyZW50UHJvbWlzZSA9IG5ldyBQcm9taXNlPEl0ZXJhdG9yUmVzdWx0PFQ+PigocmVzb2x2ZSkgPT4ge1xuICAgICAgdGhpcy5yZXNvbHZlQ3VycmVudCA9IHJlc29sdmU7XG4gICAgfSk7XG4gICAgdGhpcy5jb25zdW1lZCA9IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlKSA9PiB7XG4gICAgICB0aGlzLmNvbnN1bWUgPSByZXNvbHZlO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgbmV4dCgpOiBQcm9taXNlPEl0ZXJhdG9yUmVzdWx0PFQ+PiB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5jdXJyZW50UHJvbWlzZTtcbiAgICB0aGlzLmNvbnN1bWUoKTtcbiAgICB0aGlzLnJlc2V0KCk7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG4gIGFzeW5jIHB1c2gocmVzOiBQcm9taXNlPEl0ZXJhdG9yUmVzdWx0PFQ+Pik6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMucmVzb2x2ZUN1cnJlbnQocmVzKTtcbiAgICAvLyBXYWl0IHVudGlsIGN1cnJlbnQgcHJvbWlzZSBpcyBjb25zdW1lZCBhbmQgbmV4dCBpdGVtIGlzIHJlcXVlc3RlZC5cbiAgICBhd2FpdCB0aGlzLmNvbnN1bWVkO1xuICB9XG5cbiAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpOiBBc3luY0l0ZXJhdG9yPFQ+IHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG4vKipcbiAqIEJyYW5jaGVzIHRoZSBnaXZlbiBhc3luYyBpdGVyYWJsZSBpbnRvIHRoZSBuIGJyYW5jaGVzLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IGdlbiA9IGFzeW5jIGZ1bmN0aW9uKiBnZW4oKSB7XG4gKiAgICAgICB5aWVsZCAxO1xuICogICAgICAgeWllbGQgMjtcbiAqICAgICAgIHlpZWxkIDM7XG4gKiAgICAgfVxuICpcbiAqICAgICBjb25zdCBbYnJhbmNoMSwgYnJhbmNoMl0gPSB0ZWUoZ2VuKCkpO1xuICpcbiAqICAgICAoYXN5bmMgKCkgPT4ge1xuICogICAgICAgZm9yIGF3YWl0IChjb25zdCBuIG9mIGJyYW5jaDEpIHtcbiAqICAgICAgICAgY29uc29sZS5sb2cobik7IC8vID0+IDEsIDIsIDNcbiAqICAgICAgIH1cbiAqICAgICB9KSgpO1xuICpcbiAqICAgICAoYXN5bmMgKCkgPT4ge1xuICogICAgICAgZm9yIGF3YWl0IChjb25zdCBuIG9mIGJyYW5jaDIpIHtcbiAqICAgICAgICAgY29uc29sZS5sb2cobik7IC8vID0+IDEsIDIsIDNcbiAqICAgICAgIH1cbiAqICAgICB9KSgpO1xuICovXG5leHBvcnQgZnVuY3Rpb24gdGVlPFQsIE4gZXh0ZW5kcyBudW1iZXIgPSAyPihcbiAgc3JjOiBBc3luY0l0ZXJhYmxlPFQ+LFxuICBuOiBOID0gMiBhcyBOLFxuKTogVHVwbGU8QXN5bmNJdGVyYWJsZTxUPiwgTj4ge1xuICBjb25zdCBjbG9uZXM6IFR1cGxlPEFzeW5jSXRlcmFibGVDbG9uZTxUPiwgTj4gPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiBuIH0pLm1hcChcbiAgICAoKSA9PiBuZXcgQXN5bmNJdGVyYWJsZUNsb25lKCksXG4gICAgLy8gZGVuby1saW50LWlnbm9yZSBuby1leHBsaWNpdC1hbnlcbiAgKSBhcyBhbnk7XG4gIChhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgaXRlciA9IHNyY1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICBhd2FpdCBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgY29uc3QgcmVzID0gaXRlci5uZXh0KCk7XG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChjbG9uZXMubWFwKChjKSA9PiBjLnB1c2gocmVzKSkpO1xuICAgICAgaWYgKChhd2FpdCByZXMpLmRvbmUpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9KSgpLmNhdGNoKChlKSA9PiB7XG4gICAgY29uc29sZS5lcnJvcihlKTtcbiAgfSk7XG4gIHJldHVybiBjbG9uZXM7XG59XG4iXX0=